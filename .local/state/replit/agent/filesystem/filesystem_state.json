{"file_contents":{"design_guidelines.md":{"content":"# Client Onboarding Portal Design Guidelines\n\n## Design Approach\n**Selected Approach**: Design System (Material Design)\n**Justification**: This is a utility-focused productivity tool for business clients requiring clear information hierarchy, professional credibility, and efficient task completion. Material Design provides the structured, trustworthy aesthetic needed for B2B software.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors**:\n- Light Mode: 255 87% 51% (Professional blue)\n- Dark Mode: 255 77% 41% (Slightly muted blue)\n\n**Accent Colors**: \n- Success: 142 76% 36% (Professional green for completed steps)\n- Warning: 38 92% 50% (Amber for attention items)\n\n**Backgrounds**:\n- Light Mode: Clean whites and subtle grays (210 20% 98%, 210 20% 96%)\n- Dark Mode: Professional dark grays (220 13% 18%, 220 13% 14%)\n\n### Typography\n**Primary Font**: Inter (Google Fonts)\n**Hierarchy**:\n- Headings: 600-700 weight, clean sans-serif\n- Body: 400-500 weight for readability\n- UI Elements: 500 weight for clarity\n\n### Layout System\n**Spacing Units**: Tailwind 4, 6, 8, 12, 16\n- Consistent 8px grid system\n- Generous whitespace for professional feel\n- Container max-width for optimal reading\n\n### Component Library\n\n**Navigation**:\n- Horizontal progress bar with step indicators\n- Breadcrumb navigation\n- Clean sidebar for admin dashboard\n\n**Forms**:\n- Material Design-inspired inputs with floating labels\n- Clear validation states (success green, error red)\n- Upload areas with drag-and-drop styling\n- Multi-select chips for options\n\n**Data Display**:\n- Clean cards for project summaries\n- Tables with zebra striping for admin dashboard\n- Status badges with color coding\n\n**Overlays**:\n- Modal dialogs for confirmations\n- Tooltips for guidance\n- Loading states with professional spinners\n\n## Key Features Design\n\n**Multi-Step Wizard**:\n- Clean progress indicator showing 9 steps\n- Large, clear step titles\n- Previous/Next navigation with disabled states\n- Auto-save indicators\n\n**AI Integration Points**:\n- Subtle \"AI-powered\" badges\n- Loading states for AI generation\n- Clear regeneration options\n\n**File Uploads**:\n- Drag-and-drop zones with dotted borders\n- Image previews with remove options\n- File type and size indicators\n\n**Creative Brief Review**:\n- Clean summary cards organized by section\n- Print-friendly layout preparation\n- Export button prominently placed\n\n## Professional B2B Aesthetic\n- Clean, uncluttered interfaces\n- Consistent spacing and alignment\n- Professional color usage (avoid bright, playful colors)\n- Clear visual hierarchy\n- Trustworthy, agency-quality presentation\n- Subtle shadows and depth for Material Design feel\n\n## Images\n**Hero Image**: None - This is a utility-focused application prioritizing functionality over visual marketing.\n\n**Supporting Images**:\n- Icon illustrations for each onboarding step (simple, line-style icons)\n- Placeholder images in upload areas\n- Company logo placeholder areas\n- Small decorative elements for empty states\n\nThe design emphasizes professional efficiency and clear information architecture appropriate for business clients working with a web design agency.","size_bytes":3140},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Client Onboarding Portal\n\n## Overview\n\nThis is a comprehensive client onboarding portal for a web design agency that streamlines the project initiation process through a guided questionnaire system. The application serves both client-facing onboarding workflows and admin project management functionality.\n\nThe portal transforms the traditional creative brief process into an interactive, multi-step wizard that captures business requirements, branding preferences, site structure, content needs, and design direction. It generates a complete creative brief document and provides project management capabilities for tracking multiple client engagements.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and maintainable code\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React hooks for local state, TanStack Query for server state management\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS\n- **Design System**: Material Design approach with professional color palette and Inter typography\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture  \n- **Runtime**: Node.js with Express.js web framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **API Structure**: RESTful endpoints with JSON request/response format\n- **Error Handling**: Centralized error middleware with structured error responses\n- **Development**: Hot module replacement via Vite integration for seamless development experience\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema**: User management system with extensible project data structure\n- **Migrations**: Drizzle Kit for database schema versioning and deployment\n\n### Authentication and Authorization\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed sessions\n- **User Roles**: Multi-tier access control (guest, client, admin) for different interface experiences\n- **Security**: Express session middleware with secure cookie configuration\n\n### Component Architecture\n- **Wizard System**: Multi-step onboarding process with progress tracking and validation\n- **Form Management**: React Hook Form with Zod validation for robust form handling  \n- **File Handling**: Drag-and-drop file upload components with type validation and size limits\n- **Design Patterns**: Compound components for complex UI elements like dashboards and review interfaces\n- **Responsive Design**: Mobile-first approach with Tailwind responsive utilities\n\n## External Dependencies\n\n### Third-Party Services\n- **AI Integration**: OpenAI API (GPT-5) for intelligent business name generation and content assistance\n- **Database Hosting**: Neon serverless PostgreSQL for scalable data storage\n- **Font Service**: Google Fonts (Inter family) for consistent typography\n\n### Development Tools  \n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Styling**: Tailwind CSS with custom design tokens and dark mode support\n- **Build Pipeline**: Vite with React plugin and TypeScript support\n- **Code Quality**: ESLint and TypeScript compiler for code validation\n- **Environment**: Replit-specific plugins for development environment integration\n\n### Runtime Dependencies\n- **HTTP Client**: Native fetch API with custom query client abstraction\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Validation**: Zod schemas for runtime type validation\n- **Icons**: Lucide React for consistent iconography\n- **Utilities**: clsx and tailwind-merge for conditional styling","size_bytes":3833},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  // Configure server options based on environment\n  const isReplit = process.env.REPLIT || process.env.REPL_ID;\n  const listenOptions: any = {\n    port,\n    host: isReplit ? \"0.0.0.0\" : \"localhost\",\n  };\n  \n  // Only use reusePort on Replit where it's supported\n  if (isReplit) {\n    listenOptions.reusePort = true;\n  }\n  \n  server.listen(listenOptions, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2381},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport OpenAI from \"openai\";\nimport { logoGenerationRequestSchema, type GeneratedLogo, contentGenerationRequestSchema, pageRegenerationRequestSchema, projectSubmissionSchema, type ProjectSubmission, featureSelectionSchema, insertFeatureSelectionSchema, insertProjectSubmissionSchema } from \"../shared/schema\";\n\n// OpenAI integration - the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Business name generation endpoint\n  app.post(\"/api/generate-names\", async (req, res) => {\n    try {\n      const { description, nameIdea } = req.body;\n      \n      // Validate input - need at least description OR nameIdea\n      if ((!description || description.trim().length === 0) && (!nameIdea || nameIdea.trim().length === 0)) {\n        return res.status(400).json({ \n          error: \"Business description or name idea is required\" \n        });\n      }\n\n      let prompt = \"\";\n      \n      if (nameIdea && nameIdea.trim().length > 0) {\n        // Generate variations based on business name idea\n        const businessContext = description && description.trim().length > 0 \n          ? `\\n\\nBusiness Context: \"${description.trim()}\"`\n          : \"\";\n        \n        prompt = `Based on this business name idea: \"${nameIdea.trim()}\"${businessContext}\n\nGenerate 5 creative variations and alternatives for this business name. The names should be:\n- Similar in style and feeling to the original idea\n- Memorable and brandable\n- Professional and trustworthy\n- Easy to spell and pronounce\n- Available as potential domain names (avoid very common words)\n- Reflect the business's purpose and values\n\nRespond with JSON in this format:\n{\n  \"names\": [\"Name 1\", \"Name 2\", \"Name 3\", \"Name 4\", \"Name 5\"]\n}`;\n      } else {\n        // Generate names based on business description only\n        prompt = `Based on this business description: \"${description.trim()}\"\n\nGenerate 5 creative, professional business names that would be suitable for this business. The names should be:\n- Memorable and brandable\n- Professional and trustworthy\n- Easy to spell and pronounce\n- Available as potential domain names (avoid very common words)\n- Reflect the business's purpose and values\n\nRespond with JSON in this format:\n{\n  \"names\": [\"Name 1\", \"Name 2\", \"Name 3\", \"Name 4\", \"Name 5\"]\n}`;\n      }\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a creative business naming expert. Generate professional, memorable business names that would work well for branding and marketing.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.8, // Restore creative temperature for name generation\n        max_tokens: 300 // Correct parameter for gpt-4o with Chat Completions\n      });\n\n      console.log(\"OpenAI response:\", JSON.stringify(response, null, 2));\n      \n      const content = response.choices?.[0]?.message?.content;\n      if (!content) {\n        console.error(\"Failed to get content from response:\", {\n          choices: response.choices,\n          hasChoices: !!response.choices,\n          choicesLength: response.choices?.length,\n          firstChoice: response.choices?.[0],\n          message: response.choices?.[0]?.message\n        });\n        throw new Error(\"No content received from AI\");\n      }\n      \n      const result = JSON.parse(content);\n      \n      // Validate the response structure\n      if (!result.names || !Array.isArray(result.names) || result.names.length === 0) {\n        throw new Error(\"Invalid response format from AI\");\n      }\n\n      res.json({ \n        names: result.names.slice(0, 5) // Ensure we only return max 5 names\n      });\n\n    } catch (error) {\n      console.error(\"Error generating business names:\", error);\n      \n      // Provide fallback names if AI fails\n      const fallbackNames = [\n        \"Prime Solutions\",\n        \"Elite Services\",\n        \"Apex Partners\",\n        \"Summit Group\",\n        \"Pinnacle Co\"\n      ];\n\n      res.json({ \n        names: fallbackNames,\n        fallback: true\n      });\n    }\n  });\n\n  // Logo generation endpoint\n  app.post(\"/api/logo/generate\", async (req, res) => {\n    try {\n      // Validate request body using Zod schema\n      const validationResult = logoGenerationRequestSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n      \n      const { businessName, description, preferences, referenceImageBase64 } = validationResult.data;\n      \n      // Build the logo description prompt\n      const logoTypes = preferences.types.join(\", \");\n      const logoStyles = preferences.styles.join(\", \");\n      const colorInfo = preferences.colors ? ` with ${preferences.colors} colors` : \"\";\n      \n      const businessInfo = businessName ? `\"${businessName}\" ` : \"\";\n      const basePrompt = `Clean logo design for ${businessInfo}business: \"${description}\"`;\n      \n      const stylePrompt = `Design style: ${logoStyles}. Logo type: ${logoTypes}${colorInfo}.`;\n      \n      const formatPrompt = \"IMPORTANT: Show ONLY the logo itself - straight-on view, centered, no mockups, no business cards, no letterheads, no stationary, no angled views, no backgrounds with textures. Just the clean logo design isolated on a plain white or transparent background.\";\n      \n      const qualityPrompt = \"High-quality, clean, scalable vector-style design ready for tracing and professional use.\";\n      \n      const fullPrompt = `${basePrompt}. ${stylePrompt}. ${formatPrompt} ${qualityPrompt}`;\n      \n      console.log(\"Generating logo with prompt:\", fullPrompt);\n      \n      // Generate multiple logo variations (3 logos for better reliability)\n      const responses = [];\n      const maxRetries = 2;\n      \n      for (let i = 0; i < 3; i++) {\n        let retries = 0;\n        let success = false;\n        \n        while (retries <= maxRetries && !success) {\n          try {\n            console.log(`Generating logo ${i + 1}/3 (attempt ${retries + 1})`);\n            \n            const response = await openai.images.generate({\n              model: \"dall-e-3\", \n              prompt: fullPrompt,\n              n: 1,\n              size: \"1024x1024\",\n              quality: \"standard\",\n              response_format: \"b64_json\"\n            });\n            \n            responses.push(response);\n            success = true;\n            console.log(`Logo ${i + 1} generated successfully`);\n            \n          } catch (error: any) {\n            retries++;\n            console.error(`Error generating logo ${i + 1}, attempt ${retries}:`, error.message);\n            \n            if (retries > maxRetries) {\n              console.error(`Failed to generate logo ${i + 1} after ${maxRetries + 1} attempts`);\n              // Continue with fewer logos rather than failing completely\n              break;\n            }\n            \n            // Wait a bit before retrying\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n        }\n      }\n      \n      // Filter out failed responses and map to GeneratedLogo format\n      const generatedLogos: GeneratedLogo[] = [];\n      \n      responses.forEach((response, index) => {\n        const imageData = response.data?.[0];\n        if (imageData?.b64_json) {\n          generatedLogos.push({\n            id: `logo-${Date.now()}-${index}`,\n            dataUrl: `data:image/png;base64,${imageData.b64_json}`,\n            prompt: fullPrompt\n          });\n        }\n      });\n      \n      if (generatedLogos.length === 0) {\n        return res.status(500).json({ \n          error: \"Unable to generate any logos at this time. Please try again with different preferences or check your internet connection.\"\n        });\n      }\n      \n      console.log(`Generated ${generatedLogos.length} logos successfully`);\n      \n      res.json({ logos: generatedLogos });\n      \n    } catch (error: any) {\n      console.error(\"Error generating logos:\", error);\n      \n      // Provide helpful error message\n      if (error.code === 'insufficient_quota') {\n        return res.status(503).json({ \n          error: \"Logo generation service temporarily unavailable. Please try again later.\"\n        });\n      }\n      \n      if (error.code === 'content_policy_violation') {\n        return res.status(400).json({ \n          error: \"Unable to generate logo with the provided description. Please try different preferences or description.\"\n        });\n      }\n      \n      res.status(500).json({ \n        error: \"Failed to generate logos. Please try again.\"\n      });\n    }\n  });\n\n  // Content generation endpoint\n  app.post(\"/api/content/generate\", async (req, res) => {\n    try {\n      const { contentGenerationRequestSchema } = await import(\"@shared/schema\");\n      \n      // Validate request body\n      const validationResult = contentGenerationRequestSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n      \n      const { businessName, businessDescription, siteType, pages, preferences, pageDirections } = validationResult.data;\n      \n      console.log(\"Generating content for pages:\", pages.map(p => p.name));\n      \n      const generatedContent = [];\n      \n      for (const page of pages) {\n        try {\n          // Find user direction for this page\n          const userDirection = pageDirections?.find(d => d.pageId === page.id)?.direction;\n          \n          const contentPrompt = buildContentPrompt(\n            businessName, \n            businessDescription, \n            siteType, \n            page, \n            preferences,\n            userDirection\n          );\n          \n          console.log(`Generating content for ${page.name} page...`);\n          \n          // Generate content with retry logic\n          let response: any = null;\n          let currentPrompt = contentPrompt;\n          \n          for (let attempt = 1; attempt <= 3; attempt++) {\n            try {\n              console.log(`Attempt ${attempt} for ${page.name} page content generation`);\n              \n              response = await openai.chat.completions.create({\n                model: \"gpt-4o\",\n                messages: [\n                  {\n                    role: \"system\",\n                    content: \"You are a professional web copywriter specializing in comprehensive, conversion-focused website content. Generate full, detailed website copy with multiple substantial paragraphs, compelling headlines, and complete sections. CRITICAL: Always include the business name prominently in the first paragraph and throughout the content. Never provide single sentences - always create comprehensive, ready-to-publish content. Return ONLY valid JSON: { \\\"content\\\": \\\"comprehensive multi-paragraph content with headlines and full sections\\\", \\\"suggestions\\\": [\\\"specific actionable tip 1\\\", \\\"specific actionable tip 2\\\", \\\"specific actionable tip 3\\\"] }\"\n                  },\n                  {\n                    role: \"user\",\n                    content: currentPrompt\n                  }\n                ],\n                response_format: { type: \"json_object\" },\n                max_tokens: 1400,\n                temperature: attempt > 1 ? 0.2 : 0.7\n              });\n              \n              console.log(`OpenAI usage for ${page.name}:`, response.usage);\n              console.log(`Finish reason for ${page.name}:`, response.choices[0].finish_reason);\n              break; // Success, exit retry loop\n              \n            } catch (error: any) {\n              console.error(`Attempt ${attempt} failed for ${page.name}:`, error.message);\n              if (attempt === 3) throw error; // Final attempt failed\n              \n              // Shorten prompt for retry\n              currentPrompt = `Create website copy for ${page.name} page. Business: ${businessName} - ${businessDescription}. Make it ${preferences.tone} and ${preferences.style === 'text-heavy' ? 'detailed' : 'concise'}.`;\n              await new Promise(resolve => setTimeout(resolve, 1000 * attempt)); // Exponential backoff\n            }\n          }\n          \n          const responseContent = response.choices[0].message.content;\n          console.log(`Raw OpenAI response for ${page.name} (first 300 chars):`, responseContent?.substring(0, 300));\n          \n          if (!responseContent || responseContent.trim() === '') {\n            throw new Error('OpenAI returned empty response');\n          }\n          \n          // Tolerant JSON parsing\n          let result;\n          try {\n            // Try direct JSON parse first\n            result = JSON.parse(responseContent);\n          } catch (parseError: any) {\n            console.log(`Direct JSON parse failed for ${page.name}, trying tolerant parsing...`);\n            \n            // Try to extract JSON from ```json fences or find JSON object\n            let cleanContent = responseContent.trim();\n            \n            // Remove markdown fences if present\n            cleanContent = cleanContent.replace(/^```json\\n?/gi, '').replace(/\\n?```$/g, '');\n            \n            // Try to find the first complete JSON object\n            const jsonMatch = cleanContent.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n              try {\n                result = JSON.parse(jsonMatch[0]);\n                console.log(`Tolerant JSON parsing succeeded for ${page.name}`);\n              } catch (secondParseError) {\n                console.log(`Tolerant parsing also failed for ${page.name}, using fallback`);\n                // Fallback: wrap the whole content\n                result = {\n                  content: cleanContent,\n                  suggestions: [\"Edit and enhance this content\", \"Add more specific details\", \"Include calls-to-action\"]\n                };\n              }\n            } else {\n              console.log(`No JSON structure found for ${page.name}, using fallback`);\n              // Fallback: wrap the whole content\n              result = {\n                content: cleanContent,\n                suggestions: [\"Edit and enhance this content\", \"Add more specific details\", \"Include calls-to-action\"]\n              };\n            }\n          }\n          \n          // Ensure result has required structure\n          if (!result.content) {\n            result.content = `Welcome to our ${page.name.toLowerCase()} page. ${businessDescription} We're committed to providing excellent service and value to our customers.`;\n          }\n          if (!result.suggestions || !Array.isArray(result.suggestions)) {\n            result.suggestions = [\"Add your unique value proposition\", \"Include customer testimonials\", \"Add clear call-to-action buttons\"];\n          }\n          \n          generatedContent.push({\n            pageId: page.id,\n            pageName: page.name,\n            content: result.content,\n            suggestions: result.suggestions || []\n          });\n          \n          console.log(`Content generated for ${page.name} page`);\n          \n        } catch (error: any) {\n          console.error(`Error generating content for ${page.name}:`, error);\n          \n          // Add fallback content for this page\n          generatedContent.push({\n            pageId: page.id,\n            pageName: page.name,\n            content: `Welcome to our ${page.name.toLowerCase()} page. ${businessDescription} We're committed to providing excellent service and value to our customers.`,\n            suggestions: [\"Add your unique value proposition\", \"Include customer testimonials\", \"Add clear call-to-action buttons\"]\n          });\n        }\n      }\n      \n      console.log(`Generated content for ${generatedContent.length} pages`);\n      \n      res.json({ content: generatedContent });\n      \n    } catch (error) {\n      console.error(\"Content generation error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate content\", \n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Individual page regeneration route\n  app.post('/api/content/regenerate', async (req, res) => {\n    try {\n      const validatedData = pageRegenerationRequestSchema.parse(req.body);\n      const { businessName, businessDescription, siteType, page, preferences, pageDirection } = validatedData;\n      \n      console.log(`Regenerating content for ${page.name} page...`);\n      \n      // Build enhanced prompt with custom direction\n      let contentPrompt = buildContentPrompt(businessName, businessDescription, siteType, page, preferences);\n      \n      if (pageDirection) {\n        contentPrompt += `\\n\\nSPECIAL INSTRUCTIONS: ${pageDirection}`;\n      }\n      \n      console.log(`Regenerating content for ${page.name} page...`);\n      \n      // Generate content for the specific page with retry logic\n      let response: any = null;\n      let currentPrompt = contentPrompt;\n      let result;\n      \n      try {\n        for (let attempt = 1; attempt <= 3; attempt++) {\n          try {\n            console.log(`Regeneration attempt ${attempt} for ${page.name} page`);\n            \n            response = await openai.chat.completions.create({\n              model: \"gpt-4o\",\n              messages: [\n                {\n                  role: \"system\",\n                  content: \"You are a professional web copywriter specializing in comprehensive, conversion-focused website content. Generate full, detailed website copy with multiple substantial paragraphs, compelling headlines, and complete sections. CRITICAL: Always include the business name prominently in the first paragraph and throughout the content. Never provide single sentences - always create comprehensive, ready-to-publish content. Return ONLY valid JSON: { \\\"content\\\": \\\"comprehensive multi-paragraph content with headlines and full sections\\\", \\\"suggestions\\\": [\\\"specific actionable tip 1\\\", \\\"specific actionable tip 2\\\", \\\"specific actionable tip 3\\\"] }\"\n                },\n                {\n                  role: \"user\",\n                  content: currentPrompt\n                }\n              ],\n              response_format: { type: \"json_object\" },\n              max_tokens: 1400,\n              temperature: attempt > 1 ? 0.2 : 0.7\n            });\n            \n            console.log(`OpenAI usage for ${page.name} regeneration:`, response.usage);\n            console.log(`Finish reason for ${page.name} regeneration:`, response.choices[0].finish_reason);\n            break; // Success, exit retry loop\n            \n          } catch (error: any) {\n            console.error(`Regeneration attempt ${attempt} failed for ${page.name}:`, error.message);\n            if (attempt === 3) throw error; // Final attempt failed\n            \n            // Shorten prompt for retry\n            currentPrompt = `Create website copy for ${page.name} page. Business: ${businessName} - ${businessDescription}. Make it ${preferences.tone} and ${preferences.style === 'text-heavy' ? 'detailed' : 'concise'}.`;\n            await new Promise(resolve => setTimeout(resolve, 1000 * attempt)); // Exponential backoff\n          }\n        }\n        \n        const responseContent = response.choices[0].message.content;\n        console.log(`Raw OpenAI regeneration response for ${page.name} (first 300 chars):`, responseContent?.substring(0, 300));\n        \n        if (!responseContent || responseContent.trim() === '') {\n          throw new Error('OpenAI returned empty response during regeneration');\n        }\n        \n        // Tolerant JSON parsing (same as main route)\n        try {\n          result = JSON.parse(responseContent);\n        } catch (parseError: any) {\n          console.log(`Direct JSON parse failed for ${page.name} regeneration, trying tolerant parsing...`);\n          \n          let cleanContent = responseContent.trim();\n          cleanContent = cleanContent.replace(/^```json\\n?/gi, '').replace(/\\n?```$/g, '');\n          \n          const jsonMatch = cleanContent.match(/\\{[\\s\\S]*\\}/);\n          if (jsonMatch) {\n            try {\n              result = JSON.parse(jsonMatch[0]);\n              console.log(`Tolerant JSON parsing succeeded for ${page.name} regeneration`);\n            } catch (secondParseError) {\n              console.log(`Tolerant parsing also failed for ${page.name} regeneration, using fallback`);\n              result = {\n                content: cleanContent,\n                suggestions: [\"Edit and enhance this content\", \"Add more specific details\", \"Include calls-to-action\"]\n              };\n            }\n          } else {\n            console.log(`No JSON structure found for ${page.name} regeneration, using fallback`);\n            result = {\n              content: cleanContent,\n              suggestions: [\"Edit and enhance this content\", \"Add more specific details\", \"Include calls-to-action\"]\n            };\n          }\n        }\n        \n      } catch (error: any) {\n        console.error(`All regeneration attempts failed for ${page.name}:`, error.message);\n        // Instead of throwing, use fallback content (graceful degradation)\n        result = {\n          content: `Welcome to our ${page.name.toLowerCase()} page. ${businessDescription} We're committed to providing excellent service and value to our customers.`,\n          suggestions: [\"Add your unique value proposition\", \"Include customer testimonials\", \"Add clear call-to-action buttons\"]\n        };\n      }\n      \n      // Ensure result has required structure\n      if (!result.content) {\n        result.content = `Welcome to our ${page.name.toLowerCase()} page. ${businessDescription} We're committed to providing excellent service and value to our customers.`;\n      }\n      if (!result.suggestions || !Array.isArray(result.suggestions)) {\n        result.suggestions = [\"Add your unique value proposition\", \"Include customer testimonials\", \"Add clear call-to-action buttons\"];\n      }\n      \n      const generatedContent = {\n        pageId: page.id,\n        pageName: page.name,\n        content: result.content,\n        suggestions: result.suggestions\n      };\n      \n      console.log(`Content regenerated for ${page.name} page`);\n      \n      res.json({ content: generatedContent });\n      \n    } catch (error: any) {\n      console.error(\"Page regeneration error:\", error);\n      res.status(500).json({ \n        error: \"Failed to regenerate content\", \n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  function buildContentPrompt(\n    businessName: string, \n    businessDescription: string, \n    siteType: string, \n    page: { name: string; path: string }, \n    preferences: { style: string; useVideo: boolean; tone: string },\n    userDirection?: string\n  ): string {\n    const businessInfo = `Business: \"${businessName}\" - ${businessDescription}`;\n    const siteInfo = `Website type: ${siteType}`;\n    const pageInfo = `Page: ${page.name} (${page.path})`;\n    \n    const styleGuidance = {\n      'text-heavy': 'Generate 4-6 substantial paragraphs with detailed explanations, comprehensive information, and thorough coverage of the topic. Include multiple sections with descriptive subheadings.',\n      'visual-focused': 'Generate 2-3 concise but compelling paragraphs. Include specific suggestions for images, graphics, charts, or visual elements with detailed descriptions of what should be shown.',\n      'balanced': 'Generate 3-4 well-developed paragraphs that balance informative text with clear suggestions for supporting visuals and multimedia elements.'\n    }[preferences.style];\n    \n    const toneGuidance = {\n      'professional': 'Use professional, authoritative language with industry expertise and credibility',\n      'casual': 'Use friendly, conversational language that feels like talking to a trusted friend',\n      'friendly': 'Use warm, approachable language that makes visitors feel welcome and valued',\n      'authoritative': 'Use confident, expert language that establishes leadership and trustworthiness'\n    }[preferences.tone];\n    \n    const videoNote = preferences.useVideo ? \n      '\\n\\nVIDEO INTEGRATION: The client wants to create their own video content. Suggest 2-3 specific places where video would be most effective and describe what type of video content would work best (testimonials, product demos, behind-the-scenes, etc.).' : \n      '';\n    \n    const pageSpecificGuidance = getPageSpecificGuidance(page.name, siteType);\n    \n    const userDirectionNote = userDirection ? \n      `\\n\\nSPECIAL USER DIRECTION: ${userDirection}\nIMPORTANT: Follow this specific direction closely and incorporate it prominently into the content.` : '';\n    \n    return `Create comprehensive website copy for a ${page.name} page.\n\nBUSINESS CONTEXT:\n${businessInfo}\nWebsite Type: ${siteType}\n\nCRITICAL REQUIREMENTS:\n- MUST include the business name \"${businessName}\" prominently in the first paragraph and throughout the content\n- MUST reference specific services/products mentioned in business description\n- MUST create multiple substantial paragraphs (minimum 3-4 paragraphs)\n- MUST include compelling headlines and clear section breaks${userDirectionNote}\n\nCONTENT REQUIREMENTS:\n${pageSpecificGuidance}\n\nSTYLE & TONE:\n- ${styleGuidance}\n- ${toneGuidance}\n- Make it engaging, conversion-focused, and appropriate for the target audience\n- Include compelling headlines and clear calls-to-action${videoNote}\n\nGenerate complete, ready-to-use web copy with proper structure, headings, and full paragraphs.`;\n  }\n\n  function getPageSpecificGuidance(pageName: string, siteType: string): string {\n    const guidance: { [key: string]: string } = {\n      'Home': `Create a compelling homepage that includes: a powerful headline, value proposition, key benefits/services, social proof elements, and strong call-to-action. This should immediately communicate what the business does and why visitors should care.`,\n      'About': `Write an engaging about page that tells the company story, highlights expertise and experience, introduces team members or founder, explains the company mission/values, and builds trust and credibility.`,\n      'Services': `Detail the main services offered, explain the benefits of each service, include pricing information if appropriate, address common customer pain points, and provide clear next steps for getting started.`,\n      'Products': `Showcase key products with detailed descriptions, highlight unique features and benefits, include technical specifications if relevant, mention pricing and availability, and provide easy purchasing options.`,\n      'Contact': `Provide multiple ways to get in touch, include business hours and location details, set expectations for response times, add a compelling reason to contact the business, and make the process as easy as possible.`,\n      'Blog': `Create an introduction to the blog section, explain what type of content visitors can expect, highlight recent or popular posts, and encourage subscription or regular visits.`,\n      'Portfolio': `Showcase the best work examples, explain the process and approach, highlight results and client satisfaction, demonstrate expertise across different projects, and encourage potential clients to start a conversation.`,\n      'FAQ': `Address the most common customer questions, provide detailed helpful answers, anticipate concerns or objections, organize information logically, and guide visitors toward taking action.`,\n      'Testimonials': `Present customer success stories and reviews, highlight specific results and benefits, build credibility and trust, show diverse client experiences, and encourage new customers to get started.`,\n      'Pricing': `Clearly explain pricing options and packages, highlight value and benefits for each tier, address common concerns about cost, provide easy ways to get started, and include testimonials or guarantees if applicable.`\n    };\n    \n    return guidance[pageName] || `Create compelling content for the ${pageName} page that aligns with the overall ${siteType} website goals and helps convert visitors into customers.`;\n  }\n\n  // Feature Selection endpoints\n  \n  // Create new feature selection\n  app.post(\"/api/feature-selections\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = insertFeatureSelectionSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n      \n      const featureSelection = await storage.createFeatureSelection(validationResult.data);\n      \n      res.json(featureSelection);\n      \n    } catch (error: any) {\n      console.error(\"Error creating feature selection:\", error);\n      res.status(500).json({ \n        error: \"Failed to save feature selection\", \n        message: error.message \n      });\n    }\n  });\n  \n  // Get feature selection by ID\n  app.get(\"/api/feature-selections/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const featureSelection = await storage.getFeatureSelection(id);\n      \n      if (!featureSelection) {\n        return res.status(404).json({ error: \"Feature selection not found\" });\n      }\n      \n      res.json(featureSelection);\n      \n    } catch (error: any) {\n      console.error(\"Error fetching feature selection:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch feature selection\", \n        message: error.message \n      });\n    }\n  });\n  \n  // Get feature selection by user ID\n  app.get(\"/api/feature-selections/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const featureSelection = await storage.getFeatureSelectionByUserId(userId);\n      \n      if (!featureSelection) {\n        return res.status(404).json({ error: \"No feature selection found for this user\" });\n      }\n      \n      res.json(featureSelection);\n      \n    } catch (error: any) {\n      console.error(\"Error fetching feature selection by user:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch feature selection\", \n        message: error.message \n      });\n    }\n  });\n  \n  // Update existing feature selection\n  app.put(\"/api/feature-selections/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body\n      const validationResult = featureSelectionSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n      \n      const updatedFeatureSelection = await storage.updateFeatureSelection(id, validationResult.data);\n      \n      if (!updatedFeatureSelection) {\n        return res.status(404).json({ error: \"Feature selection not found\" });\n      }\n      \n      res.json(updatedFeatureSelection);\n      \n    } catch (error: any) {\n      console.error(\"Error updating feature selection:\", error);\n      res.status(500).json({ \n        error: \"Failed to update feature selection\", \n        message: error.message \n      });\n    }\n  });\n  \n  // List all feature selections (admin use)\n  app.get(\"/api/feature-selections\", async (req, res) => {\n    try {\n      const featureSelections = await storage.listFeatureSelections();\n      res.json(featureSelections);\n      \n    } catch (error: any) {\n      console.error(\"Error listing feature selections:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch feature selections\", \n        message: error.message \n      });\n    }\n  });\n\n  // Project submission management endpoints\n  \n  // Create new project submission (onboarding progress)\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = insertProjectSubmissionSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n      \n      const projectSubmission = await storage.createProjectSubmission(validationResult.data);\n      \n      res.json(projectSubmission);\n      \n    } catch (error: any) {\n      console.error(\"Error creating project submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to save project submission\", \n        message: error.message \n      });\n    }\n  });\n  \n  // Update existing project submission (onboarding progress)\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body\n      const validationResult = insertProjectSubmissionSchema.partial().safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n      \n      const updatedProject = await storage.updateProjectSubmission(id, validationResult.data);\n      \n      if (!updatedProject) {\n        return res.status(404).json({ error: \"Project submission not found\" });\n      }\n      \n      res.json(updatedProject);\n      \n    } catch (error: any) {\n      console.error(\"Error updating project submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to update project submission\", \n        message: error.message \n      });\n    }\n  });\n  \n  // Get project submission by ID\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.getProjectSubmission(id);\n      \n      if (!project) {\n        return res.status(404).json({ error: \"Project submission not found\" });\n      }\n      \n      res.json(project);\n      \n    } catch (error: any) {\n      console.error(\"Error fetching project submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch project submission\", \n        message: error.message \n      });\n    }\n  });\n  \n  // Get project submission by user ID\n  app.get(\"/api/projects/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const project = await storage.getProjectSubmissionByUserId(userId);\n      \n      if (!project) {\n        return res.status(404).json({ error: \"No project submission found for this user\" });\n      }\n      \n      res.json(project);\n      \n    } catch (error: any) {\n      console.error(\"Error fetching project submission by user:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch project submission\", \n        message: error.message \n      });\n    }\n  });\n  \n  // List all project submissions (admin use)\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.listProjectSubmissions();\n      res.json(projects);\n      \n    } catch (error: any) {\n      console.error(\"Error listing project submissions:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch project submissions\", \n        message: error.message \n      });\n    }\n  });\n\n  // Project submission endpoint (final submission)\n  app.post(\"/api/project/submit\", async (req, res) => {\n    try {\n      // Validate the submission data (excluding submittedAt since storage will add it)\n      const { submittedAt, ...submissionData } = projectSubmissionSchema.parse(req.body);\n\n      // Store the submission using the storage layer\n      const storedSubmission = await storage.createProjectSubmission(submissionData);\n\n      console.log('Project submission received and stored:', {\n        id: storedSubmission.id,\n        businessName: storedSubmission.businessName,\n        submittedAt: storedSubmission.submittedAt,\n        pages: storedSubmission.pages.length,\n        hasContent: storedSubmission.generatedContent.length > 0,\n        hasLogo: !!storedSubmission.selectedLogo || !!storedSubmission.logoFile\n      });\n\n      // Here you would typically:\n      // 1. Send notification emails\n      // 2. Create project in project management system\n      // 3. Trigger workflows\n\n      res.json({\n        success: true,\n        projectId: storedSubmission.id,\n        message: \"Creative brief submitted successfully! Our team will review it and reach out within 24 hours.\",\n        submittedAt: storedSubmission.submittedAt\n      });\n\n    } catch (error: any) {\n      console.error('Project submission error:', error);\n      \n      if (error.name === 'ZodError') {\n        return res.status(400).json({\n          success: false,\n          error: \"Invalid submission data\",\n          details: error.errors\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: \"Failed to submit project. Please try again.\"\n      });\n    }\n  });\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":37607},"server/storage.ts":{"content":"import { type User, type InsertUser, type ProjectSubmission, type FeatureSelectionRow, type InsertFeatureSelection, type InsertProjectSubmission, type ProjectSubmissionRow, users, projectSubmissions, featureSelections } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Project submission methods\n  createProjectSubmission(submission: InsertProjectSubmission): Promise<ProjectSubmissionRow>;\n  getProjectSubmission(id: string): Promise<ProjectSubmissionRow | undefined>;\n  getProjectSubmissionByUserId(userId: string): Promise<ProjectSubmissionRow | undefined>;\n  updateProjectSubmission(id: string, submission: Partial<InsertProjectSubmission>): Promise<ProjectSubmissionRow | undefined>;\n  listProjectSubmissions(): Promise<ProjectSubmissionRow[]>;\n\n  // Feature selection methods\n  createFeatureSelection(selection: InsertFeatureSelection): Promise<FeatureSelectionRow>;\n  getFeatureSelection(id: string): Promise<FeatureSelectionRow | undefined>;\n  getFeatureSelectionByUserId(userId: string): Promise<FeatureSelectionRow | undefined>;\n  updateFeatureSelection(id: string, selection: Partial<InsertFeatureSelection>): Promise<FeatureSelectionRow | undefined>;\n  listFeatureSelections(): Promise<FeatureSelectionRow[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Project submission methods\n  async createProjectSubmission(submission: InsertProjectSubmission): Promise<ProjectSubmissionRow> {\n    const result = await db.insert(projectSubmissions).values(submission as any).returning();\n    return result[0];\n  }\n\n  async getProjectSubmission(id: string): Promise<ProjectSubmissionRow | undefined> {\n    const result = await db.select().from(projectSubmissions).where(eq(projectSubmissions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProjectSubmissionByUserId(userId: string): Promise<ProjectSubmissionRow | undefined> {\n    const result = await db.select().from(projectSubmissions).where(eq(projectSubmissions.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async updateProjectSubmission(id: string, submission: Partial<InsertProjectSubmission>): Promise<ProjectSubmissionRow | undefined> {\n    const result = await db.update(projectSubmissions)\n      .set(submission as any)\n      .where(eq(projectSubmissions.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async listProjectSubmissions(): Promise<ProjectSubmissionRow[]> {\n    return await db.select().from(projectSubmissions);\n  }\n\n  // Feature selection methods\n  async createFeatureSelection(selection: InsertFeatureSelection): Promise<FeatureSelectionRow> {\n    const result = await db.insert(featureSelections).values(selection).returning();\n    return result[0];\n  }\n\n  async getFeatureSelection(id: string): Promise<FeatureSelectionRow | undefined> {\n    const result = await db.select().from(featureSelections).where(eq(featureSelections.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getFeatureSelectionByUserId(userId: string): Promise<FeatureSelectionRow | undefined> {\n    const result = await db.select().from(featureSelections).where(eq(featureSelections.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async updateFeatureSelection(id: string, updates: Partial<InsertFeatureSelection>): Promise<FeatureSelectionRow | undefined> {\n    const result = await db.update(featureSelections)\n      .set(updates)\n      .where(eq(featureSelections.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async listFeatureSelections(): Promise<FeatureSelectionRow[]> {\n    return await db.select().from(featureSelections);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4457},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, json, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Logo Generation Schemas\nexport const logoPreferencesSchema = z.object({\n  types: z.array(z.enum([\n    'wordmark', \n    'lettermark', \n    'pictorial', \n    'combination', \n    'emblem', \n    'abstract', \n    'mascot'\n  ])).min(1, \"Please select at least one logo type\"),\n  styles: z.array(z.enum([\n    'modern',\n    'classic', \n    'minimalist',\n    'vintage',\n    'playful',\n    'elegant',\n    'bold',\n    'organic',\n    'geometric',\n    'hand-drawn',\n    'tech',\n    'luxury'\n  ])).min(1, \"Please select at least one style\"),\n  colors: z.string().optional(),\n  inspirations: z.array(z.string()).optional(),\n  useReference: z.boolean().optional()\n});\n\nexport const logoGenerationRequestSchema = z.object({\n  businessName: z.string().optional(),\n  description: z.string().min(1, \"Business description is required\"),\n  preferences: logoPreferencesSchema,\n  referenceImageBase64: z.string().optional()\n});\n\nexport const generatedLogoSchema = z.object({\n  id: z.string(),\n  dataUrl: z.string(),\n  prompt: z.string()\n});\n\nexport const logoSelectionSchema = z.object({\n  selectedId: z.string(),\n  decision: z.enum(['final', 'direction']),\n  selectedLogo: generatedLogoSchema\n});\n\nexport type LogoPreferences = z.infer<typeof logoPreferencesSchema>;\nexport type LogoGenerationRequest = z.infer<typeof logoGenerationRequestSchema>;\nexport type GeneratedLogo = z.infer<typeof generatedLogoSchema>;\nexport type LogoSelection = z.infer<typeof logoSelectionSchema>;\n\n// Content Generation Schemas\nexport const contentPreferencesSchema = z.object({\n  style: z.enum(['text-heavy', 'visual-focused', 'balanced']),\n  useVideo: z.boolean(),\n  tone: z.enum(['professional', 'casual', 'friendly', 'authoritative'])\n});\n\nexport const contentGenerationRequestSchema = z.object({\n  businessName: z.string(),\n  businessDescription: z.string(),\n  siteType: z.string(),\n  pages: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    path: z.string()\n  })),\n  preferences: contentPreferencesSchema,\n  pageDirections: z.array(z.object({\n    pageId: z.string(),\n    direction: z.string()\n  })).optional() // Array of page directions from user\n});\n\nexport const generatedContentSchema = z.object({\n  pageId: z.string(),\n  pageName: z.string(),\n  content: z.string(),\n  editedContent: z.string().optional(), // User's edited version\n  pageDirection: z.string().optional(), // User's specific direction for this page\n  suggestions: z.array(z.string()).optional(),\n  hasEdits: z.boolean().optional() // Flag to track if content was edited\n});\n\nexport const pageRegenerationRequestSchema = z.object({\n  businessName: z.string(),\n  businessDescription: z.string(),\n  siteType: z.string(),\n  page: z.object({\n    id: z.string(),\n    name: z.string(),\n    path: z.string()\n  }),\n  preferences: contentPreferencesSchema,\n  pageDirection: z.string().optional() // Custom direction for this specific page\n});\n\nexport type ContentPreferences = z.infer<typeof contentPreferencesSchema>;\nexport type ContentGenerationRequest = z.infer<typeof contentGenerationRequestSchema>;\nexport type GeneratedContent = z.infer<typeof generatedContentSchema>;\nexport type PageRegenerationRequest = z.infer<typeof pageRegenerationRequestSchema>;\n\n// Images & Media Schemas\nexport const imageRequirementsSchema = z.object({\n  logoNeeds: z.enum(['have-logo', 'need-logo', 'need-variations']),\n  logoDescription: z.string().optional(),\n  specificImages: z.array(z.string()).optional(), // List of specific images needed\n  teamPhotos: z.boolean().optional(),\n  productPhotos: z.boolean().optional(),\n  facilityPhotos: z.boolean().optional(),\n  preferredPhotoStyle: z.enum([\n    'professional-corporate',\n    'lifestyle-candid', \n    'modern-minimalist',\n    'warm-friendly',\n    'high-energy',\n    'artistic-creative'\n  ]).optional(),\n  stockPhotoPreference: z.enum(['free-library', 'premium-paid', 'mixed']).optional(),\n  additionalNotes: z.string().optional()\n});\n\nexport const uploadedImageSchema = z.object({\n  id: z.string(),\n  filename: z.string(),\n  fileType: z.string(),\n  fileSize: z.number(),\n  category: z.enum(['logo', 'team', 'product', 'facility', 'other']).optional(),\n  description: z.string().optional()\n});\n\nexport type ImageRequirements = z.infer<typeof imageRequirementsSchema>;\nexport type UploadedImage = z.infer<typeof uploadedImageSchema>;\n\n// Integration Schemas (CRM and Marketing Automation)\nexport const integrationSchema = z.object({\n  // CRM Integration\n  selectedCrms: z.array(z.enum([\n    'salesforce',\n    'hubspot', \n    'zoho-crm',\n    'pipedrive',\n    'microsoft-dynamics-365',\n    'freshsales',\n    'ontraport',\n    'nimble',\n    'nutshell',\n    'membrain',\n    'sugarcrm',\n    'custom'\n  ])).optional().default([]),\n  customCrmNames: z.array(z.string()).optional(),\n  \n  // Marketing Automation Integration\n  selectedMarketingAutomation: z.array(z.enum([\n    'klaviyo',\n    'hubspot',\n    'activecampaign',\n    'mailchimp',\n    'brevo',\n    'marketo-engage',\n    'pardot',\n    'custom'\n  ])).optional().default([]),\n  customMarketingAutomationNames: z.array(z.string()).optional(),\n  \n  // Payment Gateway Integration\n  selectedPaymentGateways: z.array(z.enum([\n    'stripe',\n    'paypal',\n    'square',\n    'authorize-net',\n    'amazon-pay',\n    'apple-pay',\n    'bank-transfer',\n    'custom'\n  ])).optional().default([]),\n  customPaymentGatewayNames: z.array(z.string()).optional(),\n  \n  // API Integrations\n  apiIntegrations: z.string().optional(),\n  \n  // Automation Integration\n  selectedAutomationPlatforms: z.array(z.enum([\n    'zapier',\n    'make'\n  ])).optional().default([]),\n  \n  // Engagement & Interactivity Integration\n  selectedEngagementFeatures: z.array(z.enum([\n    'animations-motion-effects',\n    'popups-modals',\n    'live-chat-integration',\n    'polls-surveys',\n    'appointment-booking-scheduling',\n    'event-calendar-ticketing',\n    'social-media-feeds-sharing'\n  ])).optional().default([]),\n  \n  // Advanced Features Integration\n  selectedAdvancedFeatures: z.array(z.enum([\n    'multilingual-translation-support',\n    'seo-tools-meta-sitemap-schema',\n    'analytics-integration-ga4-hotjar',\n    'security-features-ssl-captcha-2fa',\n    'custom-forms-workflows',\n    'chatbots-ai-powered-scripted'\n  ])).optional().default([]),\n\n  // E-Commerce Integration\n  selectedECommerceFeatures: z.array(z.enum([\n    'online-store-shopify-woocommerce',\n    'product-catalog',\n    'shopping-cart-checkout',\n    'digital-downloads',\n    'inventory-management',\n    'subscription-products',\n    'multi-currency-support',\n    'discount-codes-coupons'\n  ])).optional().default([])\n}).superRefine((data, ctx) => {\n  // Validate that at least one integration is selected\n  const hasAnyCrm = data.selectedCrms && data.selectedCrms.length > 0;\n  const hasAnyMarketing = data.selectedMarketingAutomation && data.selectedMarketingAutomation.length > 0;\n  const hasAnyPayment = data.selectedPaymentGateways && data.selectedPaymentGateways.length > 0;\n  const hasApiIntegrations = data.apiIntegrations && data.apiIntegrations.trim().length > 0;\n  const hasAnyAutomation = data.selectedAutomationPlatforms && data.selectedAutomationPlatforms.length > 0;\n  const hasAnyEngagement = data.selectedEngagementFeatures && data.selectedEngagementFeatures.length > 0;\n  const hasAnyAdvanced = data.selectedAdvancedFeatures && data.selectedAdvancedFeatures.length > 0;\n  const hasAnyECommerce = data.selectedECommerceFeatures && data.selectedECommerceFeatures.length > 0;\n  \n  if (!hasAnyCrm && !hasAnyMarketing && !hasAnyPayment && !hasApiIntegrations && !hasAnyAutomation && !hasAnyEngagement && !hasAnyAdvanced && !hasAnyECommerce) {\n    ctx.addIssue({\n      code: 'custom',\n      message: 'Please select at least one integration type',\n      path: ['selectedCrms']\n    });\n  }\n  \n  // Validate custom CRM names\n  if (data.selectedCrms?.includes('custom') && (!data.customCrmNames || data.customCrmNames.length === 0 || data.customCrmNames.every(name => !name?.trim()))) {\n    ctx.addIssue({\n      code: 'custom',\n      message: 'At least one custom CRM name is required',\n      path: ['customCrmNames']\n    });\n  }\n  \n  // Validate custom Marketing Automation names\n  if (data.selectedMarketingAutomation?.includes('custom') && (!data.customMarketingAutomationNames || data.customMarketingAutomationNames.length === 0 || data.customMarketingAutomationNames.every(name => !name?.trim()))) {\n    ctx.addIssue({\n      code: 'custom',\n      message: 'At least one custom Marketing Automation name is required',\n      path: ['customMarketingAutomationNames']\n    });\n  }\n  \n  // Validate custom Payment Gateway names\n  if (data.selectedPaymentGateways?.includes('custom') && (!data.customPaymentGatewayNames || data.customPaymentGatewayNames.length === 0 || data.customPaymentGatewayNames.every(name => !name?.trim()))) {\n    ctx.addIssue({\n      code: 'custom',\n      message: 'At least one custom Payment Gateway name is required',\n      path: ['customPaymentGatewayNames']\n    });\n  }\n});\n\n// Legacy alias for backward compatibility\nexport const crmIntegrationSchema = integrationSchema;\nexport type CrmIntegration = z.infer<typeof integrationSchema>;\nexport type IntegrationData = z.infer<typeof integrationSchema>;\n\n// Role Schema for custom roles with descriptions\nexport const roleSchema = z.object({\n  name: z.string().min(1, \"Role name is required\"),\n  description: z.string().optional()\n});\n\n// User Accounts & Membership Schema\nexport const userAccountsMembershipSchema = z.object({\n  registrationLogin: z.boolean().default(false),\n  userDashboardNeeded: z.boolean().default(false),\n  userDashboardFeatures: z.string().optional(),\n  predefinedRoles: z.array(z.enum(['admin', 'member', 'guest'])).optional().default([]),\n  customRoles: z.array(roleSchema).optional().default([]),\n  membershipSubscriptionSystem: z.boolean().default(false),\n  membershipDetails: z.string().optional()\n}).superRefine((data, ctx) => {\n  // If membership/subscription system is enabled, membership details are required\n  if (data.membershipSubscriptionSystem && (!data.membershipDetails || data.membershipDetails.trim().length === 0)) {\n    ctx.addIssue({\n      code: 'custom',\n      message: 'Membership details are required when Membership/Subscription System is enabled',\n      path: ['membershipDetails']\n    });\n  }\n  \n  // If user dashboard is needed, dashboard features are required\n  if (data.userDashboardNeeded && (!data.userDashboardFeatures || data.userDashboardFeatures.trim().length === 0)) {\n    ctx.addIssue({\n      code: 'custom',\n      message: 'Dashboard features are required when User Dashboard is needed',\n      path: ['userDashboardFeatures']\n    });\n  }\n  \n  // Validate custom role names are unique\n  if (data.customRoles && data.customRoles.length > 0) {\n    const roleNames = data.customRoles.map(role => role.name.toLowerCase());\n    const duplicates = roleNames.filter((name, index) => roleNames.indexOf(name) !== index);\n    if (duplicates.length > 0) {\n      ctx.addIssue({\n        code: 'custom',\n        message: 'Custom role names must be unique',\n        path: ['customRoles']\n      });\n    }\n  }\n});\n\nexport type Role = z.infer<typeof roleSchema>;\nexport type UserAccountsMembership = z.infer<typeof userAccountsMembershipSchema>;\n\n// Project Submission Schema\nexport const projectSubmissionSchema = z.object({\n  fullName: z.string().optional(),\n  email: z.string().email().optional(),\n  contactNumber: z.string().optional(),\n  businessName: z.string(),\n  businessDescription: z.string(),\n  selectedSiteType: z.string(),\n  pages: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    path: z.string(),\n    required: z.boolean().optional()\n  })),\n  logoDecision: z.enum(['final', 'direction']).optional(),\n  logoFile: z.string().optional(), // Base64 or file reference\n  selectedLogo: generatedLogoSchema.optional(),\n  contentPreferences: contentPreferencesSchema,\n  generatedContent: z.array(generatedContentSchema),\n  crmIntegration: crmIntegrationSchema.optional(),\n  userAccountsMembership: userAccountsMembershipSchema.optional(),\n  imageRequirements: imageRequirementsSchema,\n  designPreferences: z.object({\n    selectedStyle: z.string(),\n    preferredFont: z.string().optional(),\n    primaryColor: z.string().optional(),\n    secondaryColor: z.string().optional(),\n    accentColor: z.string().optional(),\n    backgroundColor: z.string().optional(),\n    textColor: z.string().optional(),\n    inspirationLinks: z.array(z.string()),\n    additionalNotes: z.string()\n  }),\n  submittedAt: z.string().optional()\n});\n\nexport type ProjectSubmission = z.infer<typeof projectSubmissionSchema>;\n\n// Feature Selection Schemas\n// Project Submissions Table\nexport const projectSubmissions = pgTable(\"project_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  fullName: text(\"full_name\"),\n  email: text(\"email\"),\n  contactNumber: text(\"contact_number\"),\n  businessName: text(\"business_name\").notNull(),\n  businessDescription: text(\"business_description\").notNull(),\n  selectedSiteType: text(\"selected_site_type\").notNull(),\n  pages: json(\"pages\").$type<Array<{id: string; name: string; path: string; required?: boolean}>>().notNull(),\n  logoDecision: text(\"logo_decision\"),\n  logoFile: text(\"logo_file\"), // Base64 or file reference\n  selectedLogo: json(\"selected_logo\").$type<GeneratedLogo>(),\n  contentPreferences: json(\"content_preferences\").$type<ContentPreferences>().notNull(),\n  generatedContent: json(\"generated_content\").$type<GeneratedContent[]>().notNull(),\n  crmIntegration: json(\"crm_integration\").$type<CrmIntegration>(),\n  userAccountsMembership: json(\"user_accounts_membership\").$type<UserAccountsMembership>(),\n  imageRequirements: json(\"image_requirements\").$type<ImageRequirements>().notNull(),\n  designPreferences: json(\"design_preferences\").$type<{\n    selectedStyle: string;\n    preferredFont?: string;\n    primaryColor?: string;\n    secondaryColor?: string;\n    accentColor?: string;\n    backgroundColor?: string;\n    textColor?: string;\n    inspirationLinks: string[];\n    additionalNotes: string;\n  }>().notNull(),\n  submittedAt: timestamp(\"submitted_at\").defaultNow()\n});\n\nexport const featureSelections = pgTable(\"feature_selections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  projectId: varchar(\"project_id\").references(() => projectSubmissions.id),\n  selectedFeatures: json(\"selected_features\").$type<string[]>().notNull(),\n  priority: json(\"priority\").$type<{ [key: string]: 'low' | 'medium' | 'high' }>(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const featureSelectionSchema = z.object({\n  selectedFeatures: z.array(z.string()),\n  priority: z.record(z.enum(['low', 'medium', 'high'])).optional(),\n  notes: z.string().optional()\n});\n\nexport const insertProjectSubmissionSchema = createInsertSchema(projectSubmissions).omit({\n  id: true,\n  submittedAt: true\n});\n\nexport const insertFeatureSelectionSchema = createInsertSchema(featureSelections, {\n  selectedFeatures: z.array(z.string()),\n  priority: z.record(z.enum(['low', 'medium', 'high'])).optional()\n}).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\n// Feature categories and features definition\nexport const websiteFeatures = {\n  \"Core Website Features\": [\n    \"Contact Form\",\n    \"Contact Form with Conditional Logic\", \n    \"Newsletter Signup\",\n    \"Blog / News Section\",\n    \"FAQ Page / Accordion Sections\",\n    \"Search Functionality\"\n  ],\n  \"User Accounts & Membership\": [\n    \"Registration & Login\",\n    \"User Profiles\",\n    \"Role-Based Access (admin, member, guest)\",\n    \"Membership / Subscription System\",\n    \"Customer Dashboards\"\n  ],\n  \"E-Commerce\": [\n    \"Online Store (Shopify / WooCommerce)\",\n    \"Product Catalog\",\n    \"Shopping Cart & Checkout\",\n    \"Digital Downloads\",\n    \"Inventory Management\",\n    \"Subscription Products\", \n    \"Multi-Currency Support\",\n    \"Discount Codes / Coupons\"\n  ],\n  \"Engagement & Interactivity\": [\n    \"Animations & Motion Effects\",\n    \"Pop-ups / Modals (newsletter, promos)\",\n    \"Live Chat Integration (Intercom, Drift, etc.)\",\n    \"Polls & Surveys\",\n    \"Appointment Booking / Scheduling\",\n    \"Event Calendar & Ticketing\",\n    \"Social Media Feeds / Sharing\"\n  ],\n  \"Integrations\": [\n    \"CRM Integration (HubSpot, Salesforce, Zoho, etc.)\",\n    \"Marketing Automation (Klaviyo, Mailchimp, ActiveCampaign)\",\n    \"Payment Gateways (Stripe, PayPal, Square, etc.)\",\n    \"API Integrations (custom or third-party tools)\",\n    \"Zapier / Make (Integromat) Automations\"\n  ],\n  \"Content & Media\": [\n    \"Photo Galleries / Sliders\",\n    \"Video Backgrounds / Embeds\",\n    \"Podcast / Audio Player\",\n    \"Resource Library (PDFs, Whitepapers)\",\n    \"Download Center\"\n  ],\n  \"Advanced Features\": [\n    \"Multilingual / Translation Support\",\n    \"SEO Tools (meta tags, sitemap, schema)\",\n    \"Analytics Integration (GA4, Hotjar, etc.)\",\n    \"Security Features (SSL, Captcha, 2FA)\",\n    \"Custom Forms & Workflows\",\n    \"Chatbots (AI-powered or scripted)\"\n  ],\n  \"Design & Branding\": [\n    \"Theme Customization\",\n    \"Color & Typography Options\",\n    \"Dark Mode Toggle\",\n    \"Icon Libraries & Illustrations\",\n    \"Custom Graphics / SVG Animations\"\n  ],\n  \"Enterprise / Custom\": [\n    \"Learning Management System (LMS)\",\n    \"Custom Web Applications / Portals\",\n    \"Document Management System\",\n    \"API-Driven Dashboards\",\n    \"Integrations with ERP / Accounting Tools\"\n  ]\n} as const;\n\nexport type FeatureSelection = z.infer<typeof featureSelectionSchema>;\nexport type InsertFeatureSelection = z.infer<typeof insertFeatureSelectionSchema>;\nexport type FeatureSelectionRow = typeof featureSelections.$inferSelect;\nexport type InsertProjectSubmission = z.infer<typeof insertProjectSubmissionSchema>;\nexport type ProjectSubmissionRow = typeof projectSubmissions.$inferSelect;\nexport type WebsiteFeatureCategory = keyof typeof websiteFeatures;\nexport type WebsiteFeature = typeof websiteFeatures[WebsiteFeatureCategory][number];\n","size_bytes":18737},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\n// Import components\nimport LandingPage from \"@/components/LandingPage\";\nimport OnboardingWizard from \"@/components/OnboardingWizard\";\nimport Dashboard from \"@/components/Dashboard\";\nimport FeatureSelection from \"@/components/FeatureSelection\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport type { Project } from \"@/components/Dashboard\";\n\n// Mock user state for prototype\ntype UserRole = 'guest' | 'client' | 'admin';\n\nfunction Router() {\n  const [currentView, setCurrentView] = useState<'landing' | 'onboarding' | 'dashboard' | 'features'>('landing');\n  const [userRole, setUserRole] = useState<UserRole>('guest');\n  \n  const setCurrentViewWrapper = (view: 'landing' | 'onboarding' | 'dashboard' | 'features') => {\n    console.log('[DEBUG] setCurrentView called:', currentView, '->', view);\n    setCurrentView(view);\n  };\n  \n  // Mock projects data\n  const [projects] = useState<Project[]>([\n    {\n      id: '1',\n      name: 'Acme Design Studio Website',\n      status: 'in_progress',\n      createdAt: '2024-01-15T10:00:00Z',\n      updatedAt: '2024-01-20T14:30:00Z',\n      type: 'Service Business',\n      progress: 65\n    },\n    {\n      id: '2',\n      name: 'Local Bakery Online Store',\n      status: 'completed',\n      createdAt: '2024-01-10T09:00:00Z',\n      updatedAt: '2024-01-25T16:00:00Z',\n      type: 'E-commerce',\n      progress: 100\n    }\n  ]);\n\n  const handleGetStarted = () => {\n    setCurrentViewWrapper('onboarding');\n    setUserRole('client');\n    console.log('Starting onboarding process...');\n  };\n\n  const handleLogin = () => {\n    setCurrentViewWrapper('dashboard');\n    setUserRole('client');\n    console.log('Logging in as client...');\n  };\n\n  const handleCreateProject = () => {\n    setCurrentViewWrapper('onboarding');\n    console.log('Creating new project...');\n  };\n\n  const handleViewProject = (id: string) => {\n    console.log('Viewing project:', id);\n  };\n\n  const handleEditProject = (id: string) => {\n    setCurrentViewWrapper('onboarding');\n    console.log('Editing project:', id);\n  };\n\n  const handleExportProject = (id: string) => {\n    console.log('Exporting project:', id);\n  };\n\n  // Render current view\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'landing':\n        return (\n          <LandingPage \n            onGetStarted={handleGetStarted}\n            onLogin={handleLogin}\n          />\n        );\n      \n      case 'onboarding':\n        return (\n          <div className=\"min-h-screen bg-background\">\n            <header className=\"border-b p-4\">\n              <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <button \n                    onClick={() => setCurrentViewWrapper('dashboard')}\n                    className=\"text-sm text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-back-to-dashboard\"\n                  >\n                    ← Back to Dashboard\n                  </button>\n                  <h1 className=\"text-lg font-semibold\">Client Onboarding Portal</h1>\n                </div>\n                <ThemeToggle />\n              </div>\n            </header>\n            <div className=\"p-6\">\n              <OnboardingWizard key=\"stable-onboarding-wizard\" />\n            </div>\n          </div>\n        );\n      \n      case 'dashboard':\n        return (\n          <div className=\"min-h-screen bg-background\">\n            <header className=\"border-b p-4\">\n              <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <button \n                    onClick={() => setCurrentViewWrapper('landing')}\n                    className=\"text-sm text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-back-to-landing\"\n                  >\n                    ← Back to Landing\n                  </button>\n                  <h1 className=\"text-lg font-semibold\">WebStudio Pro</h1>\n                  <button\n                    onClick={() => setCurrentViewWrapper('features')}\n                    className=\"text-xs bg-secondary text-secondary-foreground px-3 py-1.5 rounded hover-elevate\"\n                    data-testid=\"button-go-to-features\"\n                  >\n                    Feature Selection\n                  </button>\n                  {userRole === 'admin' && (\n                    <button\n                      onClick={() => setUserRole('client')}\n                      className=\"text-xs bg-primary text-primary-foreground px-2 py-1 rounded\"\n                      data-testid=\"button-switch-to-client\"\n                    >\n                      Switch to Client View\n                    </button>\n                  )}\n                  {userRole === 'client' && (\n                    <button\n                      onClick={() => setUserRole('admin')}\n                      className=\"text-xs bg-primary text-primary-foreground px-2 py-1 rounded\"\n                      data-testid=\"button-switch-to-admin\"\n                    >\n                      Switch to Admin View\n                    </button>\n                  )}\n                </div>\n                <ThemeToggle />\n              </div>\n            </header>\n            <div className=\"max-w-7xl mx-auto p-6\">\n              <Dashboard\n                projects={projects}\n                userRole={userRole as 'client' | 'admin'}\n                onCreateProject={handleCreateProject}\n                onViewProject={handleViewProject}\n                onEditProject={handleEditProject}\n                onExportProject={handleExportProject}\n              />\n            </div>\n          </div>\n        );\n      \n      case 'features':\n        return (\n          <div className=\"min-h-screen bg-background\">\n            <header className=\"border-b p-4\">\n              <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <button \n                    onClick={() => setCurrentViewWrapper('dashboard')}\n                    className=\"text-sm text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-back-to-dashboard-from-features\"\n                  >\n                    ← Back to Dashboard\n                  </button>\n                  <h1 className=\"text-lg font-semibold\">WebStudio Pro - Feature Selection</h1>\n                </div>\n                <ThemeToggle />\n              </div>\n            </header>\n            <div className=\"max-w-4xl mx-auto p-6\">\n              <FeatureSelection\n                userId=\"mock-user-id\"\n                onSaved={() => {\n                  console.log('Features saved successfully');\n                }}\n              />\n            </div>\n          </div>\n        );\n      \n      default:\n        return <NotFound />;\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => renderCurrentView()} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7642},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n\n  --foreground: 220 13% 14%;\n\n  --border: 210 20% 89%;\n\n  --card: 210 20% 96%;\n\n  --card-foreground: 220 13% 14%;\n\n  --card-border: 210 20% 91%;\n\n  --sidebar: 210 20% 94%;\n\n  --sidebar-foreground: 220 13% 14%;\n\n  --sidebar-border: 210 20% 87%;\n\n  --sidebar-primary: 255 87% 51%;\n\n  --sidebar-primary-foreground: 255 100% 95%;\n\n  --sidebar-accent: 210 20% 88%;\n\n  --sidebar-accent-foreground: 220 13% 14%;\n\n  --sidebar-ring: 255 87% 51%;\n\n  --popover: 210 20% 92%;\n\n  --popover-foreground: 220 13% 14%;\n\n  --popover-border: 210 20% 85%;\n\n  --primary: 255 87% 51%;\n\n  --primary-foreground: 255 100% 95%;\n\n  --secondary: 210 20% 88%;\n\n  --secondary-foreground: 220 13% 14%;\n\n  --muted: 210 20% 90%;\n\n  --muted-foreground: 220 13% 45%;\n\n  --accent: 210 15% 86%;\n\n  --accent-foreground: 220 13% 14%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 100% 98%;\n\n  --input: 210 20% 82%;\n  --ring: 255 87% 51%;\n  --chart-1: 255 77% 41%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 80% 50%;\n  --chart-5: 20 85% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 84% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 82% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 82% / 0.15), 0px 1px 2px -1px hsl(210 20% 80% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 80% / 0.20), 0px 1px 2px -1px hsl(210 20% 78% / 0.35);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 78% / 0.25), 0px 2px 4px -1px hsl(210 20% 76% / 0.40);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 76% / 0.30), 0px 4px 6px -1px hsl(210 20% 74% / 0.45);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 74% / 0.35), 0px 8px 10px -1px hsl(210 20% 72% / 0.50);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 72% / 0.40);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 14%;\n\n  --foreground: 210 20% 92%;\n\n  --border: 220 13% 20%;\n\n  --card: 220 13% 16%;\n\n  --card-foreground: 210 20% 92%;\n\n  --card-border: 220 13% 22%;\n\n  --sidebar: 220 13% 18%;\n\n  --sidebar-foreground: 210 20% 92%;\n\n  --sidebar-border: 220 13% 24%;\n\n  --sidebar-primary: 255 77% 41%;\n\n  --sidebar-primary-foreground: 255 100% 95%;\n\n  --sidebar-accent: 220 13% 22%;\n\n  --sidebar-accent-foreground: 210 20% 92%;\n\n  --sidebar-ring: 255 77% 41%;\n\n  --popover: 220 13% 20%;\n\n  --popover-foreground: 210 20% 92%;\n\n  --popover-border: 220 13% 26%;\n\n  --primary: 255 77% 41%;\n\n  --primary-foreground: 255 100% 95%;\n\n  --secondary: 220 13% 24%;\n\n  --secondary-foreground: 210 20% 92%;\n\n  --muted: 220 13% 22%;\n\n  --muted-foreground: 210 20% 68%;\n\n  --accent: 220 13% 26%;\n\n  --accent-foreground: 210 20% 92%;\n\n  --destructive: 0 75% 50%;\n\n  --destructive-foreground: 0 100% 98%;\n\n  --input: 220 13% 28%;\n  --ring: 255 77% 41%;\n  --chart-1: 255 87% 61%;\n  --chart-2: 142 76% 56%;\n  --chart-3: 38 92% 70%;\n  --chart-4: 280 80% 70%;\n  --chart-5: 20 85% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 10% / 0.40);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 8% / 0.50);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 8% / 0.30), 0px 1px 2px -1px hsl(220 13% 6% / 0.60);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 6% / 0.40), 0px 1px 2px -1px hsl(220 13% 4% / 0.70);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 4% / 0.50), 0px 2px 4px -1px hsl(220 13% 2% / 0.80);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 2% / 0.60), 0px 4px 6px -1px hsl(220 13% 0% / 0.90);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 0% / 0.70), 0px 8px 10px -1px hsl(220 13% 0% / 1.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 0% / 0.80);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9861},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CreativeBriefReview.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Building2, \n  Palette, \n  Globe, \n  FileText, \n  Images, \n  Sparkles,\n  Download,\n  ExternalLink\n} from \"lucide-react\";\n\nexport interface CreativeBriefData {\n  fullName?: string;\n  email?: string;\n  contactNumber?: string;\n  businessName: string;\n  businessDescription: string;\n  logoFile?: File;\n  logoDecision?: 'final' | 'direction';\n  selectedLogo?: {\n    id: string;\n    dataUrl: string;\n    prompt: string;\n  };\n  colors: string[];\n  primaryColor?: string;\n  secondaryColor?: string;\n  accentColor?: string;\n  backgroundColor?: string;\n  textColor?: string;\n  fonts: string[];\n  siteType: string;\n  pages: { name: string; path: string }[];\n  coreWebsiteFeatures: string[];\n  pageContent: Record<string, string>;\n  crmIntegration?: {\n    selectedCrms: string[];\n    customCrmNames?: string[];\n    selectedMarketingAutomation: string[];\n    customMarketingAutomationNames?: string[];\n    selectedPaymentGateways: string[];\n    customPaymentGatewayNames?: string[];\n    apiIntegrations?: string;\n    selectedAutomationPlatforms: string[];\n    selectedEngagementFeatures: string[];\n    selectedAdvancedFeatures?: string[];\n    selectedECommerceFeatures?: string[];\n  };\n  userAccountsMembership?: {\n    registrationLogin: boolean;\n    userDashboardNeeded: boolean;\n    userDashboardFeatures?: string;\n    predefinedRoles: string[];\n    customRoles: { name: string; description?: string }[];\n    membershipSubscriptionSystem: boolean;\n    membershipDetails?: string;\n  };\n  images: File[];\n  designStyle: string;\n  inspirationLinks: string[];\n  designNotes: string;\n}\n\ninterface CreativeBriefReviewProps {\n  briefData: CreativeBriefData;\n  onExportPDF: () => void;\n  onEditSection: (section: string) => void;\n  className?: string;\n}\n\n// Helper function to format CRM names for display\nfunction formatCrmNames(selectedCrms: string[], customCrmNames?: string[]): string[] {\n  const crmDisplayNames: Record<string, string> = {\n    'salesforce': 'Salesforce',\n    'hubspot': 'HubSpot',\n    'zoho-crm': 'Zoho CRM',\n    'pipedrive': 'Pipedrive',\n    'microsoft-dynamics-365': 'Microsoft Dynamics 365',\n    'freshsales': 'Freshsales',\n    'ontraport': 'Ontraport',\n    'nimble': 'Nimble',\n    'nutshell': 'Nutshell',\n    'membrain': 'Membrain',\n    'sugarcrm': 'SugarCRM'\n  };\n  \n  const formattedCrms: string[] = [];\n  \n  selectedCrms.forEach(crm => {\n    if (crm === 'custom') {\n      if (customCrmNames && customCrmNames.length > 0) {\n        const filteredNames = customCrmNames.filter(name => name.trim());\n        formattedCrms.push(...filteredNames);\n      }\n    } else {\n      formattedCrms.push(crmDisplayNames[crm] || crm);\n    }\n  });\n  \n  return formattedCrms;\n}\n\n// Helper function to format Marketing Automation names for display\nfunction formatMarketingAutomationNames(selectedPlatforms: string[], customNames?: string[]): string[] {\n  const platformDisplayNames: Record<string, string> = {\n    'klaviyo': 'Klaviyo',\n    'hubspot': 'HubSpot',\n    'activecampaign': 'ActiveCampaign',\n    'mailchimp': 'Mailchimp',\n    'brevo': 'Brevo',\n    'marketo-engage': 'Marketo Engage',\n    'pardot': 'Pardot'\n  };\n  \n  const formattedPlatforms: string[] = [];\n  \n  selectedPlatforms.forEach(platform => {\n    if (platform === 'custom') {\n      if (customNames && customNames.length > 0) {\n        const filteredNames = customNames.filter(name => name.trim());\n        formattedPlatforms.push(...filteredNames);\n      }\n    } else {\n      formattedPlatforms.push(platformDisplayNames[platform] || platform);\n    }\n  });\n  \n  return formattedPlatforms;\n}\n\n// Helper function to format Payment Gateway names for display\nfunction formatPaymentGatewayNames(selectedGateways: string[], customNames?: string[]): string[] {\n  const gatewayDisplayNames: Record<string, string> = {\n    'stripe': 'Stripe',\n    'paypal': 'PayPal',\n    'square': 'Square',\n    'authorize-net': 'Authorize.net',\n    'amazon-pay': 'Amazon Pay',\n    'apple-pay': 'Apple Pay',\n    'bank-transfer': 'Bank Transfer'\n  };\n  \n  const formattedGateways: string[] = [];\n  \n  selectedGateways.forEach(gateway => {\n    if (gateway === 'custom') {\n      if (customNames && customNames.length > 0) {\n        const filteredNames = customNames.filter(name => name.trim());\n        formattedGateways.push(...filteredNames);\n      }\n    } else {\n      formattedGateways.push(gatewayDisplayNames[gateway] || gateway);\n    }\n  });\n  \n  return formattedGateways;\n}\n\n// Helper function to format Automation Platform names for display\nfunction formatAutomationPlatformNames(selectedPlatforms: string[]): string[] {\n  const platformDisplayNames: Record<string, string> = {\n    'zapier': 'Zapier',\n    'make': 'Make (formerly Integromat)'\n  };\n  \n  return selectedPlatforms.map(platform => platformDisplayNames[platform] || platform);\n}\n\n// Helper function to format Engagement Feature names for display\nfunction formatEngagementFeatureNames(selectedFeatures: string[]): string[] {\n  const featureDisplayNames: Record<string, string> = {\n    'animations-motion-effects': 'Animations & Motion Effects',\n    'popups-modals': 'Pop-ups / Modals (newsletter, promos)',\n    'live-chat-integration': 'Live Chat Integration (Intercom, Drift, etc.)',\n    'polls-surveys': 'Polls & Surveys',\n    'appointment-booking-scheduling': 'Appointment Booking / Scheduling',\n    'event-calendar-ticketing': 'Event Calendar & Ticketing',\n    'social-media-feeds-sharing': 'Social Media Feeds / Sharing'\n  };\n  \n  return selectedFeatures.map(feature => featureDisplayNames[feature] || feature);\n}\n\n// Helper function to format Advanced Feature names for display\nfunction formatAdvancedFeatureNames(selectedFeatures: string[]): string[] {\n  const featureDisplayNames: Record<string, string> = {\n    'multilingual-translation-support': 'Multilingual / Translation Support',\n    'seo-tools-meta-sitemap-schema': 'SEO Tools (meta tags, sitemap, schema)',\n    'analytics-integration-ga4-hotjar': 'Analytics Integration (GA4, Hotjar, etc.)',\n    'security-features-ssl-captcha-2fa': 'Security Features (SSL, Captcha, 2FA)',\n    'custom-forms-workflows': 'Custom Forms & Workflows',\n    'chatbots-ai-powered-scripted': 'Chatbots (AI-powered or scripted)'\n  };\n  \n  return selectedFeatures.map(feature => featureDisplayNames[feature] || feature);\n}\n\n// Helper function to format E-Commerce Feature names for display\nfunction formatECommerceFeatureNames(selectedFeatures: string[]): string[] {\n  const featureDisplayNames: Record<string, string> = {\n    'online-store-shopify-woocommerce': 'Online Store (Shopify / WooCommerce)',\n    'product-catalog': 'Product Catalog',\n    'shopping-cart-checkout': 'Shopping Cart & Checkout',\n    'digital-downloads': 'Digital Downloads',\n    'inventory-management': 'Inventory Management',\n    'subscription-products': 'Subscription Products',\n    'multi-currency-support': 'Multi-Currency Support',\n    'discount-codes-coupons': 'Discount Codes / Coupons'\n  };\n  \n  return selectedFeatures.map(feature => featureDisplayNames[feature] || feature);\n}\n\nexport default function CreativeBriefReview({ \n  briefData, \n  onExportPDF, \n  onEditSection,\n  className = \"\" \n}: CreativeBriefReviewProps) {\n  const formatSiteType = (type: string) => {\n    const typeMap: Record<string, string> = {\n      brochure: 'Brochure Site',\n      ecommerce: 'Online Store',\n      service: 'Service Business',\n      blog: 'Blog/Content',\n      booking: 'Booking System',\n      custom: 'Custom Solution'\n    };\n    return typeMap[type] || type;\n  };\n\n  const formatDesignStyle = (style: string) => {\n    const styleMap: Record<string, string> = {\n      modern: 'Modern & Clean',\n      playful: 'Playful & Creative',\n      luxury: 'Luxury & Elegant',\n      corporate: 'Corporate & Professional',\n      creative: 'Creative & Artistic',\n      tech: 'Tech & Futuristic'\n    };\n    return styleMap[style] || style;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold\">Creative Brief Review</h2>\n          <p className=\"text-muted-foreground mt-2\">\n            Review all the information collected for your website project\n          </p>\n        </div>\n        <Button \n          onClick={onExportPDF}\n          className=\"gap-2\"\n          data-testid=\"button-export-pdf\"\n        >\n          <Download className=\"w-4 h-4\" />\n          Export PDF\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Contact Information */}\n        {(briefData.fullName || briefData.email || briefData.contactNumber) && (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"w-5 h-5 text-primary\" />\n                Contact Information\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => onEditSection('business')}\n                data-testid=\"button-edit-contact\"\n              >\n                Edit\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {briefData.fullName && (\n                  <div>\n                    <p className=\"text-sm font-medium\">Full Name</p>\n                    <p className=\"text-sm text-muted-foreground\">{briefData.fullName}</p>\n                  </div>\n                )}\n                {briefData.email && (\n                  <div>\n                    <p className=\"text-sm font-medium\">Email</p>\n                    <p className=\"text-sm text-muted-foreground\">{briefData.email}</p>\n                  </div>\n                )}\n                {briefData.contactNumber && (\n                  <div>\n                    <p className=\"text-sm font-medium\">Contact Number</p>\n                    <p className=\"text-sm text-muted-foreground\">{briefData.contactNumber}</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Business Identity */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"w-5 h-5 text-primary\" />\n              Business Identity\n            </CardTitle>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => onEditSection('business')}\n              data-testid=\"button-edit-business\"\n            >\n              Edit\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-semibold\">{briefData.businessName}</h4>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {briefData.businessDescription}\n                </p>\n              </div>\n              {(briefData.logoFile || briefData.selectedLogo) && (\n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Logo:</p>\n                  {briefData.logoFile && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Uploaded: {briefData.logoFile.name}\n                    </p>\n                  )}\n                  {briefData.selectedLogo && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <img \n                          src={briefData.selectedLogo.dataUrl} \n                          alt=\"Selected Logo\" \n                          className=\"w-16 h-16 object-contain border rounded\"\n                        />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            AI Generated Logo\n                          </p>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge variant={briefData.logoDecision === 'final' ? 'default' : 'secondary'}>\n                              {briefData.logoDecision === 'final' ? 'Final Selection' : 'Creative Direction'}\n                            </Badge>\n                          </div>\n                          {briefData.logoDecision === 'direction' && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              Client wants similar style - requires refinement\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Branding */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Palette className=\"w-5 h-5 text-primary\" />\n              Branding\n            </CardTitle>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => onEditSection('branding')}\n              data-testid=\"button-edit-branding\"\n            >\n              Edit\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Color Scheme */}\n              {(briefData.primaryColor || briefData.secondaryColor || briefData.accentColor || briefData.backgroundColor || briefData.textColor) && (\n                <div>\n                  <p className=\"text-sm font-medium mb-3\">Selected Color Scheme:</p>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {briefData.primaryColor && (\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-8 h-8 rounded-md border-2 border-border flex-shrink-0\" \n                          style={{ backgroundColor: briefData.primaryColor }}\n                        />\n                        <div>\n                          <span className=\"text-sm font-medium\">Primary</span>\n                          <p className=\"text-xs text-muted-foreground\">{briefData.primaryColor}</p>\n                        </div>\n                      </div>\n                    )}\n                    {briefData.secondaryColor && (\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-8 h-8 rounded-md border-2 border-border flex-shrink-0\" \n                          style={{ backgroundColor: briefData.secondaryColor }}\n                        />\n                        <div>\n                          <span className=\"text-sm font-medium\">Secondary</span>\n                          <p className=\"text-xs text-muted-foreground\">{briefData.secondaryColor}</p>\n                        </div>\n                      </div>\n                    )}\n                    {briefData.accentColor && (\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-8 h-8 rounded-md border-2 border-border flex-shrink-0\" \n                          style={{ backgroundColor: briefData.accentColor }}\n                        />\n                        <div>\n                          <span className=\"text-sm font-medium\">Accent</span>\n                          <p className=\"text-xs text-muted-foreground\">{briefData.accentColor}</p>\n                        </div>\n                      </div>\n                    )}\n                    {briefData.backgroundColor && (\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-8 h-8 rounded-md border-2 border-border flex-shrink-0\" \n                          style={{ backgroundColor: briefData.backgroundColor }}\n                        />\n                        <div>\n                          <span className=\"text-sm font-medium\">Background</span>\n                          <p className=\"text-xs text-muted-foreground\">{briefData.backgroundColor}</p>\n                        </div>\n                      </div>\n                    )}\n                    {briefData.textColor && (\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-8 h-8 rounded-md border-2 border-border flex-shrink-0\" \n                          style={{ backgroundColor: briefData.textColor }}\n                        />\n                        <div>\n                          <span className=\"text-sm font-medium\">Text</span>\n                          <p className=\"text-xs text-muted-foreground\">{briefData.textColor}</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n              {/* Selected Font */}\n              {briefData.fonts && briefData.fonts.length > 0 && (\n                <div>\n                  <p className=\"text-sm font-medium mb-3\">Selected Font:</p>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex-1\">\n                      <div \n                        className=\"text-lg font-semibold\" \n                        style={{ fontFamily: briefData.fonts[0] }}\n                        data-testid=\"text-selected-font\"\n                      >\n                        {briefData.fonts[0]}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\" style={{ fontFamily: briefData.fonts[0] }}>\n                        Sample: The quick brown fox jumps over the lazy dog\n                      </p>\n                    </div>\n                    <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                      {briefData.fonts[0]}\n                    </Badge>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Website Purpose */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"w-5 h-5 text-primary\" />\n              Website Purpose\n            </CardTitle>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => onEditSection('purpose')}\n              data-testid=\"button-edit-purpose\"\n            >\n              Edit\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div>\n              <Badge variant=\"outline\" className=\"mb-3\">\n                {formatSiteType(briefData.siteType)}\n              </Badge>\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Pages ({briefData.pages.length}):</p>\n                <div className=\"space-y-1\">\n                  {briefData.pages.slice(0, 6).map((page, index) => (\n                    <div key={index} className=\"flex items-center justify-between text-sm\">\n                      <span>{page.name}</span>\n                      <span className=\"text-muted-foreground\">{page.path}</span>\n                    </div>\n                  ))}\n                  {briefData.pages.length > 6 && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      +{briefData.pages.length - 6} more pages\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Core Website Features */}\n        {briefData.coreWebsiteFeatures && briefData.coreWebsiteFeatures.length > 0 && (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-primary\" />\n                Core Website Features\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => onEditSection('sitemap')}\n                data-testid=\"button-edit-core-features\"\n              >\n                Edit\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div>\n                <p className=\"text-sm font-medium mb-3\">Selected Features ({briefData.coreWebsiteFeatures.length}):</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {briefData.coreWebsiteFeatures.map((feature, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {feature}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Design Style */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              Design Style\n            </CardTitle>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => onEditSection('design')}\n              data-testid=\"button-edit-design\"\n            >\n              Edit\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Badge variant=\"outline\">\n                  {formatDesignStyle(briefData.designStyle)}\n                </Badge>\n              </div>\n              \n              {briefData.inspirationLinks.length > 0 && (\n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Inspiration:</p>\n                  <div className=\"space-y-1\">\n                    {briefData.inspirationLinks.slice(0, 3).map((link, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <ExternalLink className=\"w-3 h-3\" />\n                        <a \n                          href={link} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-sm text-primary hover:underline truncate\"\n                        >\n                          {link}\n                        </a>\n                      </div>\n                    ))}\n                    {briefData.inspirationLinks.length > 3 && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        +{briefData.inspirationLinks.length - 3} more links\n                      </p>\n                    )}\n                  </div>\n                </div>\n              )}\n              \n              {briefData.designNotes && (\n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Notes:</p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    {briefData.designNotes}\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Content & Media */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5 text-primary\" />\n            Content & Media\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Page Content */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-semibold\">Page Content</h4>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => onEditSection('content')}\n                  data-testid=\"button-edit-content\"\n                >\n                  Edit\n                </Button>\n              </div>\n              <div className=\"space-y-3\">\n                {Object.entries(briefData.pageContent).slice(0, 4).map(([pageName, content]) => (\n                  <div key={pageName} className=\"border-l-2 border-primary pl-3\">\n                    <p className=\"text-sm font-medium\">{pageName}</p>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                      {content || 'Content pending...'}\n                    </p>\n                  </div>\n                ))}\n                {Object.keys(briefData.pageContent).length > 4 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    +{Object.keys(briefData.pageContent).length - 4} more pages\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Integrations */}\n            {briefData.crmIntegration && (briefData.crmIntegration.selectedCrms?.length > 0 || briefData.crmIntegration.selectedMarketingAutomation?.length > 0 || briefData.crmIntegration.selectedPaymentGateways?.length > 0 || briefData.crmIntegration.apiIntegrations?.trim() || briefData.crmIntegration.selectedAutomationPlatforms?.length > 0 || briefData.crmIntegration.selectedEngagementFeatures?.length > 0 || (briefData.crmIntegration.selectedAdvancedFeatures && briefData.crmIntegration.selectedAdvancedFeatures.length > 0) || (briefData.crmIntegration.selectedECommerceFeatures && briefData.crmIntegration.selectedECommerceFeatures.length > 0)) && (\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-semibold\">Integrations</h4>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={() => onEditSection('integration')}\n                    data-testid=\"button-edit-integration\"\n                  >\n                    Edit\n                  </Button>\n                </div>\n                <div className=\"space-y-4\">\n                  {briefData.crmIntegration.selectedCrms?.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">CRM Platforms</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatCrmNames(briefData.crmIntegration.selectedCrms, briefData.crmIntegration.customCrmNames).map((crmName, index) => (\n                          <Badge key={`crm-${index}`} variant=\"secondary\" className=\"text-xs\">\n                            {crmName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {briefData.crmIntegration.selectedMarketingAutomation?.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">Marketing Automation Platforms</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatMarketingAutomationNames(briefData.crmIntegration.selectedMarketingAutomation, briefData.crmIntegration.customMarketingAutomationNames).map((platformName, index) => (\n                          <Badge key={`marketing-${index}`} variant=\"outline\" className=\"text-xs\">\n                            {platformName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {briefData.crmIntegration.selectedPaymentGateways?.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">Payment Gateways</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatPaymentGatewayNames(briefData.crmIntegration.selectedPaymentGateways, briefData.crmIntegration.customPaymentGatewayNames).map((gatewayName, index) => (\n                          <Badge key={`payment-${index}`} variant=\"default\" className=\"text-xs\">\n                            {gatewayName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {briefData.crmIntegration.apiIntegrations?.trim() && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">API Integrations</p>\n                      <div className=\"mt-2 p-3 bg-muted rounded-md\">\n                        <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                          {briefData.crmIntegration.apiIntegrations}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {briefData.crmIntegration.selectedAutomationPlatforms?.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">Automation Platforms</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatAutomationPlatformNames(briefData.crmIntegration.selectedAutomationPlatforms).map((platformName, index) => (\n                          <Badge key={`automation-${index}`} variant=\"destructive\" className=\"text-xs\">\n                            {platformName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {briefData.crmIntegration.selectedEngagementFeatures?.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">Engagement & Interactivity</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatEngagementFeatureNames(briefData.crmIntegration.selectedEngagementFeatures).map((featureName, index) => (\n                          <Badge key={`engagement-${index}`} className=\"text-xs bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\n                            {featureName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {briefData.crmIntegration.selectedAdvancedFeatures && briefData.crmIntegration.selectedAdvancedFeatures.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">Advanced Features</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatAdvancedFeatureNames(briefData.crmIntegration.selectedAdvancedFeatures).map((featureName, index) => (\n                          <Badge key={`advanced-${index}`} className=\"text-xs bg-gradient-to-r from-orange-500 to-red-500 text-white\">\n                            {featureName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {briefData.crmIntegration.selectedECommerceFeatures && briefData.crmIntegration.selectedECommerceFeatures.length > 0 && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">E-Commerce</p>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {formatECommerceFeatureNames(briefData.crmIntegration.selectedECommerceFeatures).map((featureName, index) => (\n                          <Badge key={`ecommerce-${index}`} className=\"text-xs bg-gradient-to-r from-green-500 to-blue-500 text-white\">\n                            {featureName}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* User Accounts & Membership */}\n            {briefData.userAccountsMembership && (briefData.userAccountsMembership.registrationLogin || briefData.userAccountsMembership.userDashboardNeeded || (briefData.userAccountsMembership.predefinedRoles?.length > 0 || briefData.userAccountsMembership.customRoles?.length > 0) || briefData.userAccountsMembership.membershipSubscriptionSystem) && (\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-semibold\">User Accounts & Membership</h4>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={() => onEditSection('membership')}\n                    data-testid=\"button-edit-membership\"\n                  >\n                    Edit\n                  </Button>\n                </div>\n                <div className=\"space-y-4\">\n\n                  {/* Registration & Login */}\n                  {briefData.userAccountsMembership.registrationLogin && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">User Registration & Login</p>\n                      <Badge \n                        className=\"text-xs mt-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white\"\n                        data-testid=\"status-registration-login\"\n                      >\n                        Registration & Login Enabled\n                      </Badge>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Users will be able to create accounts and log in to access personalized features\n                      </p>\n                    </div>\n                  )}\n\n                  {/* User Dashboard */}\n                  {briefData.userAccountsMembership.userDashboardNeeded && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">User Dashboard</p>\n                      <Badge \n                        className=\"text-xs mt-2 bg-gradient-to-r from-purple-500 to-violet-500 text-white\"\n                        data-testid=\"status-user-dashboard\"\n                      >\n                        Dashboard Required\n                      </Badge>\n                      {briefData.userAccountsMembership.userDashboardFeatures && (\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-muted-foreground mb-2\">Dashboard Features:</p>\n                          <div className=\"p-3 bg-muted rounded-md\">\n                            <p \n                              className=\"text-sm text-muted-foreground whitespace-pre-wrap\"\n                              data-testid=\"text-dashboard-features\"\n                            >\n                              {briefData.userAccountsMembership.userDashboardFeatures}\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {(briefData.userAccountsMembership.predefinedRoles?.length > 0 || briefData.userAccountsMembership.customRoles?.length > 0) && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">User Roles</p>\n                      \n                      {briefData.userAccountsMembership.predefinedRoles?.length > 0 && (\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-muted-foreground mb-2\">Predefined Roles:</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {briefData.userAccountsMembership.predefinedRoles.map((role, index) => (\n                              <Badge key={`predefined-role-${index}`} variant=\"outline\" className=\"text-xs capitalize\">\n                                {role}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {briefData.userAccountsMembership.customRoles?.length > 0 && (\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-muted-foreground mb-2\">Custom Roles:</p>\n                          <div className=\"space-y-3\">\n                            {briefData.userAccountsMembership.customRoles.map((role, index) => (\n                              <div key={`custom-role-${index}`} className=\"p-3 bg-muted rounded-md\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    {role.name}\n                                  </Badge>\n                                </div>\n                                {role.description && (\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {role.description}\n                                  </p>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {briefData.userAccountsMembership.membershipSubscriptionSystem && (\n                    <div className=\"border-l-2 border-primary pl-3\">\n                      <p className=\"text-sm font-medium\">Membership / Subscription System</p>\n                      <Badge className=\"text-xs mt-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white\">\n                        Subscription System Enabled\n                      </Badge>\n                      \n                      {briefData.userAccountsMembership.membershipDetails && (\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-muted-foreground mb-2\">Membership Details:</p>\n                          <div className=\"p-3 bg-muted rounded-md\">\n                            <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                              {briefData.userAccountsMembership.membershipDetails}\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                </div>\n              </div>\n            )}\n\n            {/* Images */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-semibold\">Images & Media</h4>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => onEditSection('media')}\n                  data-testid=\"button-edit-media\"\n                >\n                  Edit\n                </Button>\n              </div>\n              <div className=\"space-y-2\">\n                {briefData.images.slice(0, 5).map((image, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <Images className=\"w-4 h-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">{image.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {(image.size / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {briefData.images.length > 5 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    +{briefData.images.length - 5} more images\n                  </p>\n                )}\n                {briefData.images.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground\">No images uploaded yet</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":40738},"client/src/components/Dashboard.tsx":{"content":"import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Eye, \n  Edit, \n  Download,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  FileText\n} from \"lucide-react\";\n\nexport interface Project {\n  id: string;\n  name: string;\n  status: 'draft' | 'in_review' | 'approved' | 'in_progress' | 'completed';\n  createdAt: string;\n  updatedAt: string;\n  type: string;\n  progress: number;\n}\n\ninterface DashboardProps {\n  projects: Project[];\n  userRole: 'client' | 'admin';\n  onCreateProject: () => void;\n  onViewProject: (id: string) => void;\n  onEditProject: (id: string) => void;\n  onExportProject: (id: string) => void;\n  className?: string;\n}\n\nconst statusConfig = {\n  draft: { label: 'Draft', color: 'bg-gray-500', icon: Clock },\n  in_review: { label: 'In Review', color: 'bg-yellow-500', icon: AlertCircle },\n  approved: { label: 'Approved', color: 'bg-green-500', icon: CheckCircle },\n  in_progress: { label: 'In Progress', color: 'bg-blue-500', icon: Clock },\n  completed: { label: 'Completed', color: 'bg-green-600', icon: CheckCircle }\n};\n\nexport default function Dashboard({ \n  projects, \n  userRole, \n  onCreateProject,\n  onViewProject,\n  onEditProject,\n  onExportProject,\n  className = \"\" \n}: DashboardProps) {\n  const getStatusInfo = (status: Project['status']) => {\n    return statusConfig[status] || statusConfig.draft;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">\n            {userRole === 'admin' ? 'Admin Dashboard' : 'My Projects'}\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {userRole === 'admin' \n              ? 'Manage all client projects and creative briefs'\n              : 'Track your website projects and creative briefs'\n            }\n          </p>\n        </div>\n        {userRole === 'client' && (\n          <Button onClick={onCreateProject} className=\"gap-2\" data-testid=\"button-create-project\">\n            <Plus className=\"w-4 h-4\" />\n            Start New Project\n          </Button>\n        )}\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Projects</p>\n                <p className=\"text-2xl font-bold\">{projects.length}</p>\n              </div>\n              <FileText className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">In Progress</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects.filter(p => p.status === 'in_progress').length}\n                </p>\n              </div>\n              <Clock className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Completed</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects.filter(p => p.status === 'completed').length}\n                </p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Pending Review</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects.filter(p => p.status === 'in_review').length}\n                </p>\n              </div>\n              <AlertCircle className=\"w-8 h-8 text-yellow-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Projects List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Projects</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {projects.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-lg font-medium mb-2\">No projects yet</p>\n              <p className=\"text-muted-foreground mb-4\">\n                {userRole === 'client' \n                  ? \"Start your first website project by creating a creative brief\"\n                  : \"No client projects have been submitted yet\"\n                }\n              </p>\n              {userRole === 'client' && (\n                <Button onClick={onCreateProject} data-testid=\"button-create-first-project\">\n                  Create Your First Project\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {projects.map((project) => {\n                const statusInfo = getStatusInfo(project.status);\n                const StatusIcon = statusInfo.icon;\n                \n                return (\n                  <div key={project.id} className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex-shrink-0\">\n                        <StatusIcon className=\"w-5 h-5 text-muted-foreground\" />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"font-semibold truncate\">{project.name}</h3>\n                          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                            <div className={`w-2 h-2 rounded-full ${statusInfo.color}`} />\n                            {statusInfo.label}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span>Type: {project.type}</span>\n                          <span>Created: {formatDate(project.createdAt)}</span>\n                          <span>Updated: {formatDate(project.updatedAt)}</span>\n                          {project.progress > 0 && (\n                            <span>Progress: {project.progress}%</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => onViewProject(project.id)}\n                        data-testid={`button-view-project-${project.id}`}\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      {(userRole === 'client' && project.status === 'draft') || userRole === 'admin' ? (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => onEditProject(project.id)}\n                          data-testid={`button-edit-project-${project.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                      ) : null}\n                      \n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => onExportProject(project.id)}\n                        data-testid={`button-export-project-${project.id}`}\n                      >\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8778},"client/src/components/DesignStyleSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, X, ExternalLink } from \"lucide-react\";\n\nexport interface DesignStyle {\n  id: string;\n  name: string;\n  description: string;\n  characteristics: string[];\n}\n\nexport interface DesignPreferences {\n  selectedStyle?: string;\n  preferredFont?: string;\n  primaryColor?: string;\n  secondaryColor?: string;\n  accentColor?: string;\n  backgroundColor?: string;\n  textColor?: string;\n  inspirationLinks: string[];\n  additionalNotes: string;\n}\n\ninterface DesignStyleSelectorProps {\n  preferences: DesignPreferences;\n  onPreferencesUpdate: (preferences: DesignPreferences) => void;\n  className?: string;\n}\n\nconst designStyles: DesignStyle[] = [\n  {\n    id: \"modern\",\n    name: \"Modern & Clean\",\n    description: \"Minimalist design with clean lines and plenty of whitespace\",\n    characteristics: [\"Minimalist\", \"Clean Typography\", \"Whitespace\", \"Simple\"]\n  },\n  {\n    id: \"playful\",\n    name: \"Playful & Creative\",\n    description: \"Fun, colorful design with creative elements and animations\",\n    characteristics: [\"Colorful\", \"Animations\", \"Creative\", \"Engaging\"]\n  },\n  {\n    id: \"luxury\",\n    name: \"Luxury & Elegant\",\n    description: \"Sophisticated design with premium feel and high-end aesthetics\",\n    characteristics: [\"Sophisticated\", \"Premium\", \"Elegant\", \"High-end\"]\n  },\n  {\n    id: \"corporate\",\n    name: \"Corporate & Professional\",\n    description: \"Business-focused design that builds trust and credibility\",\n    characteristics: [\"Professional\", \"Trustworthy\", \"Structured\", \"Business\"]\n  },\n  {\n    id: \"creative\",\n    name: \"Creative & Artistic\",\n    description: \"Unique, artistic design that showcases creativity and innovation\",\n    characteristics: [\"Unique\", \"Artistic\", \"Innovative\", \"Creative\"]\n  },\n  {\n    id: \"tech\",\n    name: \"Tech & Futuristic\",\n    description: \"Modern tech-focused design with innovative elements\",\n    characteristics: [\"Tech-focused\", \"Innovative\", \"Modern\", \"Digital\"]\n  }\n];\n\n\nexport default function DesignStyleSelector({ \n  preferences, \n  onPreferencesUpdate, \n  className = \"\" \n}: DesignStyleSelectorProps) {\n  const [newLink, setNewLink] = useState(\"\");\n\n  const selectStyle = (styleId: string) => {\n    onPreferencesUpdate({\n      ...preferences,\n      selectedStyle: styleId\n    });\n    console.log('Design style selected:', styleId);\n  };\n\n  const updateColor = (colorType: keyof DesignPreferences, color: string) => {\n    onPreferencesUpdate({\n      ...preferences,\n      [colorType]: color\n    });\n    console.log(`${colorType} updated:`, color);\n  };\n\n  const addInspirationLink = () => {\n    if (newLink.trim()) {\n      const updatedLinks = [...preferences.inspirationLinks, newLink.trim()];\n      onPreferencesUpdate({\n        ...preferences,\n        inspirationLinks: updatedLinks\n      });\n      setNewLink(\"\");\n      console.log('Inspiration link added:', newLink.trim());\n    }\n  };\n\n  const removeInspirationLink = (index: number) => {\n    const updatedLinks = preferences.inspirationLinks.filter((_, i) => i !== index);\n    onPreferencesUpdate({\n      ...preferences,\n      inspirationLinks: updatedLinks\n    });\n    console.log('Inspiration link removed at index:', index);\n  };\n\n  const updateNotes = (notes: string) => {\n    onPreferencesUpdate({\n      ...preferences,\n      additionalNotes: notes\n    });\n  };\n\n  return (\n    <div className={`space-y-8 ${className}`}>\n      {/* Style Selection */}\n      <div>\n        <h3 className=\"font-semibold text-lg mb-4\">Choose Your Design Style</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {designStyles.map((style) => {\n            const isSelected = preferences.selectedStyle === style.id;\n            \n            return (\n              <Card\n                key={style.id}\n                className={`p-6 cursor-pointer transition-all hover-elevate ${\n                  isSelected \n                    ? \"ring-2 ring-primary bg-primary/5\" \n                    : \"hover:shadow-md\"\n                }`}\n                onClick={() => selectStyle(style.id)}\n                data-testid={`card-design-style-${style.id}`}\n              >\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-lg\">{style.name}</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    {style.description}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {style.characteristics.map((characteristic) => (\n                      <Badge \n                        key={characteristic} \n                        variant=\"secondary\" \n                        className=\"text-xs\"\n                      >\n                        {characteristic}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Font Selection */}\n      <div>\n        <h3 className=\"font-semibold text-lg mb-4\">Choose Your Font</h3>\n        <p className=\"text-sm text-muted-foreground mb-6\">\n          Select a preferred font for your website's typography\n        </p>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[\n            { value: \"Inter\", label: \"Inter\", preview: \"Clean & Modern\" },\n            { value: \"Roboto\", label: \"Roboto\", preview: \"Google's Standard\" },\n            { value: \"Open Sans\", label: \"Open Sans\", preview: \"Friendly & Readable\" },\n            { value: \"Lato\", label: \"Lato\", preview: \"Professional\" },\n            { value: \"Montserrat\", label: \"Montserrat\", preview: \"Urban & Stylish\" },\n            { value: \"Poppins\", label: \"Poppins\", preview: \"Rounded & Friendly\" },\n            { value: \"Source Sans Pro\", label: \"Source Sans Pro\", preview: \"Clean Sans-serif\" },\n            { value: \"Nunito\", label: \"Nunito\", preview: \"Warm & Inviting\" },\n            { value: \"Playfair Display\", label: \"Playfair Display\", preview: \"Elegant Serif\" },\n            { value: \"Merriweather\", label: \"Merriweather\", preview: \"Readable Serif\" },\n            { value: \"Oswald\", label: \"Oswald\", preview: \"Bold & Modern\" },\n            { value: \"Raleway\", label: \"Raleway\", preview: \"Sophisticated\" }\n          ].map((font) => (\n            <Card\n              key={font.value}\n              className={`p-4 cursor-pointer transition-all hover-elevate ${\n                preferences.preferredFont === font.value\n                  ? \"ring-2 ring-primary bg-primary/5\" \n                  : \"hover:shadow-md\"\n              }`}\n              onClick={() => {\n                const updatedPreferences = { ...preferences, preferredFont: font.value };\n                onPreferencesUpdate(updatedPreferences);\n              }}\n              data-testid={`card-font-${font.value.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-base\" style={{ fontFamily: font.value }}>{font.label}</h4>\n                <p className=\"text-sm text-muted-foreground\" style={{ fontFamily: font.value }}>\n                  {font.preview}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Sample: The quick brown fox jumps\n                </p>\n              </div>\n            </Card>\n          ))}\n        </div>\n        \n        {/* Custom Font Input */}\n        <div className=\"mt-6\">\n          <Label htmlFor=\"custom-font\" className=\"text-sm font-medium\">Or Enter Custom Font Name</Label>\n          <p className=\"text-xs text-muted-foreground mb-3\">\n            Enter the name of any Google Font or web-safe font family\n          </p>\n          <Input\n            id=\"custom-font\"\n            placeholder=\"e.g., Helvetica, Arial, Times New Roman...\"\n            value={preferences.preferredFont && !['Inter', 'Roboto', 'Open Sans', 'Lato', 'Montserrat', 'Poppins', 'Source Sans Pro', 'Nunito', 'Playfair Display', 'Merriweather', 'Oswald', 'Raleway'].includes(preferences.preferredFont) ? preferences.preferredFont : ''}\n            onChange={(e) => {\n              const customFont = e.target.value;\n              const updatedPreferences = { ...preferences, preferredFont: customFont };\n              onPreferencesUpdate(updatedPreferences);\n            }}\n            className=\"max-w-md\"\n            data-testid=\"input-custom-font\"\n          />\n        </div>\n      </div>\n\n      {/* Color Selection */}\n      <div>\n        <h3 className=\"font-semibold text-lg mb-4\">Choose Your Colors</h3>\n        <p className=\"text-sm text-muted-foreground mb-6\">\n          Select custom colors for your website's color palette\n        </p>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"primary-color\" className=\"text-sm font-medium\">Primary Color</Label>\n            <div className=\"flex items-center space-x-3\">\n              <input\n                id=\"primary-color\"\n                type=\"color\"\n                value={preferences.primaryColor || \"#3B82F6\"}\n                onChange={(e) => updateColor('primaryColor', e.target.value)}\n                className=\"w-12 h-12 rounded-md border-2 border-border cursor-pointer\"\n                data-testid=\"input-primary-color\"\n              />\n              <Input\n                value={preferences.primaryColor || \"#3B82F6\"}\n                onChange={(e) => updateColor('primaryColor', e.target.value)}\n                placeholder=\"#3B82F6\"\n                className=\"flex-1 font-mono text-sm\"\n                data-testid=\"input-primary-color-text\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"secondary-color\" className=\"text-sm font-medium\">Secondary Color</Label>\n            <div className=\"flex items-center space-x-3\">\n              <input\n                id=\"secondary-color\"\n                type=\"color\"\n                value={preferences.secondaryColor || \"#1E40AF\"}\n                onChange={(e) => updateColor('secondaryColor', e.target.value)}\n                className=\"w-12 h-12 rounded-md border-2 border-border cursor-pointer\"\n                data-testid=\"input-secondary-color\"\n              />\n              <Input\n                value={preferences.secondaryColor || \"#1E40AF\"}\n                onChange={(e) => updateColor('secondaryColor', e.target.value)}\n                placeholder=\"#1E40AF\"\n                className=\"flex-1 font-mono text-sm\"\n                data-testid=\"input-secondary-color-text\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"accent-color\" className=\"text-sm font-medium\">Accent Color</Label>\n            <div className=\"flex items-center space-x-3\">\n              <input\n                id=\"accent-color\"\n                type=\"color\"\n                value={preferences.accentColor || \"#60A5FA\"}\n                onChange={(e) => updateColor('accentColor', e.target.value)}\n                className=\"w-12 h-12 rounded-md border-2 border-border cursor-pointer\"\n                data-testid=\"input-accent-color\"\n              />\n              <Input\n                value={preferences.accentColor || \"#60A5FA\"}\n                onChange={(e) => updateColor('accentColor', e.target.value)}\n                placeholder=\"#60A5FA\"\n                className=\"flex-1 font-mono text-sm\"\n                data-testid=\"input-accent-color-text\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"background-color\" className=\"text-sm font-medium\">Background Color</Label>\n            <div className=\"flex items-center space-x-3\">\n              <input\n                id=\"background-color\"\n                type=\"color\"\n                value={preferences.backgroundColor || \"#FFFFFF\"}\n                onChange={(e) => updateColor('backgroundColor', e.target.value)}\n                className=\"w-12 h-12 rounded-md border-2 border-border cursor-pointer\"\n                data-testid=\"input-background-color\"\n              />\n              <Input\n                value={preferences.backgroundColor || \"#FFFFFF\"}\n                onChange={(e) => updateColor('backgroundColor', e.target.value)}\n                placeholder=\"#FFFFFF\"\n                className=\"flex-1 font-mono text-sm\"\n                data-testid=\"input-background-color-text\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"text-color\" className=\"text-sm font-medium\">Text Color</Label>\n            <div className=\"flex items-center space-x-3\">\n              <input\n                id=\"text-color\"\n                type=\"color\"\n                value={preferences.textColor || \"#1F2937\"}\n                onChange={(e) => updateColor('textColor', e.target.value)}\n                className=\"w-12 h-12 rounded-md border-2 border-border cursor-pointer\"\n                data-testid=\"input-text-color\"\n              />\n              <Input\n                value={preferences.textColor || \"#1F2937\"}\n                onChange={(e) => updateColor('textColor', e.target.value)}\n                placeholder=\"#1F2937\"\n                className=\"flex-1 font-mono text-sm\"\n                data-testid=\"input-text-color-text\"\n              />\n            </div>\n          </div>\n        </div>\n        \n        {/* Color Preview */}\n        <div className=\"mt-6\">\n          <Label className=\"text-sm font-medium mb-3 block\">Color Preview</Label>\n          <div className=\"flex gap-3 p-4 bg-muted/50 rounded-lg\">\n            <div \n              className=\"w-16 h-16 rounded-md border-2 border-border flex items-center justify-center text-xs font-medium\"\n              style={{ \n                backgroundColor: preferences.primaryColor || \"#3B82F6\",\n                color: preferences.textColor || \"#1F2937\"\n              }}\n            >\n              Primary\n            </div>\n            <div \n              className=\"w-16 h-16 rounded-md border-2 border-border flex items-center justify-center text-xs font-medium\"\n              style={{ \n                backgroundColor: preferences.secondaryColor || \"#1E40AF\",\n                color: preferences.textColor || \"#1F2937\"\n              }}\n            >\n              Secondary\n            </div>\n            <div \n              className=\"w-16 h-16 rounded-md border-2 border-border flex items-center justify-center text-xs font-medium\"\n              style={{ \n                backgroundColor: preferences.accentColor || \"#60A5FA\",\n                color: preferences.textColor || \"#1F2937\"\n              }}\n            >\n              Accent\n            </div>\n            <div \n              className=\"w-16 h-16 rounded-md border-2 border-border flex items-center justify-center text-xs font-medium\"\n              style={{ \n                backgroundColor: preferences.backgroundColor || \"#FFFFFF\",\n                color: preferences.textColor || \"#1F2937\"\n              }}\n            >\n              Background\n            </div>\n            <div \n              className=\"w-16 h-16 rounded-md border-2 border-border flex items-center justify-center text-xs font-medium\"\n              style={{ \n                backgroundColor: preferences.textColor || \"#1F2937\",\n                color: preferences.backgroundColor || \"#FFFFFF\"\n              }}\n            >\n              Text\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Inspiration Links */}\n      <div>\n        <Label className=\"text-lg font-semibold\">Inspiration Links</Label>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Share websites you like to help us understand your visual preferences\n        </p>\n        \n        <div className=\"space-y-3\">\n          {preferences.inspirationLinks.map((link, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              <Input \n                value={link} \n                readOnly \n                className=\"flex-1\"\n                data-testid={`text-inspiration-link-${index}`}\n              />\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => window.open(link, '_blank')}\n                data-testid={`button-open-link-${index}`}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeInspirationLink(index)}\n                data-testid={`button-remove-link-${index}`}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          ))}\n          \n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"https://example.com\"\n              value={newLink}\n              onChange={(e) => setNewLink(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && addInspirationLink()}\n              data-testid=\"input-new-inspiration-link\"\n            />\n            <Button\n              onClick={addInspirationLink}\n              disabled={!newLink.trim()}\n              data-testid=\"button-add-inspiration-link\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Notes */}\n      <div>\n        <Label htmlFor=\"notes\" className=\"text-lg font-semibold\">Additional Design Notes</Label>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Any specific design preferences, colors, or requirements we should know about?\n        </p>\n        <Textarea\n          id=\"notes\"\n          placeholder=\"e.g., I prefer blue and green colors, need to match our existing brand guidelines, want a mobile-first approach...\"\n          value={preferences.additionalNotes}\n          onChange={(e) => updateNotes(e.target.value)}\n          rows={4}\n          data-testid=\"textarea-design-notes\"\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":18546},"client/src/components/FileUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Upload, X, FileImage } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface FileUploadProps {\n  onFileSelect?: (file: File) => void;\n  onFileRemove?: () => void;\n  onFilesSelect?: (files: File[]) => void;\n  onFileRemoveAt?: (index: number) => void;\n  acceptedTypes?: string;\n  maxSize?: number; // in MB\n  currentFile?: File | null;\n  currentFiles?: File[];\n  placeholder?: string;\n  className?: string;\n  multiple?: boolean;\n}\n\nexport default function FileUpload({\n  onFileSelect,\n  onFileRemove,\n  onFilesSelect,\n  onFileRemoveAt,\n  acceptedTypes = \"image/*\",\n  maxSize = 10,\n  currentFile,\n  currentFiles,\n  placeholder = \"Drop your file here or click to browse\",\n  className = \"\",\n  multiple = false\n}: FileUploadProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files) {\n      if (multiple) {\n        const files = Array.from(e.dataTransfer.files);\n        handleMultipleFileSelect(files);\n      } else if (e.dataTransfer.files[0]) {\n        handleFileSelect(e.dataTransfer.files[0]);\n      }\n    }\n  };\n\n  const handleFileSelect = (file: File) => {\n    if (file.size > maxSize * 1024 * 1024) {\n      console.log(`File too large. Maximum size is ${maxSize}MB`);\n      return;\n    }\n    if (onFileSelect) {\n      onFileSelect(file);\n    }\n  };\n\n  const handleMultipleFileSelect = (files: File[]) => {\n    const validFiles = files.filter(file => {\n      if (file.size > maxSize * 1024 * 1024) {\n        console.log(`File ${file.name} too large. Maximum size is ${maxSize}MB`);\n        return false;\n      }\n      return true;\n    });\n    \n    if (onFilesSelect && validFiles.length > 0) {\n      onFilesSelect(validFiles);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      if (multiple) {\n        const files = Array.from(e.target.files);\n        handleMultipleFileSelect(files);\n      } else if (e.target.files[0]) {\n        handleFileSelect(e.target.files[0]);\n      }\n    }\n  };\n\n  const openFileDialog = () => {\n    // Reset input value to allow re-selecting the same files\n    if (inputRef.current) {\n      inputRef.current.value = \"\";\n    }\n    inputRef.current?.click();\n  };\n\n  // Render multiple files mode\n  if (multiple && currentFiles && currentFiles.length > 0) {\n    return (\n      <div className={`space-y-3 ${className}`}>\n        {currentFiles.map((file, index) => (\n          <Card key={`${file.name}-${index}`} className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <FileImage className=\"w-8 h-8 text-primary\" />\n                <div>\n                  <p className=\"font-medium\">{file.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {(file.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onFileRemoveAt && onFileRemoveAt(index);\n                }}\n                data-testid={`button-remove-file-${index}`}\n                aria-label={`Remove ${file.name}`}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </Card>\n        ))}\n        {/* Add more files button */}\n        <Card\n          className=\"relative border-2 border-dashed transition-colors hover-elevate border-border hover:border-primary/50 cursor-pointer\"\n          onClick={openFileDialog}\n        >\n          <div className=\"p-4 text-center\" data-testid=\"button-add-more-files\">\n            <Upload className=\"w-6 h-6 mx-auto mb-2 text-muted-foreground\" />\n            <p className=\"text-sm font-medium\">Add More Files</p>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  // Render single file mode\n  if (!multiple && currentFile) {\n    return (\n      <Card className={`p-4 ${className}`}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <FileImage className=\"w-8 h-8 text-primary\" />\n            <div>\n              <p className=\"font-medium\">{currentFile.name}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {(currentFile.size / 1024 / 1024).toFixed(2)} MB\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onFileRemove && onFileRemove();\n            }}\n            data-testid=\"button-remove-file\"\n            aria-label={`Remove ${currentFile.name}`}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <Card\n        className={`relative border-2 border-dashed transition-colors hover-elevate ${\n          dragActive\n            ? \"border-primary bg-primary/5\"\n            : \"border-border hover:border-primary/50\"\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        <div\n          className=\"p-8 text-center cursor-pointer\"\n          onClick={openFileDialog}\n          data-testid=\"button-upload-file\"\n        >\n          <Upload className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n          <p className=\"text-lg font-medium mb-2\">{placeholder}</p>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Files up to {maxSize}MB\n          </p>\n          <Button variant=\"outline\">\n            Choose File\n          </Button>\n        </div>\n        <input\n          ref={inputRef}\n          type=\"file\"\n          className=\"hidden\"\n          accept={acceptedTypes}\n          multiple={multiple}\n          onChange={handleInputChange}\n        />\n      </Card>\n    </div>\n  );\n}","size_bytes":6585},"client/src/components/LandingPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Sparkles, \n  CheckCircle, \n  Clock, \n  Users, \n  Zap,\n  FileText,\n  Palette,\n  Globe\n} from \"lucide-react\";\n\ninterface LandingPageProps {\n  onGetStarted: () => void;\n  onLogin: () => void;\n  className?: string;\n}\n\nexport default function LandingPage({ onGetStarted, onLogin, className = \"\" }: LandingPageProps) {\n  const features = [\n    {\n      icon: Sparkles,\n      title: \"AI-Powered Assistance\",\n      description: \"Get intelligent suggestions for content, design, and structure tailored to your business.\"\n    },\n    {\n      icon: Clock,\n      title: \"15-Minute Process\",\n      description: \"Complete the entire onboarding in just 15-20 minutes with our guided wizard.\"\n    },\n    {\n      icon: FileText,\n      title: \"Complete Creative Brief\",\n      description: \"Generate a comprehensive creative brief that covers all aspects of your website project.\"\n    },\n    {\n      icon: CheckCircle,\n      title: \"Professional Results\",\n      description: \"Ensure clear communication and expectations with our structured approach.\"\n    }\n  ];\n\n  const steps = [\n    {\n      number: 1,\n      icon: Users,\n      title: \"Business Identity\",\n      description: \"Tell us about your business, goals, and target audience.\"\n    },\n    {\n      number: 2,\n      icon: Palette,\n      title: \"Brand & Design\",\n      description: \"Upload your logo and share your design preferences.\"\n    },\n    {\n      number: 3,\n      icon: Globe,\n      title: \"Website Strategy\",\n      description: \"Define your site structure, content, and functionality needs.\"\n    },\n    {\n      number: 4,\n      icon: FileText,\n      title: \"Creative Brief\",\n      description: \"Review and export your complete project brief.\"\n    }\n  ];\n\n  return (\n    <div className={`min-h-screen bg-background ${className}`}>\n      {/* Header */}\n      <header className=\"border-b\">\n        <div className=\"max-w-6xl mx-auto px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Zap className=\"w-8 h-8 text-primary\" />\n            <span className=\"text-xl font-bold\">WebStudio Pro</span>\n          </div>\n          <Button variant=\"outline\" onClick={onLogin} data-testid=\"button-login\">\n            Client Login\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Badge variant=\"secondary\" className=\"mb-6\">\n            <Sparkles className=\"w-4 h-4 mr-2\" />\n            AI-Powered Client Onboarding\n          </Badge>\n          \n          <h1 className=\"text-5xl font-bold mb-6 leading-tight\">\n            ✨ Welcome to Your Website Blueprint ✨\n          </h1>\n          \n          <p className=\"text-xl text-muted-foreground mb-6 max-w-3xl mx-auto leading-relaxed\">\n            In just 15–20 minutes, we'll walk you through a fun, interactive experience to map out your entire website — from brand style and colors to site structure, copy, and images.\n          </p>\n          \n          <p className=\"text-lg text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed\">\n            By the end, you'll walk away with a professional wireframe and launch-ready roadmap that gives our team everything we need to design and build your dream site.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={onGetStarted} \n              className=\"gap-2\"\n              data-testid=\"button-get-started\"\n            >\n              🚀 Start Building My Website Blueprint\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              onClick={() => console.log('Learn more clicked')}\n              data-testid=\"button-learn-more\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-6 bg-muted/50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Why Choose Our Onboarding Process?</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              We've designed a streamlined process that captures everything we need to create your perfect website.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {features.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate\">\n                  <CardContent className=\"pt-6 text-center\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                      <IconComponent className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                      {feature.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"max-w-5xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Our Simple 4-Step Process</h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Follow our guided wizard to create a comprehensive creative brief in minutes.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {steps.map((step, index) => {\n              const IconComponent = step.icon;\n              return (\n                <div key={index} className=\"text-center\">\n                  <div className=\"relative mb-4\">\n                    <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold text-lg mx-auto mb-2\">\n                      {step.number}\n                    </div>\n                    <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <IconComponent className=\"w-4 h-4 text-primary\" />\n                    </div>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">{step.title}</h3>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    {step.description}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-6 bg-primary/5\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to Get Started?</h2>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join hundreds of businesses who have streamlined their web design process with our professional onboarding portal.\n          </p>\n          \n          <Button \n            size=\"lg\" \n            onClick={onGetStarted} \n            className=\"gap-2\"\n            data-testid=\"button-cta-start\"\n          >\n            🚀 Start Building My Website Blueprint\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8 px-6\">\n        <div className=\"max-w-6xl mx-auto text-center text-muted-foreground\">\n          <p>&copy; 2024 WebStudio Pro. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":8031},"client/src/components/OnboardingWizard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ArrowRight, Sparkles, CheckCircle, Download, Upload, Palette, Check, Wand2, Loader2, RefreshCw, Plus } from \"lucide-react\";\nimport ProgressBar, { type Step } from \"./ProgressBar\";\nimport SiteTypeSelector from \"./SiteTypeSelector\";\nimport SitemapBuilder, { type Page } from \"./SitemapBuilder\";\nimport DesignStyleSelector, { type DesignPreferences } from \"./DesignStyleSelector\";\nimport CreativeBriefReview, { type CreativeBriefData } from \"./CreativeBriefReview\";\nimport FileUpload from \"./FileUpload\";\nimport { \n  type LogoPreferences, \n  type GeneratedLogo, \n  type LogoSelection, \n  logoPreferencesSchema,\n  type ContentPreferences,\n  contentPreferencesSchema,\n  type GeneratedContent,\n  type ImageRequirements,\n  imageRequirementsSchema,\n  type CrmIntegration,\n  crmIntegrationSchema,\n  type UserAccountsMembership,\n  userAccountsMembershipSchema\n} from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { ProjectSubmissionRow, InsertProjectSubmission } from \"@shared/schema\";\n\ninterface OnboardingWizardProps {\n  className?: string;\n}\n\nconst steps: Step[] = [\n  { id: 1, title: \"Welcome\", completed: false },\n  { id: 2, title: \"Business\", completed: false },\n  { id: 3, title: \"Branding\", completed: false },\n  { id: 4, title: \"Purpose\", completed: false },\n  { id: 5, title: \"Sitemap\", completed: false },\n  { id: 6, title: \"Copy\", completed: false },\n  { id: 7, title: \"Integrations\", completed: false },\n  { id: 8, title: \"User Accounts & Membership\", completed: false },\n  { id: 9, title: \"Media\", completed: false },\n  { id: 10, title: \"Design\", completed: false },\n  { id: 11, title: \"Review\", completed: false },\n];\n\nconst initialPages: Page[] = [\n  { id: '1', name: 'Home', path: '/', required: true },\n  { id: '4', name: 'Contact', path: '/contact', required: true }\n];\n\nconst suggestedPages: Page[] = [\n  { id: 'about', name: 'About', path: '/about', required: false },\n  { id: 'services', name: 'Services', path: '/services', required: false },\n  { id: 'portfolio', name: 'Portfolio', path: '/portfolio', required: false },\n  { id: 'testimonials', name: 'Testimonials', path: '/testimonials', required: false },\n  { id: 'blog', name: 'Blog', path: '/blog', required: false },\n  { id: 'faq', name: 'FAQ', path: '/faq', required: false },\n  { id: 'team', name: 'Team', path: '/team', required: false },\n  { id: 'pricing', name: 'Pricing', path: '/pricing', required: false }\n];\n\nconst logoTypes = [\n  \"wordmark\", \"lettermark\", \"pictorial\", \"abstract\", \"mascot\", \"combination\", \"emblem\"\n];\n\nconst logoStyles = [\n  \"modern\", \"classic\", \"minimalist\", \"vintage\", \"playful\", \"elegant\", \"bold\", \"organic\", \n  \"geometric\", \"hand-drawn\", \"tech\", \"luxury\"\n];\n\ninterface LogoGenerationFormProps {\n  businessName: string;\n  businessDescription: string;\n  onLogoGenerated: (logos: GeneratedLogo[]) => void;\n  onCancel: () => void;\n  generatedLogos: GeneratedLogo[];\n  selectedLogo: GeneratedLogo | null;\n  onLogoSelect: (logo: GeneratedLogo, decision: 'final' | 'direction') => void;\n  onPreferencesChange: (preferences: LogoPreferences) => void;\n}\n\nfunction LogoGenerationForm({ businessName, businessDescription, onLogoGenerated, onCancel, generatedLogos, selectedLogo, onLogoSelect, onPreferencesChange }: LogoGenerationFormProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<LogoPreferences>({\n    resolver: zodResolver(logoPreferencesSchema),\n    defaultValues: {\n      types: [],\n      styles: [],\n      colors: \"\",\n      inspirations: [],\n      useReference: false\n    }\n  });\n\n  // Watch form values and update parent component\n  const formValues = form.watch();\n  useEffect(() => {\n    onPreferencesChange(formValues);\n  }, [formValues, onPreferencesChange]);\n\n  const generateLogosMutation = useMutation({\n    mutationFn: async (data: LogoPreferences) => {\n      console.log('Starting logo generation with AI...');\n      \n      const response = await apiRequest('POST', '/api/logo/generate', {\n        businessName: businessName || undefined,\n        description: businessDescription,\n        preferences: data\n      });\n      \n      const result = await response.json();\n      return result;\n    },\n    onSuccess: (data) => {\n      onLogoGenerated(data.logos);\n      toast({\n        title: \"Logos Generated!\",\n        description: `Created ${data.logos.length} logo variations for your review.`\n      });\n    },\n    onError: (error: Error) => {\n      console.error('Logo generation failed:', error);\n      toast({\n        title: \"Generation Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: LogoPreferences) => {\n    generateLogosMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-medium\">Generate Logo Ideas</h3>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          onClick={onCancel}\n          data-testid=\"button-change-logo-path\"\n        >\n          Change Option\n        </Button>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Logo Types */}\n          <FormField\n            control={form.control}\n            name=\"types\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Logo Types <span className=\"text-destructive\">*</span></FormLabel>\n                <FormDescription>Select at least one logo type that fits your brand</FormDescription>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {logoTypes.map((type) => (\n                    <div key={type} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        checked={field.value?.includes(type as any) || false}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            field.onChange([...(field.value || []), type]);\n                          } else {\n                            field.onChange(field.value?.filter((t) => t !== type) || []);\n                          }\n                        }}\n                        data-testid={`checkbox-logo-type-${type}`}\n                      />\n                      <label className=\"text-sm capitalize\">{type.replace('-', ' ')}</label>\n                    </div>\n                  ))}\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Logo Styles */}\n          <FormField\n            control={form.control}\n            name=\"styles\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Logo Styles <span className=\"text-destructive\">*</span></FormLabel>\n                <FormDescription>Select at least one style that matches your vision</FormDescription>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  {logoStyles.map((style) => (\n                    <div key={style} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        checked={field.value?.includes(style as any) || false}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            field.onChange([...(field.value || []), style]);\n                          } else {\n                            field.onChange(field.value?.filter((s) => s !== style) || []);\n                          }\n                        }}\n                        data-testid={`checkbox-logo-style-${style}`}\n                      />\n                      <label className=\"text-sm capitalize\">{style}</label>\n                    </div>\n                  ))}\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Colors */}\n          <FormField\n            control={form.control}\n            name=\"colors\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Color Preferences</FormLabel>\n                <FormDescription>Describe your preferred colors (e.g., \"blue and white\", \"earth tones\", \"vibrant\")</FormDescription>\n                <FormControl>\n                  <Input \n                    placeholder=\"e.g., blue and silver, warm earth tones, monochrome\"\n                    {...field}\n                    data-testid=\"input-logo-colors\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Inspirations */}\n          <FormField\n            control={form.control}\n            name=\"inspirations\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Design Inspirations</FormLabel>\n                <FormDescription>Optional: Any specific concepts, symbols, or ideas for your logo</FormDescription>\n                <FormControl>\n                  <Textarea \n                    placeholder=\"e.g., mountain peaks, circuit boards, handwritten script, vintage badges...\"\n                    className=\"resize-none\"\n                    rows={3}\n                    value={field.value?.join(', ') || ''}\n                    onChange={(e) => {\n                      const inspirations = e.target.value\n                        .split(',')\n                        .map(s => s.trim())\n                        .filter(Boolean);\n                      field.onChange(inspirations);\n                    }}\n                    data-testid=\"input-logo-inspirations\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Generate Button */}\n          <div className=\"flex gap-3\">\n            <Button \n              type=\"submit\" \n              disabled={generateLogosMutation.isPending}\n              data-testid=\"button-generate-logos\"\n            >\n              {generateLogosMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <Wand2 className=\"w-4 h-4 mr-2\" />\n                  Generate Logos\n                </>\n              )}\n            </Button>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onCancel}\n              disabled={generateLogosMutation.isPending}\n              data-testid=\"button-cancel-generation\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </Form>\n\n      {/* Logo Gallery */}\n      {generatedLogos.length > 0 && (\n        <div className=\"space-y-4 mt-8 pt-6 border-t\" data-testid=\"container-generated-logos\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium\">Generated Logo Ideas</h3>\n            <Badge variant=\"secondary\">{generatedLogos.length} Options</Badge>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Select a logo that you'd like to use as your final design or as creative direction.\n          </p>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            {generatedLogos.map((logo) => (\n              <Card \n                key={logo.id} \n                className={`cursor-pointer transition-all hover-elevate ${\n                  selectedLogo?.id === logo.id \n                    ? 'ring-2 ring-primary bg-primary/5' \n                    : 'hover:shadow-md'\n                }`}\n                data-testid={`card-logo-option-${logo.id}`}\n              >\n                <CardContent className=\"p-3\">\n                  <div className=\"aspect-square rounded-lg overflow-hidden bg-gray-50 mb-3\">\n                    <img \n                      src={logo.dataUrl} \n                      alt=\"Generated logo option\"\n                      className=\"w-full h-full object-contain\"\n                      data-testid={`image-logo-${logo.id}`}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => onLogoSelect(logo, 'final')}\n                        className=\"flex-1\"\n                        data-testid={`button-select-final-${logo.id}`}\n                      >\n                        <Check className=\"w-3 h-3 mr-1\" />\n                        Use This\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => onLogoSelect(logo, 'direction')}\n                        className=\"flex-1\"\n                        data-testid={`button-select-direction-${logo.id}`}\n                      >\n                        <ArrowRight className=\"w-3 h-3 mr-1\" />\n                        Direction\n                      </Button>\n                    </div>\n                    {selectedLogo?.id === logo.id && (\n                      <div className=\"text-xs text-center text-primary font-medium\">\n                        Selected\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          \n          <div className=\"text-center pt-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                // Clear current results to allow new generation\n                onLogoGenerated([]);\n              }}\n              data-testid=\"button-generate-more-logos\"\n            >\n              <Wand2 className=\"w-4 h-4 mr-2\" />\n              Generate More Ideas\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function OnboardingWizard({ className = \"\" }: OnboardingWizardProps) {\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\n  \n  // Debug logging for component lifecycle\n  useEffect(() => {\n    console.log('[DEBUG OnboardingWizard] Component mounted');\n    return () => {\n      console.log('[DEBUG OnboardingWizard] Component unmounted');\n      console.trace('[DEBUG] Unmount stack trace:');\n    };\n  }, []);\n  \n  // Debug logging for currentStep changes\n  useEffect(() => {\n    console.log(`[DEBUG OnboardingWizard] currentStep changed to: ${currentStep}`);\n  }, [currentStep]);\n  \n  // Contact information state\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [contactNumber, setContactNumber] = useState(\"\");\n  \n  // Form data state\n  const [businessName, setBusinessName] = useState(\"\");\n  const [businessDescription, setBusinessDescription] = useState(\"\");\n  const [hasBusinessName, setHasBusinessName] = useState<boolean | null>(null);\n  const [businessNameIdea, setBusinessNameIdea] = useState(\"\");\n  const [generatedNames, setGeneratedNames] = useState<string[]>([]);\n  const [isGeneratingNames, setIsGeneratingNames] = useState(false);\n  const [logoFile, setLogoFile] = useState<File | null>(null);\n  \n  // Logo generation state\n  const [logoPath, setLogoPath] = useState<'upload' | 'generate' | null>(null);\n  const [logoPreferences, setLogoPreferences] = useState<LogoPreferences>({\n    types: [],\n    styles: [],\n    colors: \"\",\n    inspirations: [],\n    useReference: false\n  });\n  const [generatedLogos, setGeneratedLogos] = useState<GeneratedLogo[]>([]);\n  const [isGeneratingLogos, setIsGeneratingLogos] = useState(false);\n  const [selectedLogo, setSelectedLogo] = useState<GeneratedLogo | null>(null);\n  const [logoDecision, setLogoDecision] = useState<'final' | 'direction' | null>(null);\n  \n  // Content generation state\n  const [contentPreferences, setContentPreferences] = useState<ContentPreferences>({\n    style: 'balanced',\n    useVideo: false,\n    tone: 'professional'\n  });\n  const [generatedContent, setGeneratedContent] = useState<GeneratedContent[]>([]);\n  const [isGeneratingContent, setIsGeneratingContent] = useState(false);\n  \n  const [selectedSiteType, setSelectedSiteType] = useState<string>(\"\");\n  const [pages, setPages] = useState<Page[]>(initialPages);\n  const [designPreferences, setDesignPreferences] = useState<DesignPreferences>({\n    selectedStyle: \"\",\n    preferredFont: \"\",\n    primaryColor: \"#3B82F6\",\n    secondaryColor: \"#1E40AF\",\n    accentColor: \"#60A5FA\",\n    backgroundColor: \"#FFFFFF\",\n    textColor: \"#1F2937\",\n    inspirationLinks: [],\n    additionalNotes: \"\"\n  });\n  \n  // Images & Media state\n  const [imageRequirements, setImageRequirements] = useState<ImageRequirements>({\n    logoNeeds: 'need-logo',\n    logoDescription: '',\n    specificImages: [],\n    teamPhotos: false,\n    productPhotos: false,\n    facilityPhotos: false,\n    preferredPhotoStyle: 'professional-corporate',\n    stockPhotoPreference: 'mixed',\n    additionalNotes: ''\n  });\n  const [mediaFiles, setMediaFiles] = useState<File[]>([]);\n  \n  // CRM Integration state\n  const [crmIntegration, setCrmIntegration] = useState<CrmIntegration>({\n    selectedCrms: [],\n    customCrmNames: [],\n    selectedMarketingAutomation: [],\n    customMarketingAutomationNames: [],\n    selectedPaymentGateways: [],\n    customPaymentGatewayNames: [],\n    apiIntegrations: '',\n    selectedAutomationPlatforms: [],\n    selectedEngagementFeatures: [],\n    selectedAdvancedFeatures: [],\n    selectedECommerceFeatures: []\n  });\n\n  // User Accounts & Membership state\n  const [userAccountsMembership, setUserAccountsMembership] = useState<UserAccountsMembership>({\n    registrationLogin: false,\n    userDashboardNeeded: false,\n    userDashboardFeatures: '',\n    predefinedRoles: [],\n    customRoles: [],\n    membershipSubscriptionSystem: false,\n    membershipDetails: ''\n  });\n\n  // Core Website Features state\n  const [coreWebsiteFeatures, setCoreWebsiteFeatures] = useState<string[]>([]);\n\n  // Project submission state\n  const [isProjectSubmitted, setIsProjectSubmitted] = useState(false);\n  const [currentProjectId, setCurrentProjectId] = useState<string | null>(null);\n  const [isSavingProgress, setIsSavingProgress] = useState(false);\n\n  // CRM form setup\n  const crmForm = useForm<CrmIntegration>({\n    resolver: zodResolver(crmIntegrationSchema),\n    defaultValues: crmIntegration\n  });\n\n  const onCrmSubmit = (data: CrmIntegration) => {\n    setCrmIntegration(data);\n  };\n\n  // Project submission mutations\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: InsertProjectSubmission) => {\n      const response = await apiRequest('POST', '/api/projects', data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create project');\n      }\n      return response.json();\n    },\n    onSuccess: (project: ProjectSubmissionRow) => {\n      setCurrentProjectId(project.id);\n      console.log('Project created with ID:', project.id);\n    },\n    onError: (error: Error) => {\n      console.error('Failed to create project:', error);\n      // Don't show toast for create errors - they're expected during early steps\n    }\n  });\n\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertProjectSubmission> }) => {\n      const response = await apiRequest('PUT', `/api/projects/${id}`, data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update project');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      console.log('Project updated successfully');\n    },\n    onError: (error: Error) => {\n      console.error('Failed to update project:', error);\n      // Don't show toast for update errors - they're expected during partial updates\n    }\n  });\n\n  // Helper function to build schema-safe project data\n  const buildProjectData = (): InsertProjectSubmission | null => {\n    // Only create project if we have minimum required data\n    if (!businessName?.trim() || !businessDescription?.trim()) {\n      return null; // Wait until we have basic business info\n    }\n\n    // Build data with proper defaults for required fields\n    return {\n      userId: undefined, // No authentication required for demo\n      fullName: fullName.trim() || undefined,\n      email: email.trim() || undefined,\n      contactNumber: contactNumber.trim() || undefined,\n      businessName: businessName.trim(),\n      businessDescription: businessDescription.trim(),\n      selectedSiteType: selectedSiteType || \"business\", // Default site type\n      pages: pages.length > 0 ? pages : [{ id: \"home\", name: \"Home\", path: \"/\", required: true }, { id: \"contact\", name: \"Contact\", path: \"/contact\", required: true }],\n      logoDecision: logoDecision || undefined,\n      logoFile: logoFile ? 'uploaded_file' : undefined,\n      selectedLogo: selectedLogo || undefined,\n      contentPreferences: {\n        style: contentPreferences.style || \"balanced\",\n        useVideo: contentPreferences.useVideo ?? false,\n        tone: contentPreferences.tone || \"professional\"\n      },\n      generatedContent: generatedContent.length > 0 ? generatedContent : [],\n      crmIntegration: Object.keys(crmIntegration).length > 0 ? crmIntegration : undefined,\n      userAccountsMembership: Object.keys(userAccountsMembership).length > 0 ? userAccountsMembership : undefined,\n      imageRequirements: {\n        logoNeeds: imageRequirements.logoNeeds || \"need-logo\",\n        logoDescription: imageRequirements.logoDescription || undefined,\n        specificImages: imageRequirements.specificImages || undefined,\n        teamPhotos: imageRequirements.teamPhotos ?? false,\n        productPhotos: imageRequirements.productPhotos ?? false,\n        facilityPhotos: imageRequirements.facilityPhotos ?? false,\n        preferredPhotoStyle: imageRequirements.preferredPhotoStyle || undefined,\n        stockPhotoPreference: imageRequirements.stockPhotoPreference || undefined,\n        additionalNotes: imageRequirements.additionalNotes || \"\"\n      },\n      designPreferences: {\n        selectedStyle: designPreferences.selectedStyle || \"modern\",\n        preferredFont: designPreferences.preferredFont || undefined,\n        primaryColor: designPreferences.primaryColor || undefined,\n        secondaryColor: designPreferences.secondaryColor || undefined,\n        accentColor: designPreferences.accentColor || undefined,\n        backgroundColor: designPreferences.backgroundColor || undefined,\n        textColor: designPreferences.textColor || undefined,\n        inspirationLinks: designPreferences.inspirationLinks || [],\n        additionalNotes: designPreferences.additionalNotes || \"\"\n      }\n    };\n  };\n\n  // Helper function to build update data (only changed fields)\n  const buildUpdateData = (): Partial<InsertProjectSubmission> => {\n    const updateData: Partial<InsertProjectSubmission> = {};\n    \n    // Only include fields that have actual values\n    if (fullName?.trim()) updateData.fullName = fullName.trim();\n    if (email?.trim()) updateData.email = email.trim();\n    if (contactNumber?.trim()) updateData.contactNumber = contactNumber.trim();\n    if (businessName?.trim()) updateData.businessName = businessName.trim();\n    if (businessDescription?.trim()) updateData.businessDescription = businessDescription.trim();\n    if (selectedSiteType) updateData.selectedSiteType = selectedSiteType;\n    if (pages.length > 0) updateData.pages = pages;\n    if (logoDecision) updateData.logoDecision = logoDecision;\n    if (logoFile) updateData.logoFile = 'uploaded_file';\n    if (selectedLogo) updateData.selectedLogo = selectedLogo;\n    if (Object.keys(crmIntegration).length > 0) updateData.crmIntegration = crmIntegration;\n    if (Object.keys(userAccountsMembership).length > 0) updateData.userAccountsMembership = userAccountsMembership;\n    \n    // Always update these objects if they have any meaningful content\n    if (contentPreferences.tone || contentPreferences.style || contentPreferences.useVideo !== undefined) {\n      updateData.contentPreferences = contentPreferences;\n    }\n    \n    if (generatedContent.length > 0) {\n      updateData.generatedContent = generatedContent;\n    }\n    \n    if (imageRequirements.logoNeeds || (imageRequirements.specificImages && imageRequirements.specificImages.length > 0) || imageRequirements.additionalNotes) {\n      updateData.imageRequirements = imageRequirements;\n    }\n    \n    if (designPreferences.selectedStyle || designPreferences.preferredFont || designPreferences.primaryColor || designPreferences.inspirationLinks?.length > 0 || designPreferences.additionalNotes) {\n      updateData.designPreferences = {\n        selectedStyle: designPreferences.selectedStyle || \"modern\",\n        preferredFont: designPreferences.preferredFont || undefined,\n        primaryColor: designPreferences.primaryColor || undefined,\n        secondaryColor: designPreferences.secondaryColor || undefined,\n        accentColor: designPreferences.accentColor || undefined,\n        backgroundColor: designPreferences.backgroundColor || undefined,\n        textColor: designPreferences.textColor || undefined,\n        inspirationLinks: designPreferences.inspirationLinks || [],\n        additionalNotes: designPreferences.additionalNotes || \"\"\n      };\n    }\n    \n    return updateData;\n  };\n\n  // Function to save current progress to database\n  const saveProgress = async (stepCompleted: number) => {\n    if (isSavingProgress) return; // Prevent multiple simultaneous saves\n    \n    setIsSavingProgress(true);\n    \n    try {\n      if (currentProjectId) {\n        // Update existing project - only send changed fields\n        const updateData = buildUpdateData();\n        if (Object.keys(updateData).length > 0) {\n          await updateProjectMutation.mutateAsync({ id: currentProjectId, data: updateData });\n        }\n      } else {\n        // Create new project only if we have minimum required data\n        const projectData = buildProjectData();\n        if (projectData) {\n          const result = await createProjectMutation.mutateAsync(projectData);\n          setCurrentProjectId(result.id);\n        }\n      }\n    } catch (error) {\n      // Only log error, don't show toast for expected validation issues\n      console.error('Error saving progress:', error);\n    } finally {\n      setIsSavingProgress(false);\n    }\n  };\n\n  // User Accounts & Membership form setup\n  const membershipForm = useForm<UserAccountsMembership>({\n    resolver: zodResolver(userAccountsMembershipSchema),\n    defaultValues: userAccountsMembership\n  });\n\n  const onMembershipSubmit = (data: UserAccountsMembership) => {\n    setUserAccountsMembership(data);\n  };\n\n  const stepData = steps.map(step => ({\n    ...step,\n    completed: completedSteps.has(step.id)\n  }));\n\n  const isStepComplete = (stepId: number): boolean => {\n    switch (stepId) {\n      case 1: return true; // Welcome step is always complete\n      case 2: return businessDescription.trim() !== \"\" && \n                     businessName.trim() !== \"\" && \n                     hasBusinessName !== null;\n      case 3: return (logoPath === 'upload' && logoFile !== null) || \n                     (logoPath === 'generate' && logoPreferences.types.length > 0 && logoPreferences.styles.length > 0);\n      case 4: return selectedSiteType !== \"\";\n      case 5: return pages.length >= 2;\n      case 6: return generatedContent.length > 0; // Copy step - require content generation\n      case 7: return Boolean((crmIntegration.selectedCrms.length > 0 || crmIntegration.selectedMarketingAutomation.length > 0 || crmIntegration.selectedPaymentGateways.length > 0 || (crmIntegration.apiIntegrations && crmIntegration.apiIntegrations.trim().length > 0) || crmIntegration.selectedAutomationPlatforms.length > 0 || crmIntegration.selectedEngagementFeatures.length > 0 || crmIntegration.selectedECommerceFeatures.length > 0) && \n        (!crmIntegration.selectedCrms.includes('custom') || (crmIntegration.customCrmNames && crmIntegration.customCrmNames.length > 0 && crmIntegration.customCrmNames.some(name => name?.trim()))) &&\n        (!crmIntegration.selectedMarketingAutomation.includes('custom') || (crmIntegration.customMarketingAutomationNames && crmIntegration.customMarketingAutomationNames.length > 0 && crmIntegration.customMarketingAutomationNames.some(name => name?.trim()))) &&\n        (!crmIntegration.selectedPaymentGateways.includes('custom') || (crmIntegration.customPaymentGatewayNames && crmIntegration.customPaymentGatewayNames.length > 0 && crmIntegration.customPaymentGatewayNames.some(name => name?.trim())))); // Integrations step\n      case 8: return membershipForm.formState.isValid; // User Accounts & Membership step\n      case 9: return true; // Media step - optional\n      case 10: return designPreferences.selectedStyle !== \"\";\n      case 11: return true; // Review step\n      default: return false;\n    }\n  };\n\n  const canProceed = isStepComplete(currentStep);\n\n  const nextStep = async () => {\n    if (canProceed && currentStep < steps.length) {\n      setCompletedSteps(prev => new Set(Array.from(prev).concat(currentStep)));\n      \n      // Save progress to database\n      await saveProgress(currentStep);\n      \n      setCurrentStep(prev => prev + 1);\n      console.log('Proceeding to step:', currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1);\n      console.log('Going back to step:', currentStep - 1);\n    }\n  };\n\n  const goToStep = (stepId: number) => {\n    if (stepId <= currentStep || completedSteps.has(stepId - 1)) {\n      setCurrentStep(stepId);\n      console.log('Jumping to step:', stepId);\n    }\n  };\n\n  const generateBusinessNames = async () => {\n    // Need either business description or business name idea\n    if (!businessDescription.trim() && !businessNameIdea.trim()) return;\n    \n    setIsGeneratingNames(true);\n    try {\n      const response = await fetch('/api/generate-names', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          description: businessDescription.trim() || undefined,\n          nameIdea: businessNameIdea.trim() || undefined\n        })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setGeneratedNames(data.names || []);\n      } else {\n        console.error('Failed to generate business names');\n        // Fallback names based on what input we have\n        const baseName = businessNameIdea.trim() || businessDescription.split(' ')[0] || \"Business\";\n        setGeneratedNames([\n          `${baseName} Co`,\n          `${baseName} Solutions`,\n          `${baseName} Studio`,\n          `${baseName} Group`,\n          `${baseName} Pro`\n        ]);\n      }\n    } catch (error) {\n      console.error('Error generating business names:', error);\n      // Fallback names\n      const baseName = businessNameIdea.trim() || businessDescription.split(' ')[0] || \"Business\";\n      setGeneratedNames([\n        `${baseName} Co`,\n        `${baseName} Solutions`, \n        `${baseName} Studio`,\n        `${baseName} Group`,\n        `${baseName} Pro`\n      ]);\n    } finally {\n      setIsGeneratingNames(false);\n    }\n  };\n\n  const generateContent = async () => {\n    if (isGeneratingContent) return;\n    \n    setIsGeneratingContent(true);\n    console.log('Generating AI content for pages...');\n    \n    try {\n      // Collect page directions from existing content\n      const pageDirections = generatedContent\n        .filter(content => content.pageDirection && content.pageDirection.trim() !== '')\n        .map(content => ({\n          pageId: content.pageId,\n          direction: content.pageDirection!\n        }));\n\n      const response = await apiRequest('POST', '/api/content/generate', {\n        businessName,\n        businessDescription,\n        siteType: selectedSiteType,\n        pages: pages.map(p => ({ id: p.id, name: p.name, path: p.path })),\n        preferences: contentPreferences,\n        pageDirections: pageDirections\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to generate content');\n      }\n      \n      const data = await response.json() as { content: GeneratedContent[] };\n      setGeneratedContent(data.content);\n      \n      toast({\n        title: \"Content Generated!\",\n        description: `Created content for ${data.content.length} pages.`\n      });\n    } catch (error: any) {\n      console.error('Content generation error:', error);\n      toast({\n        title: \"Generation Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGeneratingContent(false);\n    }\n  };\n\n  // Function to update page direction\n  const updatePageDirection = (pageId: string, direction: string) => {\n    setGeneratedContent(prevContent => {\n      const existingIndex = prevContent.findIndex(content => content.pageId === pageId);\n      \n      if (existingIndex >= 0) {\n        // Update existing entry\n        return prevContent.map(content => \n          content.pageId === pageId \n            ? { ...content, pageDirection: direction }\n            : content\n        );\n      } else {\n        // Create new entry for the page direction\n        const page = pages.find(p => p.id === pageId);\n        if (page) {\n          return [...prevContent, {\n            pageId: pageId,\n            pageName: page.name,\n            content: '',\n            pageDirection: direction,\n            suggestions: [],\n            hasEdits: false\n          }];\n        }\n        return prevContent;\n      }\n    });\n  };\n\n  // Function to update page content (editing)\n  const updatePageContent = (pageId: string, newContent: string) => {\n    setGeneratedContent(prevContent => \n      prevContent.map(content => \n        content.pageId === pageId \n          ? { \n              ...content, \n              editedContent: newContent,\n              hasEdits: newContent !== content.content\n            }\n          : content\n      )\n    );\n  };\n\n  // Function to regenerate content for a specific page\n  const regeneratePageContent = async (page: Page) => {\n    if (isGeneratingContent) return;\n    \n    setIsGeneratingContent(true);\n    console.log(`Regenerating content for ${page.name} page...`);\n    \n    try {\n      const pageContent = generatedContent.find(content => content.pageId === page.id);\n      const customDirection = pageContent?.pageDirection || '';\n      \n      const response = await apiRequest('POST', '/api/content/regenerate', {\n        businessName,\n        businessDescription,\n        siteType: selectedSiteType,\n        page: { id: page.id, name: page.name, path: page.path },\n        preferences: contentPreferences,\n        pageDirection: customDirection\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to regenerate content');\n      }\n      \n      const data = await response.json() as { content: GeneratedContent };\n      \n      // Update the specific page content\n      setGeneratedContent(prevContent => \n        prevContent.map(content => \n          content.pageId === page.id \n            ? { \n                ...data.content, \n                pageDirection: customDirection,\n                hasEdits: false // Reset edit flag for regenerated content\n              }\n            : content\n        )\n      );\n      \n      toast({\n        title: \"Content Regenerated!\",\n        description: `Updated content for ${page.name} page.`\n      });\n    } catch (error: any) {\n      console.error('Content regeneration error:', error);\n      toast({\n        title: \"Regeneration Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGeneratingContent(false);\n    }\n  };\n\n  const exportPDF = async () => {\n    console.log('Exporting creative brief as PDF...');\n    \n    try {\n      // Import libraries dynamically\n      const { jsPDF } = await import('jspdf');\n      const JSZip = (await import('jszip')).default;\n        const doc = new jsPDF();\n        let yPosition = 20;\n        const lineHeight = 8;\n        const pageWidth = 210;\n        const margin = 20;\n        const maxWidth = pageWidth - (margin * 2);\n\n        // Title\n        doc.setFontSize(20);\n        doc.setFont('helvetica', 'bold');\n        doc.text('Creative Brief', margin, yPosition);\n        yPosition += lineHeight * 2;\n\n        // Business Information\n        doc.setFontSize(16);\n        doc.setFont('helvetica', 'bold');\n        doc.text('Business Information', margin, yPosition);\n        yPosition += lineHeight;\n        \n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'normal');\n        doc.text(`Business Name: ${businessName}`, margin, yPosition);\n        yPosition += lineHeight;\n        \n        // Split long description text\n        const descriptionLines = doc.splitTextToSize(`Description: ${businessDescription}`, maxWidth);\n        doc.text(descriptionLines, margin, yPosition);\n        yPosition += lineHeight * descriptionLines.length + 5;\n\n        // Website Type & Pages\n        doc.setFontSize(16);\n        doc.setFont('helvetica', 'bold');\n        doc.text('Website Information', margin, yPosition);\n        yPosition += lineHeight;\n        \n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'normal');\n        doc.text(`Website Type: ${selectedSiteType}`, margin, yPosition);\n        yPosition += lineHeight + 3;\n        \n        doc.text('Pages:', margin, yPosition);\n        yPosition += lineHeight;\n        pages.forEach(page => {\n          doc.text(`• ${page.name} (${page.path})`, margin + 5, yPosition);\n          yPosition += lineHeight;\n        });\n        yPosition += 5;\n\n        // Logo Information\n        if (logoDecision || logoFile) {\n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Branding & Logo', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n          \n          // Try to embed the logo image\n          try {\n            if (logoFile && logoFile instanceof File) {\n              // For uploaded logo files - handle async FileReader\n              const logoDataUrl = await new Promise<string>((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = (e) => {\n                  if (e.target?.result) {\n                    resolve(e.target.result as string);\n                  } else {\n                    reject(new Error('Failed to read file'));\n                  }\n                };\n                reader.onerror = () => reject(new Error('FileReader error'));\n                reader.readAsDataURL(logoFile);\n              });\n              \n              // Detect image format from data URL\n              const imageFormat = logoDataUrl.startsWith('data:image/png') ? 'PNG' : 'JPEG';\n              doc.addImage(logoDataUrl, imageFormat, margin, yPosition, 30, 20);\n              yPosition += 25;\n              doc.text('Logo: Custom logo uploaded', margin, yPosition);\n              yPosition += lineHeight + 5;\n            } else if (selectedLogo && selectedLogo.dataUrl) {\n              // For AI-generated logos\n              const imageFormat = selectedLogo.dataUrl.startsWith('data:image/png') ? 'PNG' : 'JPEG';\n              doc.addImage(selectedLogo.dataUrl, imageFormat, margin, yPosition, 30, 20);\n              yPosition += 25;\n              doc.text('Logo: AI-generated logo selected', margin, yPosition);\n              yPosition += lineHeight + 5;\n            } else {\n              // Fallback text-only\n              if (logoFile) {\n                doc.text('Logo: Custom logo uploaded', margin, yPosition);\n              } else if (selectedLogo) {\n                doc.text('Logo: AI-generated logo selected', margin, yPosition);\n              }\n              yPosition += lineHeight + 5;\n            }\n          } catch (logoError) {\n            console.log('Could not embed logo in PDF:', logoError);\n            // Fallback to text description\n            if (logoFile) {\n              doc.text('Logo: Custom logo uploaded', margin, yPosition);\n            } else if (selectedLogo) {\n              doc.text('Logo: AI-generated logo selected', margin, yPosition);\n            }\n            yPosition += lineHeight + 5;\n          }\n        }\n\n        // Content Preferences\n        if (contentPreferences) {\n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Content Preferences', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n          doc.text(`Style: ${contentPreferences.style}`, margin, yPosition);\n          yPosition += lineHeight;\n          doc.text(`Tone: ${contentPreferences.tone}`, margin, yPosition);\n          yPosition += lineHeight;\n          doc.text(`Video Content: ${contentPreferences.useVideo ? 'Yes' : 'No'}`, margin, yPosition);\n          yPosition += lineHeight + 5;\n        }\n\n        // Image Requirements\n        if (imageRequirements) {\n          // Check if we need a new page\n          if (yPosition > 250) {\n            doc.addPage();\n            yPosition = 20;\n          }\n          \n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Image & Media Requirements', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n          doc.text(`Logo Needs: ${imageRequirements.logoNeeds}`, margin, yPosition);\n          yPosition += lineHeight;\n          \n          if (imageRequirements.logoDescription) {\n            const logoDescLines = doc.splitTextToSize(`Logo Description: ${imageRequirements.logoDescription}`, maxWidth);\n            doc.text(logoDescLines, margin, yPosition);\n            yPosition += lineHeight * logoDescLines.length;\n          }\n          \n          doc.text('Photo Types Needed:', margin, yPosition);\n          yPosition += lineHeight;\n          if (imageRequirements.teamPhotos) doc.text('• Team/Staff Photos', margin + 5, yPosition), yPosition += lineHeight;\n          if (imageRequirements.productPhotos) doc.text('• Product Photos', margin + 5, yPosition), yPosition += lineHeight;\n          if (imageRequirements.facilityPhotos) doc.text('• Facility Photos', margin + 5, yPosition), yPosition += lineHeight;\n          \n          if (imageRequirements.preferredPhotoStyle) {\n            doc.text(`Photo Style: ${imageRequirements.preferredPhotoStyle}`, margin, yPosition);\n            yPosition += lineHeight;\n          }\n          \n          if (imageRequirements.stockPhotoPreference) {\n            doc.text(`Stock Photo Preference: ${imageRequirements.stockPhotoPreference}`, margin, yPosition);\n            yPosition += lineHeight;\n          }\n          \n          if (imageRequirements.specificImages && imageRequirements.specificImages.length > 0) {\n            doc.text('Specific Images Needed:', margin, yPosition);\n            yPosition += lineHeight;\n            imageRequirements.specificImages.forEach(image => {\n              const imageLines = doc.splitTextToSize(`• ${image}`, maxWidth - 5);\n              doc.text(imageLines, margin + 5, yPosition);\n              yPosition += lineHeight * imageLines.length;\n            });\n          }\n          yPosition += 5;\n        }\n\n        // Integrations\n        if (crmIntegration && (crmIntegration.selectedCrms?.length > 0 || crmIntegration.selectedMarketingAutomation?.length > 0 || crmIntegration.selectedPaymentGateways?.length > 0 || crmIntegration.apiIntegrations?.trim() || crmIntegration.selectedAutomationPlatforms?.length > 0 || crmIntegration.selectedEngagementFeatures?.length > 0 || crmIntegration.selectedAdvancedFeatures?.length > 0 || crmIntegration.selectedECommerceFeatures?.length > 0)) {\n          if (yPosition > 220) {\n            doc.addPage();\n            yPosition = 20;\n          }\n          \n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Integrations', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n\n          // CRM Platforms\n          if (crmIntegration.selectedCrms?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('CRM Platforms:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const crmDisplayNames: Record<string, string> = {\n              'salesforce': 'Salesforce',\n              'hubspot': 'HubSpot',\n              'zoho-crm': 'Zoho CRM',\n              'pipedrive': 'Pipedrive',\n              'microsoft-dynamics-365': 'Microsoft Dynamics 365',\n              'freshsales': 'Freshsales',\n              'ontraport': 'Ontraport',\n              'nimble': 'Nimble',\n              'nutshell': 'Nutshell',\n              'membrain': 'Membrain',\n              'sugarcrm': 'SugarCRM'\n            };\n            \n            crmIntegration.selectedCrms.forEach(crm => {\n              if (crm === 'custom') {\n                if (crmIntegration.customCrmNames && crmIntegration.customCrmNames.length > 0) {\n                  crmIntegration.customCrmNames.filter(name => name.trim()).forEach(customName => {\n                    doc.text(`• ${customName}`, margin + 5, yPosition);\n                    yPosition += lineHeight;\n                  });\n                }\n              } else {\n                doc.text(`• ${crmDisplayNames[crm] || crm}`, margin + 5, yPosition);\n                yPosition += lineHeight;\n              }\n            });\n            yPosition += 3;\n          }\n\n          // Marketing Automation\n          if (crmIntegration.selectedMarketingAutomation?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('Marketing Automation:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const marketingDisplayNames: Record<string, string> = {\n              'klaviyo': 'Klaviyo',\n              'hubspot': 'HubSpot',\n              'activecampaign': 'ActiveCampaign',\n              'mailchimp': 'Mailchimp',\n              'brevo': 'Brevo',\n              'marketo-engage': 'Marketo Engage',\n              'pardot': 'Pardot'\n            };\n            \n            crmIntegration.selectedMarketingAutomation.forEach(platform => {\n              if (platform === 'custom') {\n                if (crmIntegration.customMarketingAutomationNames && crmIntegration.customMarketingAutomationNames.length > 0) {\n                  crmIntegration.customMarketingAutomationNames.filter(name => name.trim()).forEach(customName => {\n                    doc.text(`• ${customName}`, margin + 5, yPosition);\n                    yPosition += lineHeight;\n                  });\n                }\n              } else {\n                doc.text(`• ${marketingDisplayNames[platform] || platform}`, margin + 5, yPosition);\n                yPosition += lineHeight;\n              }\n            });\n            yPosition += 3;\n          }\n\n          // Payment Gateways\n          if (crmIntegration.selectedPaymentGateways?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('Payment Gateways:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const paymentDisplayNames: Record<string, string> = {\n              'stripe': 'Stripe',\n              'paypal': 'PayPal',\n              'square': 'Square',\n              'authorize-net': 'Authorize.net',\n              'amazon-pay': 'Amazon Pay',\n              'apple-pay': 'Apple Pay',\n              'bank-transfer': 'Bank Transfer'\n            };\n            \n            crmIntegration.selectedPaymentGateways.forEach(gateway => {\n              if (gateway === 'custom') {\n                if (crmIntegration.customPaymentGatewayNames && crmIntegration.customPaymentGatewayNames.length > 0) {\n                  crmIntegration.customPaymentGatewayNames.filter(name => name.trim()).forEach(customName => {\n                    doc.text(`• ${customName}`, margin + 5, yPosition);\n                    yPosition += lineHeight;\n                  });\n                }\n              } else {\n                doc.text(`• ${paymentDisplayNames[gateway] || gateway}`, margin + 5, yPosition);\n                yPosition += lineHeight;\n              }\n            });\n            yPosition += 3;\n          }\n\n          // API Integrations\n          if (crmIntegration.apiIntegrations?.trim()) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('API Integrations:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            const apiLines = doc.splitTextToSize(crmIntegration.apiIntegrations, maxWidth);\n            doc.text(apiLines, margin, yPosition);\n            yPosition += lineHeight * apiLines.length + 3;\n          }\n\n          // Automation Platforms\n          if (crmIntegration.selectedAutomationPlatforms?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('Automation Platforms:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const automationDisplayNames: Record<string, string> = {\n              'zapier': 'Zapier',\n              'make-integromat': 'Make (Integromat)',\n              'microsoft-power-automate': 'Microsoft Power Automate',\n              'ifttt': 'IFTTT',\n              'pipedream': 'Pipedream',\n              'workato': 'Workato'\n            };\n            \n            crmIntegration.selectedAutomationPlatforms.forEach(platform => {\n              doc.text(`• ${automationDisplayNames[platform] || platform}`, margin + 5, yPosition);\n              yPosition += lineHeight;\n            });\n            yPosition += 3;\n          }\n\n          // Engagement Features\n          if (crmIntegration.selectedEngagementFeatures?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('Engagement Features:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const engagementDisplayNames: Record<string, string> = {\n              'live-chat-intercom-drift': 'Live Chat (Intercom, Drift, etc.)',\n              'helpdesk-zendesk-freshdesk': 'Helpdesk (Zendesk, Freshdesk, etc.)',\n              'social-media-integration': 'Social Media Integration',\n              'review-management': 'Review Management',\n              'loyalty-programs': 'Loyalty Programs',\n              'referral-systems': 'Referral Systems'\n            };\n            \n            crmIntegration.selectedEngagementFeatures.forEach(feature => {\n              doc.text(`• ${engagementDisplayNames[feature] || feature}`, margin + 5, yPosition);\n              yPosition += lineHeight;\n            });\n            yPosition += 3;\n          }\n\n          // Advanced Features\n          if (crmIntegration.selectedAdvancedFeatures?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('Advanced Features:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const advancedDisplayNames: Record<string, string> = {\n              'multilingual-translation-support': 'Multilingual / Translation Support',\n              'seo-tools-meta-sitemap-schema': 'SEO Tools (meta tags, sitemap, schema)',\n              'analytics-integration-ga4-hotjar': 'Analytics Integration (GA4, Hotjar, etc.)',\n              'security-features-ssl-captcha-2fa': 'Security Features (SSL, Captcha, 2FA)',\n              'custom-forms-workflows': 'Custom Forms & Workflows',\n              'chatbots-ai-powered-scripted': 'Chatbots (AI-powered or scripted)'\n            };\n            \n            crmIntegration.selectedAdvancedFeatures.forEach(feature => {\n              doc.text(`• ${advancedDisplayNames[feature] || feature}`, margin + 5, yPosition);\n              yPosition += lineHeight;\n            });\n            yPosition += 3;\n          }\n\n          // E-Commerce Features\n          if (crmIntegration.selectedECommerceFeatures?.length > 0) {\n            doc.setFont('helvetica', 'bold');\n            doc.text('E-Commerce Features:', margin, yPosition);\n            yPosition += lineHeight;\n            doc.setFont('helvetica', 'normal');\n            \n            const ecommerceDisplayNames: Record<string, string> = {\n              'online-store-shopify-woocommerce': 'Online Store (Shopify / WooCommerce)',\n              'product-catalog': 'Product Catalog',\n              'shopping-cart-checkout': 'Shopping Cart & Checkout',\n              'digital-downloads': 'Digital Downloads',\n              'inventory-management': 'Inventory Management',\n              'subscription-products': 'Subscription Products',\n              'multi-currency-support': 'Multi-Currency Support',\n              'discount-codes-coupons': 'Discount Codes / Coupons'\n            };\n            \n            crmIntegration.selectedECommerceFeatures.forEach(feature => {\n              doc.text(`• ${ecommerceDisplayNames[feature] || feature}`, margin + 5, yPosition);\n              yPosition += lineHeight;\n            });\n            yPosition += 3;\n          }\n          \n          yPosition += 5;\n        }\n\n        // User Accounts & Membership\n        if (userAccountsMembership && (userAccountsMembership.registrationLogin || userAccountsMembership.userDashboardNeeded || (userAccountsMembership.predefinedRoles?.length > 0 || userAccountsMembership.customRoles?.length > 0) || userAccountsMembership.membershipSubscriptionSystem)) {\n          if (yPosition > 220) {\n            doc.addPage();\n            yPosition = 20;\n          }\n          \n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('User Accounts & Membership', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n\n          if (userAccountsMembership.registrationLogin) {\n            doc.text('• User Registration & Login: Yes', margin, yPosition);\n            yPosition += lineHeight;\n          }\n\n          if (userAccountsMembership.userDashboardNeeded) {\n            doc.text('• User Dashboard: Yes', margin, yPosition);\n            yPosition += lineHeight;\n            \n            if (userAccountsMembership.userDashboardFeatures?.trim()) {\n              const dashboardLines = doc.splitTextToSize(`  Dashboard Features: ${userAccountsMembership.userDashboardFeatures}`, maxWidth);\n              doc.text(dashboardLines, margin, yPosition);\n              yPosition += lineHeight * dashboardLines.length;\n            }\n          }\n\n          if (userAccountsMembership.predefinedRoles && userAccountsMembership.predefinedRoles.length > 0) {\n            doc.text('Predefined User Roles:', margin, yPosition);\n            yPosition += lineHeight;\n            \n            const roleDisplayNames: Record<string, string> = {\n              'admin': 'Administrator',\n              'editor': 'Editor',\n              'contributor': 'Contributor',\n              'subscriber': 'Subscriber',\n              'customer': 'Customer',\n              'member': 'Member',\n              'moderator': 'Moderator',\n              'guest': 'Guest'\n            };\n            \n            userAccountsMembership.predefinedRoles.forEach(role => {\n              doc.text(`• ${roleDisplayNames[role] || role}`, margin + 5, yPosition);\n              yPosition += lineHeight;\n            });\n          }\n\n          if (userAccountsMembership.customRoles && userAccountsMembership.customRoles.length > 0) {\n            doc.text('Custom User Roles:', margin, yPosition);\n            yPosition += lineHeight;\n            \n            userAccountsMembership.customRoles.forEach(role => {\n              const roleText = role.description ? `${role.name} (${role.description})` : role.name;\n              const roleLines = doc.splitTextToSize(`• ${roleText}`, maxWidth - 5);\n              doc.text(roleLines, margin + 5, yPosition);\n              yPosition += lineHeight * roleLines.length;\n            });\n          }\n\n          if (userAccountsMembership.membershipSubscriptionSystem) {\n            doc.text('• Membership/Subscription System: Yes', margin, yPosition);\n            yPosition += lineHeight;\n            \n            if (userAccountsMembership.membershipDetails?.trim()) {\n              const membershipLines = doc.splitTextToSize(`  Details: ${userAccountsMembership.membershipDetails}`, maxWidth);\n              doc.text(membershipLines, margin, yPosition);\n              yPosition += lineHeight * membershipLines.length;\n            }\n          }\n          \n          yPosition += 5;\n        }\n\n        // Uploaded Media Files\n        if (mediaFiles && mediaFiles.length > 0) {\n          if (yPosition > 240) {\n            doc.addPage();\n            yPosition = 20;\n          }\n          \n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Uploaded Media Files', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n          \n          mediaFiles.forEach((file, index) => {\n            const fileSize = (file.size / 1024 / 1024).toFixed(2);\n            doc.text(`• ${file.name} (${fileSize} MB)`, margin, yPosition);\n            yPosition += lineHeight;\n          });\n          \n          yPosition += 5;\n        }\n\n        // Design Preferences\n        if (designPreferences.selectedStyle) {\n          if (yPosition > 250) {\n            doc.addPage();\n            yPosition = 20;\n          }\n          \n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Design Preferences', margin, yPosition);\n          yPosition += lineHeight;\n          \n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'normal');\n          doc.text(`Design Style: ${designPreferences.selectedStyle}`, margin, yPosition);\n          yPosition += lineHeight;\n          \n          // Preferred Font\n          if (designPreferences.preferredFont) {\n            doc.text(`Preferred Font: ${designPreferences.preferredFont}`, margin, yPosition);\n            yPosition += lineHeight;\n          }\n          \n          // Color Scheme\n          const hasColors = designPreferences.primaryColor || designPreferences.secondaryColor || \n                          designPreferences.accentColor || designPreferences.backgroundColor || \n                          designPreferences.textColor;\n          \n          if (hasColors) {\n            doc.text('Color Scheme:', margin, yPosition);\n            yPosition += lineHeight;\n            \n            // Primary Color with visual preview\n            if (designPreferences.primaryColor) {\n              doc.text(`• Primary: ${designPreferences.primaryColor}`, margin + 5, yPosition);\n              // Add a small colored rectangle\n              doc.setFillColor(designPreferences.primaryColor);\n              doc.rect(margin + 85, yPosition - 4, 8, 6, 'F');\n              yPosition += lineHeight;\n            }\n            \n            // Secondary Color with visual preview\n            if (designPreferences.secondaryColor) {\n              doc.text(`• Secondary: ${designPreferences.secondaryColor}`, margin + 5, yPosition);\n              doc.setFillColor(designPreferences.secondaryColor);\n              doc.rect(margin + 85, yPosition - 4, 8, 6, 'F');\n              yPosition += lineHeight;\n            }\n            \n            // Accent Color with visual preview\n            if (designPreferences.accentColor) {\n              doc.text(`• Accent: ${designPreferences.accentColor}`, margin + 5, yPosition);\n              doc.setFillColor(designPreferences.accentColor);\n              doc.rect(margin + 85, yPosition - 4, 8, 6, 'F');\n              yPosition += lineHeight;\n            }\n            \n            // Background Color with visual preview\n            if (designPreferences.backgroundColor) {\n              doc.text(`• Background: ${designPreferences.backgroundColor}`, margin + 5, yPosition);\n              doc.setFillColor(designPreferences.backgroundColor);\n              doc.rect(margin + 85, yPosition - 4, 8, 6, 'F');\n              // Add border for light backgrounds\n              doc.setDrawColor(200, 200, 200);\n              doc.rect(margin + 85, yPosition - 4, 8, 6, 'S');\n              yPosition += lineHeight;\n            }\n            \n            // Text Color with visual preview\n            if (designPreferences.textColor) {\n              doc.text(`• Text: ${designPreferences.textColor}`, margin + 5, yPosition);\n              doc.setFillColor(designPreferences.textColor);\n              doc.rect(margin + 85, yPosition - 4, 8, 6, 'F');\n              yPosition += lineHeight;\n            }\n            \n            yPosition += 3; // Add spacing after colors\n          }\n          \n          if (designPreferences.inspirationLinks.length > 0) {\n            doc.text('Inspiration Links:', margin, yPosition);\n            yPosition += lineHeight;\n            designPreferences.inspirationLinks.forEach(link => {\n              doc.text(`• ${link}`, margin + 5, yPosition);\n              yPosition += lineHeight;\n            });\n          }\n          \n          if (designPreferences.additionalNotes) {\n            const notesLines = doc.splitTextToSize(`Additional Notes: ${designPreferences.additionalNotes}`, maxWidth);\n            doc.text(notesLines, margin, yPosition);\n            yPosition += lineHeight * notesLines.length;\n          }\n        }\n\n        // Generated Content Full Details\n        if (generatedContent.length > 0) {\n          if (yPosition > 220) {\n            doc.addPage();\n            yPosition = 20;\n          }\n          \n          doc.setFontSize(16);\n          doc.setFont('helvetica', 'bold');\n          doc.text('Generated Content', margin, yPosition);\n          yPosition += lineHeight * 2;\n          \n          generatedContent.forEach((content, index) => {\n            // Check if we need a new page for each content section\n            if (yPosition > 200) {\n              doc.addPage();\n              yPosition = 20;\n            }\n            \n            doc.setFontSize(14);\n            doc.setFont('helvetica', 'bold');\n            doc.text(`${content.pageName} Page`, margin, yPosition);\n            yPosition += lineHeight;\n            \n            doc.setFontSize(10);\n            doc.setFont('helvetica', 'normal');\n            // Split content into multiple lines\n            const contentLines = doc.splitTextToSize(content.content, maxWidth);\n            doc.text(contentLines, margin, yPosition);\n            yPosition += lineHeight * contentLines.length + 10;\n          });\n        }\n\n        // Footer\n        const currentDate = new Date().toLocaleDateString();\n        doc.setFontSize(10);\n        doc.setFont('helvetica', 'italic');\n        doc.text(`Generated on ${currentDate}`, margin, 280);\n\n        // Helper function to sanitize filenames for cross-platform compatibility\n        const sanitizeFilename = (filename: string) => {\n          return filename.replace(/[\\\\/:*?\"<>|]/g, '_').trim();\n        };\n\n        const sanitizedBusinessName = sanitizeFilename(businessName || 'Creative Brief');\n\n        // Save the PDF\n        doc.save(`${sanitizedBusinessName}_${currentDate.replace(/\\//g, '-')}.pdf`);\n        \n        // Create and download zip file with uploaded images and logos if any exist\n        const imageFiles = mediaFiles ? mediaFiles.filter(file => file.type.startsWith('image/')) : [];\n        const hasLogo = logoFile || selectedLogo;\n        \n        if (imageFiles.length > 0 || hasLogo) {\n          console.log('Creating zip file with uploaded images and logos...');\n          const zip = new JSZip();\n          let imagesAdded = 0;\n          let logosAdded = 0;\n          \n          // Add each image file to the zip\n          for (const file of imageFiles) {\n            zip.file(file.name, file);\n            imagesAdded++;\n          }\n          \n          // Add uploaded logo file if it exists\n          if (logoFile && logoFile instanceof File) {\n            zip.file(`logo_uploaded_${logoFile.name}`, logoFile);\n            logosAdded++;\n          }\n          \n          // Add AI-generated logo if it exists\n          if (selectedLogo && selectedLogo.dataUrl) {\n            try {\n              // Parse mime type from data URL for proper extension\n              const mimeMatch = selectedLogo.dataUrl.match(/^data:([^;]+);?/);\n              const mimeType = mimeMatch ? mimeMatch[1] : 'image/png';\n              \n              let extension = 'png'; // default\n              if (mimeType.includes('jpeg') || mimeType.includes('jpg')) extension = 'jpg';\n              else if (mimeType.includes('png')) extension = 'png';\n              else if (mimeType.includes('webp')) extension = 'webp';\n              else if (mimeType.includes('svg')) extension = 'svg';\n              \n              // Convert data URL to blob\n              const response = await fetch(selectedLogo.dataUrl);\n              const logoBlob = await response.blob();\n              \n              // Use blob type as fallback if data URL parsing failed\n              if (extension === 'png' && logoBlob.type && logoBlob.type !== 'image/png') {\n                if (logoBlob.type.includes('jpeg') || logoBlob.type.includes('jpg')) extension = 'jpg';\n                else if (logoBlob.type.includes('webp')) extension = 'webp';\n                else if (logoBlob.type.includes('svg')) extension = 'svg';\n              }\n              \n              zip.file(`logo_generated.${extension}`, logoBlob);\n              logosAdded++;\n            } catch (logoError) {\n              console.log('Could not include AI-generated logo in zip:', logoError);\n            }\n          }\n          \n          const totalFiles = imagesAdded + logosAdded;\n          \n          // Only generate and download zip if files were actually added\n          if (totalFiles > 0) {\n            const zipBlob = await zip.generateAsync({ type: \"blob\" });\n            const zipUrl = URL.createObjectURL(zipBlob);\n            const zipLink = document.createElement('a');\n            zipLink.href = zipUrl;\n            zipLink.download = `${sanitizedBusinessName}_Images_${currentDate.replace(/\\//g, '-')}.zip`;\n            document.body.appendChild(zipLink);\n            zipLink.click();\n            document.body.removeChild(zipLink);\n            URL.revokeObjectURL(zipUrl);\n            \n            // Create descriptive message based on what was included\n            let description = \"Your creative brief PDF and \";\n            if (imagesAdded > 0 && logosAdded > 0) {\n              description += `${imagesAdded} image${imagesAdded > 1 ? 's' : ''} and ${logosAdded} logo${logosAdded > 1 ? 's' : ''} zip have been exported.`;\n            } else if (imagesAdded > 0) {\n              description += `${imagesAdded} image${imagesAdded > 1 ? 's' : ''} zip have been exported.`;\n            } else {\n              description += `${logosAdded} logo${logosAdded > 1 ? 's' : ''} zip have been exported.`;\n            }\n            \n            toast({\n              title: \"Files Downloaded!\",\n              description: description\n            });\n          } else {\n            toast({\n              title: \"PDF Downloaded!\",\n              description: \"Your creative brief has been exported as a PDF. No images or logos were available to include in a zip file.\"\n            });\n          }\n        } else {\n          toast({\n            title: \"PDF Downloaded!\",\n            description: \"Your creative brief has been exported as a PDF.\"\n          });\n        }\n    } catch (error) {\n      console.error('PDF Export Error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Unable to export PDF. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const submitProject = async () => {\n    console.log('Submitting project...');\n    \n    try {\n      // Prepare submission data\n      const submissionData = {\n        businessName,\n        businessDescription,\n        selectedSiteType,\n        pages,\n        ...(logoDecision && { logoDecision }), // Only include if not null\n        logoFile: logoFile ? 'uploaded_file' : undefined, // In production, convert to base64 or upload separately\n        ...(selectedLogo && { selectedLogo }), // Only include if not null\n        contentPreferences,\n        generatedContent,\n        crmIntegration,\n        userAccountsMembership,\n        imageRequirements,\n        designPreferences\n      };\n\n      // Submit to backend\n      const response = await apiRequest('POST', '/api/project/submit', submissionData);\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to submit project');\n      }\n\n      const result = await response.json();\n      \n      toast({\n        title: \"Project Submitted!\",\n        description: result.message || \"Your creative brief has been submitted successfully.\"\n      });\n\n      // Set submission state to show Thank You page\n      setIsProjectSubmitted(true);\n      setCompletedSteps(prev => new Set([...Array.from(prev), 11]));\n\n    } catch (error: any) {\n      console.error('Submission error:', error);\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Unable to submit project. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <Card>\n            <CardContent className=\"pt-8 text-center\">\n              <Sparkles className=\"w-16 h-16 text-primary mx-auto mb-6\" />\n              <h2 className=\"text-3xl font-bold mb-4\">Welcome to Our Onboarding Portal</h2>\n              <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                We'll guide you through a comprehensive questionnaire to create the perfect creative brief for your website project. This process takes about 15-20 minutes and ensures we understand exactly what you need.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-left max-w-3xl mx-auto\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2\">Business Identity</h3>\n                  <p className=\"text-sm text-muted-foreground\">Tell us about your business and brand</p>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2\">Website Strategy</h3>\n                  <p className=\"text-sm text-muted-foreground\">Define your website's purpose and structure</p>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2\">Design Direction</h3>\n                  <p className=\"text-sm text-muted-foreground\">Share your visual preferences and style</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            {/* Contact Information Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Your Contact Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Full Name</label>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Your full name\"\n                      value={fullName}\n                      onChange={(e) => setFullName(e.target.value)}\n                      className=\"w-full p-3 border rounded-md\"\n                      data-testid=\"input-full-name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Email</label>\n                    <input\n                      type=\"email\"\n                      placeholder=\"your@email.com\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"w-full p-3 border rounded-md\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Contact Number</label>\n                  <input\n                    type=\"tel\"\n                    placeholder=\"Your phone number\"\n                    value={contactNumber}\n                    onChange={(e) => setContactNumber(e.target.value)}\n                    className=\"w-full p-3 border rounded-md\"\n                    data-testid=\"input-contact-number\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Business Information Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Tell Us About Your Business</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n              {/* First: Business Description */}\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Business Description *</label>\n                <textarea\n                  placeholder=\"Describe what your business does, who you serve, and what makes you unique...\"\n                  value={businessDescription}\n                  onChange={(e) => setBusinessDescription(e.target.value)}\n                  rows={4}\n                  className=\"w-full p-3 border rounded-md\"\n                  data-testid=\"textarea-business-description\"\n                />\n              </div>\n\n              {/* Second: Ask if they have a business name */}\n              {businessDescription.trim() && (\n                <div>\n                  <label className=\"text-sm font-medium mb-3 block\">Do you have a business name? *</label>\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={() => {\n                        setHasBusinessName(true);\n                        setGeneratedNames([]);\n                      }}\n                      className={`w-full p-3 text-left border rounded-md hover-elevate ${hasBusinessName === true ? 'border-primary bg-primary/10' : 'border-border'}`}\n                      data-testid=\"button-has-business-name-yes\"\n                    >\n                      <span className=\"font-medium\">Yes, I have a business name</span>\n                      <p className=\"text-sm text-muted-foreground mt-1\">I'll enter my existing business name</p>\n                    </button>\n                    <button\n                      onClick={() => {\n                        setHasBusinessName(false);\n                        setBusinessName(\"\");\n                      }}\n                      className={`w-full p-3 text-left border rounded-md hover-elevate ${hasBusinessName === false ? 'border-primary bg-primary/10' : 'border-border'}`}\n                      data-testid=\"button-has-business-name-no\"\n                    >\n                      <span className=\"font-medium\">No, I need help creating one</span>\n                      <p className=\"text-sm text-muted-foreground mt-1\">Generate suggestions based on my business description</p>\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {/* Third: Business Name Input (if they have one) */}\n              {hasBusinessName === true && (\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Business Name *</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g. Acme Design Studio\"\n                    value={businessName}\n                    onChange={(e) => setBusinessName(e.target.value)}\n                    className=\"w-full p-3 border rounded-md\"\n                    data-testid=\"input-business-name\"\n                  />\n                </div>\n              )}\n\n              {/* Fourth: Name Generation (if they don't have one) */}\n              {hasBusinessName === false && (\n                <div>\n                  <label className=\"text-sm font-medium mb-3 block\">Business Name Generation *</label>\n                  \n                  {/* Business Name Idea Input */}\n                  <div className=\"mb-4\">\n                    <label className=\"text-xs font-medium text-muted-foreground mb-2 block\">\n                      Do you have a business name idea? (Optional)\n                    </label>\n                    <input\n                      type=\"text\"\n                      placeholder=\"e.g. 'Creative Edge' or 'Digital Boost' - we'll generate variations\"\n                      value={businessNameIdea}\n                      onChange={(e) => setBusinessNameIdea(e.target.value)}\n                      className=\"w-full p-3 border rounded-md\"\n                      data-testid=\"input-business-name-idea\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      If you have a rough idea for a name, enter it here and we'll generate creative variations\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <label className=\"text-sm font-medium\">AI-Generated Names</label>\n                    <Button\n                      onClick={generateBusinessNames}\n                      disabled={isGeneratingNames || (!businessDescription.trim() && !businessNameIdea.trim())}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-generate-names\"\n                    >\n                      {isGeneratingNames ? \"Generating...\" : \"Generate Names\"}\n                    </Button>\n                  </div>\n                  \n                  {generatedNames.length === 0 && !isGeneratingNames && (\n                    <div className=\"p-4 border rounded-md text-center text-muted-foreground\">\n                      <div className=\"space-y-2\">\n                        <p>Click \"Generate Names\" to get AI-powered suggestions</p>\n                        <p className=\"text-xs\">\n                          {businessNameIdea.trim() \n                            ? `Based on your idea \"${businessNameIdea}\" and business description`\n                            : \"Based on your business description\"\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {isGeneratingNames && (\n                    <div className=\"p-4 border rounded-md text-center\">\n                      <Sparkles className=\"w-6 h-6 animate-spin mx-auto mb-2 text-primary\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        {businessNameIdea.trim() \n                          ? `Generating creative variations of \"${businessNameIdea}\"...`\n                          : \"Generating creative names for your business...\"\n                        }\n                      </p>\n                    </div>\n                  )}\n                  \n                  {generatedNames.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"text-xs text-muted-foreground mb-2\">\n                        {businessNameIdea.trim() \n                          ? `Variations based on \"${businessNameIdea}\"`\n                          : \"Names based on your business description\"\n                        }\n                      </div>\n                      {generatedNames.map((name, index) => (\n                        <button\n                          key={index}\n                          onClick={() => setBusinessName(name)}\n                          className={`w-full p-3 text-left border rounded-md hover-elevate ${businessName === name ? 'border-primary bg-primary/10' : 'border-border'}`}\n                          data-testid={`button-select-name-${index}`}\n                        >\n                          <span className=\"font-medium\">{name}</span>\n                        </button>\n                      ))}\n                      <div className=\"pt-2\">\n                        <label className=\"text-xs font-medium text-muted-foreground mb-2 block\">Or enter a completely different name:</label>\n                        <input\n                          type=\"text\"\n                          placeholder=\"Enter your preferred business name\"\n                          value={generatedNames.includes(businessName) ? \"\" : businessName}\n                          onChange={(e) => setBusinessName(e.target.value)}\n                          className=\"w-full p-2 text-sm border rounded-md\"\n                          data-testid=\"input-custom-business-name\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* AI Suggestion */}\n              {businessName && businessDescription && (\n                <div className=\"p-4 bg-primary/10 rounded-lg\">\n                  <p className=\"text-sm\">\n                    <strong>AI Insight:</strong> Based on \"{businessName}\" and your business description, we suggest focusing on professional credibility and clear service communication in your website design.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          </div>\n        );\n\n      case 3:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Logo & Branding Assets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Choice Cards - Upload vs Generate */}\n                {!logoPath && (\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <Card \n                      className=\"p-4 cursor-pointer border-2 hover-elevate transition-all\"\n                      onClick={() => setLogoPath('upload')}\n                      data-testid=\"button-logo-path-upload\"\n                    >\n                      <div className=\"flex flex-col items-center text-center space-y-3\">\n                        <Upload className=\"w-8 h-8 text-primary\" />\n                        <div>\n                          <h3 className=\"font-medium\">I have a logo</h3>\n                          <p className=\"text-sm text-muted-foreground\">Upload your existing logo file</p>\n                        </div>\n                      </div>\n                    </Card>\n                    <Card \n                      className=\"p-4 cursor-pointer border-2 hover-elevate transition-all\"\n                      onClick={() => setLogoPath('generate')}\n                      data-testid=\"button-logo-path-generate\"\n                    >\n                      <div className=\"flex flex-col items-center text-center space-y-3\">\n                        <Palette className=\"w-8 h-8 text-primary\" />\n                        <div>\n                          <h3 className=\"font-medium\">I need a logo</h3>\n                          <p className=\"text-sm text-muted-foreground\">Generate logo ideas with AI</p>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                )}\n\n                {/* Upload Path */}\n                {logoPath === 'upload' && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-medium\">Upload Your Logo</h3>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => setLogoPath(null)}\n                        data-testid=\"button-change-logo-path\"\n                      >\n                        Change Option\n                      </Button>\n                    </div>\n                    <FileUpload\n                      onFileSelect={(file) => {\n                        setLogoFile(file);\n                      }}\n                      onFileRemove={() => setLogoFile(null)}\n                      currentFile={logoFile}\n                      acceptedTypes=\"image/*\"\n                      maxSize={10}\n                      placeholder=\"Upload your logo or brand assets\"\n                    />\n                    {logoFile && (\n                      <div className=\"p-4 bg-primary/10 rounded-lg\">\n                        <p className=\"text-sm\">\n                          <strong>AI Analysis:</strong> We'll analyze your logo to suggest complementary colors and design elements for your website.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Generate Path */}\n                {logoPath === 'generate' && (\n                  <LogoGenerationForm\n                    businessName={businessName}\n                    businessDescription={businessDescription}\n                    onLogoGenerated={(logos) => {\n                      setGeneratedLogos(logos);\n                    }}\n                    onCancel={() => setLogoPath(null)}\n                    generatedLogos={generatedLogos}\n                    selectedLogo={selectedLogo}\n                    onLogoSelect={(logo, decision) => {\n                      setSelectedLogo(logo);\n                      setLogoDecision(decision);\n                    }}\n                    onPreferencesChange={(preferences) => {\n                      setLogoPreferences(preferences);\n                    }}\n                  />\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 4:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Website Purpose</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <SiteTypeSelector \n                selectedType={selectedSiteType}\n                onTypeSelect={setSelectedSiteType}\n              />\n            </CardContent>\n          </Card>\n        );\n\n      case 5:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Site Map Builder</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              <SitemapBuilder\n                pages={pages}\n                onPagesUpdate={setPages}\n                suggestedPages={suggestedPages}\n              />\n              \n              {/* Core Website Features Section */}\n              <div className=\"border-t pt-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-2\">Core Website Features</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Select the essential features you'd like to include on your website\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {[\n                      'Newsletter Signup',\n                      'Search Functionality', \n                      'Contact Form',\n                      'Contact Form with Conditional Logic',\n                      'Blog / News Section',\n                      'Photo Galleries / Sliders',\n                      'Video Backgrounds / Embeds',\n                      'Podcast / Audio Player',\n                      'Resource Library (PDFs, Whitepapers)',\n                      'Download Center'\n                    ].map((feature) => (\n                      <div key={feature} className=\"flex items-center space-x-3\">\n                        <Checkbox\n                          checked={coreWebsiteFeatures.includes(feature)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setCoreWebsiteFeatures(prev => [...prev, feature]);\n                            } else {\n                              setCoreWebsiteFeatures(prev => prev.filter(f => f !== feature));\n                            }\n                          }}\n                          data-testid={`checkbox-core-feature-${feature.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                        />\n                        <label className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                          {feature}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 6:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Content & Copy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <p className=\"text-muted-foreground mb-6\">\n                  Our AI will generate draft copy for each of your pages based on your business information and selected website type.\n                </p>\n              </div>\n\n              {/* Content Preferences */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Content Preferences</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {/* Content Style */}\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Content Style</label>\n                      <Select \n                        value={contentPreferences.style} \n                        onValueChange={(value: 'text-heavy' | 'visual-focused' | 'balanced') => \n                          setContentPreferences(prev => ({ ...prev, style: value }))\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-content-style\">\n                          <SelectValue placeholder=\"Select style\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"text-heavy\">Text Heavy</SelectItem>\n                          <SelectItem value=\"visual-focused\">Visual Focused</SelectItem>\n                          <SelectItem value=\"balanced\">Balanced</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Tone */}\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Tone</label>\n                      <Select \n                        value={contentPreferences.tone} \n                        onValueChange={(value: 'professional' | 'casual' | 'friendly' | 'authoritative') => \n                          setContentPreferences(prev => ({ ...prev, tone: value }))\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-content-tone\">\n                          <SelectValue placeholder=\"Select tone\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"professional\">Professional</SelectItem>\n                          <SelectItem value=\"casual\">Casual</SelectItem>\n                          <SelectItem value=\"friendly\">Friendly</SelectItem>\n                          <SelectItem value=\"authoritative\">Authoritative</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Video Usage */}\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"use-video\"\n                        checked={contentPreferences.useVideo}\n                        onCheckedChange={(checked) => \n                          setContentPreferences(prev => ({ ...prev, useVideo: !!checked }))\n                        }\n                        data-testid=\"checkbox-use-video\"\n                      />\n                      <div>\n                        <label htmlFor=\"use-video\" className=\"text-sm font-medium\">\n                          Video Content\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Interested in using video content (you'll create videos yourself)\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Generate Button */}\n              <div className=\"text-center\">\n                <Button \n                  onClick={generateContent} \n                  disabled={isGeneratingContent}\n                  className=\"gap-2\" \n                  data-testid=\"button-generate-content\"\n                >\n                  {isGeneratingContent ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white/20 border-t-white rounded-full animate-spin\" />\n                      Generating Content...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4\" />\n                      Generate Page Content\n                    </>\n                  )}\n                </Button>\n                {generatedContent.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Generate content to continue to the next step\n                  </p>\n                )}\n              </div>\n              \n              {/* Enhanced Content Editor Display */}\n              <div className=\"grid gap-6\">\n                {pages.map((page) => {\n                  const pageContent = generatedContent.find(content => content.pageId === page.id);\n                  return (\n                    <Card key={page.id} className=\"border-2\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-lg\">{page.name} Page</CardTitle>\n                          {pageContent && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => regeneratePageContent(page)}\n                              disabled={isGeneratingContent}\n                              className=\"gap-2\"\n                              data-testid={`button-regenerate-${page.id}`}\n                            >\n                              <RefreshCw className=\"w-3 h-3\" />\n                              Regenerate\n                            </Button>\n                          )}\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {/* Page Direction Field */}\n                        <div>\n                          <label className=\"text-sm font-medium mb-2 block\">\n                            Additional Direction for {page.name} Page (Optional)\n                          </label>\n                          <Textarea\n                            placeholder={`Provide specific guidance for the ${page.name.toLowerCase()} page content (e.g., \"Focus on our 24/7 customer support\", \"Mention our 15-year experience\", \"Include pricing tiers\")`}\n                            value={pageContent?.pageDirection || ''}\n                            onChange={(e) => updatePageDirection(page.id, e.target.value)}\n                            className=\"min-h-[60px]\"\n                            data-testid={`textarea-direction-${page.id}`}\n                          />\n                        </div>\n\n                        {pageContent ? (\n                          <div className=\"space-y-4\">\n                            {/* Editable Content Area */}\n                            <div>\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <label className=\"text-sm font-medium\">Generated Content</label>\n                                {pageContent.hasEdits && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    Edited\n                                  </Badge>\n                                )}\n                              </div>\n                              <Textarea\n                                value={pageContent.editedContent || pageContent.content}\n                                onChange={(e) => updatePageContent(page.id, e.target.value)}\n                                className=\"min-h-[200px] text-sm\"\n                                placeholder=\"Edit the generated content for this page...\"\n                                data-testid={`textarea-content-${page.id}`}\n                              />\n                            </div>\n\n                            {/* Suggestions */}\n                            {pageContent.suggestions && pageContent.suggestions.length > 0 && (\n                              <div className=\"bg-muted/50 p-3 rounded-lg\">\n                                <p className=\"text-xs font-medium text-muted-foreground mb-2\">AI Suggestions:</p>\n                                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                                  {pageContent.suggestions.map((suggestion, index) => (\n                                    <li key={index} className=\"flex items-start gap-2\">\n                                      <span className=\"text-primary mt-0.5\">•</span>\n                                      <span>{suggestion}</span>\n                                    </li>\n                                  ))}\n                                </ul>\n                              </div>\n                            )}\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-8 text-muted-foreground\">\n                            <Sparkles className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                            <p>AI-generated content will appear here for the {page.name.toLowerCase()} page.</p>\n                            <p className=\"text-xs mt-1\">Click \"Generate Page Content\" above to get started.</p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 7:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Integrations</CardTitle>\n              <p className=\"text-muted-foreground\">\n                Select your CRM and Marketing Automation platforms for customer management and campaign automation\n              </p>\n            </CardHeader>\n            <CardContent>\n              <Form {...crmForm}>\n                <form className=\"space-y-6\">\n                  <FormField\n                    control={crmForm.control}\n                    name=\"selectedCrms\"\n                    render={() => (\n                      <FormItem>\n                        <FormLabel>CRM Platforms</FormLabel>\n                        <FormDescription className=\"mb-4\">\n                          Select all CRM platforms you want to integrate with\n                        </FormDescription>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          {[\n                            { id: 'salesforce', label: 'Salesforce' },\n                            { id: 'hubspot', label: 'HubSpot' },\n                            { id: 'zoho-crm', label: 'Zoho CRM' },\n                            { id: 'pipedrive', label: 'Pipedrive' },\n                            { id: 'microsoft-dynamics-365', label: 'Microsoft Dynamics 365' },\n                            { id: 'freshsales', label: 'Freshsales' },\n                            { id: 'ontraport', label: 'Ontraport' },\n                            { id: 'nimble', label: 'Nimble' },\n                            { id: 'nutshell', label: 'Nutshell' },\n                            { id: 'membrain', label: 'Membrain' },\n                            { id: 'sugarcrm', label: 'SugarCRM' },\n                            { id: 'custom', label: 'Add custom CRM' }\n                          ].map((crm) => (\n                            <FormItem key={crm.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={crmIntegration.selectedCrms.includes(crm.id as any)}\n                                  onCheckedChange={(checked) => {\n                                    const updatedCrms = checked\n                                      ? [...crmIntegration.selectedCrms, crm.id as any]\n                                      : crmIntegration.selectedCrms.filter(id => id !== crm.id);\n                                    setCrmIntegration(prev => ({ ...prev, selectedCrms: updatedCrms }));\n                                    crmForm.setValue('selectedCrms', updatedCrms);\n                                  }}\n                                  data-testid={`checkbox-crm-${crm.id}`}\n                                />\n                              </FormControl>\n                              <FormLabel className=\"text-sm font-normal\">\n                                {crm.label}\n                              </FormLabel>\n                            </FormItem>\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {crmIntegration.selectedCrms.includes('custom') && (\n                    <FormField\n                      control={crmForm.control}\n                      name=\"customCrmNames\"\n                      render={() => (\n                        <FormItem>\n                          <FormLabel>Custom CRM Names</FormLabel>\n                          <FormDescription>\n                            Enter the names of your custom CRM platforms (one per line)\n                          </FormDescription>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Enter custom CRM names, one per line\"\n                              value={(crmIntegration.customCrmNames || []).join('\\n')}\n                              onChange={(e) => {\n                                const lines = e.target.value.split('\\n');\n                                setCrmIntegration(prev => ({ ...prev, customCrmNames: lines }));\n                                crmForm.setValue('customCrmNames', lines);\n                              }}\n                              data-testid=\"textarea-custom-crm-names\"\n                              rows={3}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                  \n                  <div className=\"border-t pt-6 mt-6\">\n                    <FormField\n                      control={crmForm.control}\n                      name=\"selectedMarketingAutomation\"\n                      render={() => (\n                        <FormItem>\n                          <FormLabel>Marketing Automation Platforms</FormLabel>\n                          <FormDescription className=\"mb-4\">\n                            Select all marketing automation platforms you want to integrate with\n                          </FormDescription>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {[\n                              { id: 'klaviyo', label: 'Klaviyo' },\n                              { id: 'hubspot', label: 'HubSpot' },\n                              { id: 'activecampaign', label: 'ActiveCampaign' },\n                              { id: 'mailchimp', label: 'Mailchimp' },\n                              { id: 'brevo', label: 'Brevo' },\n                              { id: 'marketo-engage', label: 'Marketo Engage' },\n                              { id: 'pardot', label: 'Pardot' },\n                              { id: 'custom', label: 'Add custom platform' }\n                            ].map((platform) => (\n                              <FormItem key={platform.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                <FormControl>\n                                  <Checkbox\n                                    checked={crmIntegration.selectedMarketingAutomation.includes(platform.id as any)}\n                                    onCheckedChange={(checked) => {\n                                      const updatedPlatforms = checked\n                                        ? [...crmIntegration.selectedMarketingAutomation, platform.id as any]\n                                        : crmIntegration.selectedMarketingAutomation.filter(id => id !== platform.id);\n                                      setCrmIntegration(prev => ({ ...prev, selectedMarketingAutomation: updatedPlatforms }));\n                                      crmForm.setValue('selectedMarketingAutomation', updatedPlatforms);\n                                    }}\n                                    data-testid={`checkbox-marketing-${platform.id}`}\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"text-sm font-normal\">\n                                  {platform.label}\n                                </FormLabel>\n                              </FormItem>\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {crmIntegration.selectedMarketingAutomation.includes('custom') && (\n                      <FormField\n                        control={crmForm.control}\n                        name=\"customMarketingAutomationNames\"\n                        render={() => (\n                          <FormItem className=\"mt-6\">\n                            <FormLabel>Custom Marketing Automation Names</FormLabel>\n                            <FormDescription>\n                              Enter the names of your custom marketing automation platforms (one per line)\n                            </FormDescription>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Enter custom marketing automation names, one per line\"\n                                value={(crmIntegration.customMarketingAutomationNames || []).join('\\n')}\n                                onChange={(e) => {\n                                  const lines = e.target.value.split('\\n');\n                                  setCrmIntegration(prev => ({ ...prev, customMarketingAutomationNames: lines }));\n                                  crmForm.setValue('customMarketingAutomationNames', lines);\n                                }}\n                                data-testid=\"textarea-custom-marketing-names\"\n                                rows={3}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                    \n                    <div className=\"border-t pt-6 mt-6\">\n                      <FormField\n                        control={crmForm.control}\n                        name=\"selectedPaymentGateways\"\n                        render={() => (\n                          <FormItem>\n                            <FormLabel>Payment Gateways</FormLabel>\n                            <FormDescription className=\"mb-4\">\n                              Select all payment gateways you want to integrate with\n                            </FormDescription>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {[\n                                { id: 'stripe', label: 'Stripe' },\n                                { id: 'paypal', label: 'PayPal' },\n                                { id: 'square', label: 'Square' },\n                                { id: 'authorize-net', label: 'Authorize.net' },\n                                { id: 'amazon-pay', label: 'Amazon Pay' },\n                                { id: 'apple-pay', label: 'Apple Pay' },\n                                { id: 'bank-transfer', label: 'Bank Transfer' },\n                                { id: 'custom', label: 'Add custom gateway' }\n                              ].map((gateway) => (\n                                <FormItem key={gateway.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={crmIntegration.selectedPaymentGateways.includes(gateway.id as any)}\n                                      onCheckedChange={(checked) => {\n                                        const updatedGateways = checked\n                                          ? [...crmIntegration.selectedPaymentGateways, gateway.id as any]\n                                          : crmIntegration.selectedPaymentGateways.filter(id => id !== gateway.id);\n                                        setCrmIntegration(prev => ({ ...prev, selectedPaymentGateways: updatedGateways }));\n                                        crmForm.setValue('selectedPaymentGateways', updatedGateways);\n                                      }}\n                                      data-testid={`checkbox-payment-${gateway.id}`}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"text-sm font-normal\">\n                                    {gateway.label}\n                                  </FormLabel>\n                                </FormItem>\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      {crmIntegration.selectedPaymentGateways.includes('custom') && (\n                        <FormField\n                          control={crmForm.control}\n                          name=\"customPaymentGatewayNames\"\n                          render={() => (\n                            <FormItem className=\"mt-6\">\n                              <FormLabel>Custom Payment Gateway Names</FormLabel>\n                              <FormDescription>\n                                Enter the names of your custom payment gateways (one per line)\n                              </FormDescription>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Enter custom payment gateway names, one per line\"\n                                  value={(crmIntegration.customPaymentGatewayNames || []).join('\\n')}\n                                  onChange={(e) => {\n                                    const lines = e.target.value.split('\\n');\n                                    setCrmIntegration(prev => ({ ...prev, customPaymentGatewayNames: lines }));\n                                    crmForm.setValue('customPaymentGatewayNames', lines);\n                                  }}\n                                  data-testid=\"textarea-custom-payment-names\"\n                                  rows={3}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                    </div>\n                    \n                    <div className=\"border-t pt-6 mt-6\">\n                      <FormField\n                        control={crmForm.control}\n                        name=\"apiIntegrations\"\n                        render={() => (\n                          <FormItem>\n                            <FormLabel>API Integrations</FormLabel>\n                            <FormDescription>\n                              Describe any specific API integrations you need for your website\n                            </FormDescription>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"e.g., Google Analytics, Facebook Pixel, Slack notifications, custom REST APIs, third-party services...\"\n                                value={crmIntegration.apiIntegrations || ''}\n                                onChange={(e) => {\n                                  setCrmIntegration(prev => ({ ...prev, apiIntegrations: e.target.value }));\n                                  crmForm.setValue('apiIntegrations', e.target.value);\n                                }}\n                                data-testid=\"textarea-api-integrations\"\n                                rows={4}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"border-t pt-6 mt-6\">\n                      <FormField\n                        control={crmForm.control}\n                        name=\"selectedAutomationPlatforms\"\n                        render={() => (\n                          <FormItem>\n                            <FormLabel>Automation Platforms</FormLabel>\n                            <FormDescription className=\"mb-4\">\n                              Select automation platforms you want to integrate with\n                            </FormDescription>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {[\n                                { id: 'zapier', label: 'Zapier' },\n                                { id: 'make', label: 'Make (formerly Integromat)' }\n                              ].map((platform) => (\n                                <FormItem key={platform.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={crmIntegration.selectedAutomationPlatforms.includes(platform.id as any)}\n                                      onCheckedChange={(checked) => {\n                                        const updatedPlatforms = checked\n                                          ? [...crmIntegration.selectedAutomationPlatforms, platform.id as any]\n                                          : crmIntegration.selectedAutomationPlatforms.filter(id => id !== platform.id);\n                                        setCrmIntegration(prev => ({ ...prev, selectedAutomationPlatforms: updatedPlatforms }));\n                                        crmForm.setValue('selectedAutomationPlatforms', updatedPlatforms);\n                                      }}\n                                      data-testid={`checkbox-automation-${platform.id}`}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"text-sm font-normal\">\n                                    {platform.label}\n                                  </FormLabel>\n                                </FormItem>\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"border-t pt-6 mt-6\">\n                      <FormField\n                        control={crmForm.control}\n                        name=\"selectedEngagementFeatures\"\n                        render={() => (\n                          <FormItem>\n                            <FormLabel>Engagement & Interactivity</FormLabel>\n                            <FormDescription className=\"mb-4\">\n                              Select engagement and interactive features you want to integrate\n                            </FormDescription>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {[\n                                { id: 'animations-motion-effects', label: 'Animations & Motion Effects' },\n                                { id: 'popups-modals', label: 'Pop-ups / Modals (newsletter, promos)' },\n                                { id: 'live-chat-integration', label: 'Live Chat Integration (Intercom, Drift, etc.)' },\n                                { id: 'polls-surveys', label: 'Polls & Surveys' },\n                                { id: 'appointment-booking-scheduling', label: 'Appointment Booking / Scheduling' },\n                                { id: 'event-calendar-ticketing', label: 'Event Calendar & Ticketing' },\n                                { id: 'social-media-feeds-sharing', label: 'Social Media Feeds / Sharing' }\n                              ].map((feature) => (\n                                <FormItem key={feature.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={crmIntegration.selectedEngagementFeatures.includes(feature.id as any)}\n                                      onCheckedChange={(checked) => {\n                                        const updatedFeatures = checked\n                                          ? [...crmIntegration.selectedEngagementFeatures, feature.id as any]\n                                          : crmIntegration.selectedEngagementFeatures.filter(id => id !== feature.id);\n                                        setCrmIntegration(prev => ({ ...prev, selectedEngagementFeatures: updatedFeatures }));\n                                        crmForm.setValue('selectedEngagementFeatures', updatedFeatures);\n                                      }}\n                                      data-testid={`checkbox-engagement-${feature.id}`}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"text-sm font-normal\">\n                                    {feature.label}\n                                  </FormLabel>\n                                </FormItem>\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    {/* Advanced Features Separator */}\n                    <div className=\"border-t pt-6\">\n                      <FormField\n                        control={crmForm.control}\n                        name=\"selectedAdvancedFeatures\"\n                        render={() => (\n                          <FormItem>\n                            <FormLabel>Advanced Features</FormLabel>\n                            <FormDescription className=\"mb-4\">\n                              Select advanced technical features and capabilities for your website\n                            </FormDescription>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {[\n                                { id: 'multilingual-translation-support', label: 'Multilingual / Translation Support' },\n                                { id: 'seo-tools-meta-sitemap-schema', label: 'SEO Tools (meta tags, sitemap, schema)' },\n                                { id: 'analytics-integration-ga4-hotjar', label: 'Analytics Integration (GA4, Hotjar, etc.)' },\n                                { id: 'security-features-ssl-captcha-2fa', label: 'Security Features (SSL, Captcha, 2FA)' },\n                                { id: 'custom-forms-workflows', label: 'Custom Forms & Workflows' },\n                                { id: 'chatbots-ai-powered-scripted', label: 'Chatbots (AI-powered or scripted)' }\n                              ].map((feature) => (\n                                <FormItem key={feature.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={crmIntegration.selectedAdvancedFeatures?.includes(feature.id as any) || false}\n                                      onCheckedChange={(checked) => {\n                                        const currentFeatures = crmIntegration.selectedAdvancedFeatures || [];\n                                        const updatedFeatures = checked\n                                          ? [...currentFeatures, feature.id as any]\n                                          : currentFeatures.filter(id => id !== feature.id);\n                                        setCrmIntegration(prev => ({ ...prev, selectedAdvancedFeatures: updatedFeatures }));\n                                        crmForm.setValue('selectedAdvancedFeatures', updatedFeatures);\n                                      }}\n                                      data-testid={`checkbox-advanced-${feature.id}`}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"text-sm font-normal\">\n                                    {feature.label}\n                                  </FormLabel>\n                                </FormItem>\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* E-Commerce Separator */}\n                    <div className=\"border-t pt-6\">\n                      <FormField\n                        control={crmForm.control}\n                        name=\"selectedECommerceFeatures\"\n                        render={() => (\n                          <FormItem>\n                            <FormLabel>E-Commerce</FormLabel>\n                            <FormDescription className=\"mb-4\">\n                              Select e-commerce features and functionality for your online store\n                            </FormDescription>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {[\n                                { id: 'online-store-shopify-woocommerce', label: 'Online Store (Shopify / WooCommerce)' },\n                                { id: 'product-catalog', label: 'Product Catalog' },\n                                { id: 'shopping-cart-checkout', label: 'Shopping Cart & Checkout' },\n                                { id: 'digital-downloads', label: 'Digital Downloads' },\n                                { id: 'inventory-management', label: 'Inventory Management' },\n                                { id: 'subscription-products', label: 'Subscription Products' },\n                                { id: 'multi-currency-support', label: 'Multi-Currency Support' },\n                                { id: 'discount-codes-coupons', label: 'Discount Codes / Coupons' }\n                              ].map((feature) => (\n                                <FormItem key={feature.id} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={crmIntegration.selectedECommerceFeatures?.includes(feature.id as any) || false}\n                                      onCheckedChange={(checked) => {\n                                        const currentFeatures = crmIntegration.selectedECommerceFeatures || [];\n                                        const updatedFeatures = checked\n                                          ? [...currentFeatures, feature.id as any]\n                                          : currentFeatures.filter(id => id !== feature.id);\n                                        setCrmIntegration(prev => ({ ...prev, selectedECommerceFeatures: updatedFeatures }));\n                                        crmForm.setValue('selectedECommerceFeatures', updatedFeatures);\n                                      }}\n                                      data-testid={`checkbox-ecommerce-${feature.id}`}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"text-sm font-normal\">\n                                    {feature.label}\n                                  </FormLabel>\n                                </FormItem>\n                              ))}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        );\n\n      case 8:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>User Accounts & Membership</CardTitle>\n              <p className=\"text-muted-foreground\">\n                Configure user account and membership features for your website.\n              </p>\n            </CardHeader>\n            <CardContent>\n              <Form {...membershipForm}>\n                <form onSubmit={membershipForm.handleSubmit(onMembershipSubmit)} className=\"space-y-6\">\n                  \n                  {/* Registration & Login */}\n                  <FormField\n                    control={membershipForm.control}\n                    name=\"registrationLogin\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value || false}\n                            onCheckedChange={(checked) => {\n                              const boolValue = checked === true;\n                              field.onChange(boolValue);\n                              setUserAccountsMembership(prev => ({ ...prev, registrationLogin: boolValue }));\n                              membershipForm.setValue(\"registrationLogin\", boolValue);\n                            }}\n                            data-testid=\"checkbox-registration-login\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>\n                            User Registration & Login\n                          </FormLabel>\n                          <FormDescription>\n                            Allow users to create accounts and log in to your website\n                          </FormDescription>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* User Dashboard */}\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={membershipForm.control}\n                      name=\"userDashboardNeeded\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={(checked) => {\n                                const boolValue = checked === true;\n                                field.onChange(boolValue);\n                                setUserAccountsMembership(prev => ({ ...prev, userDashboardNeeded: boolValue }));\n                                membershipForm.setValue(\"userDashboardNeeded\", boolValue);\n                              }}\n                              data-testid=\"checkbox-user-dashboard\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>\n                              User Dashboard Required\n                            </FormLabel>\n                            <FormDescription>\n                              Provide users with a personalized dashboard area\n                            </FormDescription>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    {userAccountsMembership.userDashboardNeeded && (\n                      <FormField\n                        control={membershipForm.control}\n                        name=\"userDashboardFeatures\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Dashboard Features & Functionality</FormLabel>\n                            <FormDescription>\n                              Describe what features and information users should see in their dashboard\n                            </FormDescription>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"e.g., Profile management, order history, download center, account settings, notification preferences, usage analytics, subscription management...\"\n                                rows={4}\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e);\n                                  setUserAccountsMembership(prev => ({ ...prev, userDashboardFeatures: e.target.value }));\n                                }}\n                                data-testid=\"textarea-dashboard-features\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                  </div>\n\n                  {/* Predefined Roles */}\n                  <FormField\n                    control={membershipForm.control}\n                    name=\"predefinedRoles\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Predefined User Roles</FormLabel>\n                        <FormDescription>\n                          Select the standard user roles that will be available on your website\n                        </FormDescription>\n                        <div className=\"flex gap-4\">\n                          {(['admin', 'member', 'guest'] as const).map((role) => (\n                            <FormItem key={role} className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value?.includes(role)}\n                                  onCheckedChange={(checked) => {\n                                    const currentValue = field.value || [];\n                                    if (checked) {\n                                      field.onChange([...currentValue, role]);\n                                    } else {\n                                      field.onChange(currentValue.filter((v) => v !== role));\n                                    }\n                                  }}\n                                  data-testid={`checkbox-role-${role}`}\n                                />\n                              </FormControl>\n                              <FormLabel className=\"capitalize\">\n                                {role}\n                              </FormLabel>\n                            </FormItem>\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Custom Roles */}\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Custom User Roles</h4>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Add custom roles specific to your organization with detailed descriptions\n                      </p>\n                    </div>\n                    \n                    {userAccountsMembership.customRoles.map((role, index) => (\n                      <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <h5 className=\"text-sm font-medium\">Custom Role {index + 1}</h5>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const newCustomRoles = userAccountsMembership.customRoles.filter((_, i) => i !== index);\n                              setUserAccountsMembership(prev => ({ ...prev, customRoles: newCustomRoles }));\n                              membershipForm.setValue(\"customRoles\", newCustomRoles);\n                            }}\n                            data-testid={`button-remove-custom-role-${index}`}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                        \n                        <div className=\"grid gap-3\">\n                          <div>\n                            <Label htmlFor={`custom-role-name-${index}`}>Role Name</Label>\n                            <Input\n                              id={`custom-role-name-${index}`}\n                              placeholder=\"e.g., Editor, Moderator, Supervisor\"\n                              value={role.name}\n                              onChange={(e) => {\n                                const newCustomRoles = [...userAccountsMembership.customRoles];\n                                newCustomRoles[index] = { ...role, name: e.target.value };\n                                setUserAccountsMembership(prev => ({ ...prev, customRoles: newCustomRoles }));\n                                membershipForm.setValue(\"customRoles\", newCustomRoles);\n                              }}\n                              data-testid={`input-custom-role-name-${index}`}\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor={`custom-role-description-${index}`}>Role Description & Responsibilities</Label>\n                            <Textarea\n                              id={`custom-role-description-${index}`}\n                              placeholder=\"Describe what this role can do, their responsibilities, and any special permissions...\"\n                              rows={3}\n                              value={role.description || ''}\n                              onChange={(e) => {\n                                const newCustomRoles = [...userAccountsMembership.customRoles];\n                                newCustomRoles[index] = { ...role, description: e.target.value };\n                                setUserAccountsMembership(prev => ({ ...prev, customRoles: newCustomRoles }));\n                                membershipForm.setValue(\"customRoles\", newCustomRoles);\n                              }}\n                              data-testid={`textarea-custom-role-description-${index}`}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        const newCustomRole = { name: '', description: '' };\n                        const newCustomRoles = [...userAccountsMembership.customRoles, newCustomRole];\n                        setUserAccountsMembership(prev => ({ ...prev, customRoles: newCustomRoles }));\n                        membershipForm.setValue(\"customRoles\", newCustomRoles);\n                      }}\n                      data-testid=\"button-add-custom-role\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Custom Role\n                    </Button>\n                  </div>\n\n                  {/* Membership/Subscription System */}\n                  <FormField\n                    control={membershipForm.control}\n                    name=\"membershipSubscriptionSystem\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-membership-subscription\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Membership / Subscription System</FormLabel>\n                          <FormDescription>\n                            Enable paid memberships or subscription features\n                          </FormDescription>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Membership Details - Only show if Membership/Subscription is enabled */}\n                  {membershipForm.watch(\"membershipSubscriptionSystem\") && (\n                    <FormField\n                      control={membershipForm.control}\n                      name=\"membershipDetails\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Membership Details</FormLabel>\n                          <FormDescription>\n                            Provide details about your membership or subscription offerings\n                          </FormDescription>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Describe your membership tiers, pricing, benefits, subscription duration, payment frequency, etc...\"\n                              {...field}\n                              rows={5}\n                              data-testid=\"textarea-membership-details\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        );\n\n      case 9:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Images & Media</CardTitle>\n              <p className=\"text-muted-foreground\">\n                Help us understand your image needs and preferences for your website.\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              \n              {/* Logo Requirements */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Logo Requirements</h3>\n                <div className=\"grid gap-4\">\n                  <div className=\"space-y-3\">\n                    <label className=\"text-sm font-medium\">Do you have a logo or need one created?</label>\n                    <div className=\"grid gap-3\">\n                      {[\n                        { value: 'have-logo', label: 'I have a logo already', desc: 'Upload your existing logo files' },\n                        { value: 'need-logo', label: 'I need a logo designed', desc: 'We\\'ll create a professional logo for you' },\n                        { value: 'need-variations', label: 'I have a logo but need variations', desc: 'Existing logo with additional formats/versions' }\n                      ].map((option) => (\n                        <label key={option.value} className=\"flex items-start gap-3 p-3 border rounded-lg cursor-pointer hover-elevate\">\n                          <input\n                            type=\"radio\"\n                            name=\"logoNeeds\"\n                            value={option.value}\n                            checked={imageRequirements.logoNeeds === option.value}\n                            onChange={(e) => setImageRequirements(prev => ({ \n                              ...prev, \n                              logoNeeds: e.target.value as any \n                            }))}\n                            className=\"mt-1\"\n                            data-testid={`radio-logo-needs-${option.value}`}\n                          />\n                          <div>\n                            <div className=\"font-medium text-sm\">{option.label}</div>\n                            <div className=\"text-xs text-muted-foreground\">{option.desc}</div>\n                          </div>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {imageRequirements.logoNeeds === 'need-logo' && (\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">\n                        Logo Description (Optional)\n                      </label>\n                      <Textarea\n                        placeholder=\"Describe your logo vision, preferred colors, symbols, or style\"\n                        value={imageRequirements.logoDescription || ''}\n                        onChange={(e) => setImageRequirements(prev => ({ \n                          ...prev, \n                          logoDescription: e.target.value \n                        }))}\n                        className=\"min-h-[80px]\"\n                        data-testid=\"textarea-logo-description\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Specific Image Needs */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">What Types of Photos Do You Need?</h3>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {[\n                    { key: 'teamPhotos', label: 'Team/Staff Photos', desc: 'Professional headshots or team group photos' },\n                    { key: 'productPhotos', label: 'Product Photos', desc: 'High-quality images of your products/services' },\n                    { key: 'facilityPhotos', label: 'Location/Facility Photos', desc: 'Images of your office, store, or workspace' }\n                  ].map((photoType) => (\n                    <label key={photoType.key} className=\"flex items-start gap-3 p-3 border rounded-lg cursor-pointer hover-elevate\">\n                      <Checkbox\n                        checked={imageRequirements[photoType.key as keyof ImageRequirements] as boolean}\n                        onCheckedChange={(checked) => setImageRequirements(prev => ({ \n                          ...prev, \n                          [photoType.key]: checked \n                        }))}\n                        data-testid={`checkbox-${photoType.key}`}\n                      />\n                      <div>\n                        <div className=\"font-medium text-sm\">{photoType.label}</div>\n                        <div className=\"text-xs text-muted-foreground\">{photoType.desc}</div>\n                      </div>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Additional Specific Images */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Other Specific Images Needed</h3>\n                <Textarea\n                  placeholder=\"List any other specific images you need (e.g., 'photos of our manufacturing process', 'before/after examples', 'event photos')\"\n                  value={imageRequirements.specificImages?.join('\\n') || ''}\n                  onChange={(e) => setImageRequirements(prev => ({ \n                    ...prev, \n                    specificImages: e.target.value.split('\\n').filter(line => line.trim()) \n                  }))}\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-specific-images\"\n                />\n              </div>\n\n              {/* Photo Style Preferences */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Photo Style Preference</h3>\n                <div className=\"grid gap-3\">\n                  {[\n                    { value: 'professional-corporate', label: 'Professional Corporate', desc: 'Clean, polished, business-focused imagery' },\n                    { value: 'lifestyle-candid', label: 'Lifestyle & Candid', desc: 'Natural, authentic, everyday moments' },\n                    { value: 'modern-minimalist', label: 'Modern Minimalist', desc: 'Clean, simple, lots of white space' },\n                    { value: 'warm-friendly', label: 'Warm & Friendly', desc: 'Inviting, approachable, community-focused' },\n                    { value: 'high-energy', label: 'High Energy', desc: 'Dynamic, action-oriented, vibrant' },\n                    { value: 'artistic-creative', label: 'Artistic & Creative', desc: 'Unique angles, creative composition, artistic flair' }\n                  ].map((style) => (\n                    <label key={style.value} className=\"flex items-start gap-3 p-3 border rounded-lg cursor-pointer hover-elevate\">\n                      <input\n                        type=\"radio\"\n                        name=\"photoStyle\"\n                        value={style.value}\n                        checked={imageRequirements.preferredPhotoStyle === style.value}\n                        onChange={(e) => setImageRequirements(prev => ({ \n                          ...prev, \n                          preferredPhotoStyle: e.target.value as any \n                        }))}\n                        className=\"mt-1\"\n                        data-testid={`radio-photo-style-${style.value}`}\n                      />\n                      <div>\n                        <div className=\"font-medium text-sm\">{style.label}</div>\n                        <div className=\"text-xs text-muted-foreground\">{style.desc}</div>\n                      </div>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Stock Photography Options */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Stock Photography Options</h3>\n                <div className=\"bg-muted/50 p-4 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    For any images you don't provide, we can source professional stock photography:\n                  </p>\n                  <div className=\"grid gap-3\">\n                    {[\n                      { value: 'free-library', label: 'Free Stock Library', desc: 'High-quality free images (limited selection)' },\n                      { value: 'premium-paid', label: 'Premium Paid Stock', desc: 'Extensive professional library (higher cost)' },\n                      { value: 'mixed', label: 'Mixed Approach', desc: 'Free where possible, premium for key images' }\n                    ].map((option) => (\n                      <label key={option.value} className=\"flex items-start gap-3 p-3 bg-background border rounded-lg cursor-pointer hover-elevate\">\n                        <input\n                          type=\"radio\"\n                          name=\"stockPhotoPreference\"\n                          value={option.value}\n                          checked={imageRequirements.stockPhotoPreference === option.value}\n                          onChange={(e) => setImageRequirements(prev => ({ \n                            ...prev, \n                            stockPhotoPreference: e.target.value as any \n                          }))}\n                          className=\"mt-1\"\n                          data-testid={`radio-stock-preference-${option.value}`}\n                        />\n                        <div>\n                          <div className=\"font-medium text-sm\">{option.label}</div>\n                          <div className=\"text-xs text-muted-foreground\">{option.desc}</div>\n                        </div>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Photo Types Education */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Website Photo Types Guide</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Here are the common types of photos used on professional websites:\n                </p>\n                <div className=\"bg-muted/30 p-4 rounded-lg\">\n                  <div className=\"grid md:grid-cols-2 gap-3\">\n                    {[\n                      { type: 'Hero Images', desc: 'Large banner images that make a strong first impression' },\n                      { type: 'Product/Service Shots', desc: 'Showcase what you offer with clear, detailed imagery' },\n                      { type: 'Team Photos', desc: 'Build trust with professional headshots and team pictures' },\n                      { type: 'Process/Behind-the-Scenes', desc: 'Show how you work and what makes you unique' },\n                      { type: 'Testimonial Support', desc: 'Images that accompany customer reviews and success stories' },\n                      { type: 'Background/Texture Images', desc: 'Subtle patterns or textures that enhance design elements' }\n                    ].map((photoInfo) => (\n                      <div key={photoInfo.type} className=\"flex items-start gap-2\">\n                        <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5 flex-shrink-0\"></div>\n                        <div>\n                          <div className=\"font-medium text-sm\">{photoInfo.type}</div>\n                          <div className=\"text-xs text-muted-foreground\">{photoInfo.desc}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* File Upload */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Upload Your Images</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Upload any logos, photos, or other media files you already have. You can select multiple files at once.\n                </p>\n                <FileUpload\n                  multiple={true}\n                  onFilesSelect={(files) => {\n                    setMediaFiles(prev => [...prev, ...files]);\n                    console.log('Media files uploaded:', files.map(f => f.name));\n                    toast({\n                      title: \"Files Uploaded\",\n                      description: `${files.length} file${files.length > 1 ? 's' : ''} uploaded successfully.`\n                    });\n                  }}\n                  onFileRemoveAt={(index) => {\n                    setMediaFiles(prev => {\n                      const removedFile = prev[index];\n                      const updatedFiles = prev.filter((_, i) => i !== index);\n                      console.log('Media file removed:', removedFile?.name);\n                      toast({\n                        title: \"File Removed\",\n                        description: `${removedFile?.name} has been removed.`\n                      });\n                      return updatedFiles;\n                    });\n                  }}\n                  currentFiles={mediaFiles}\n                  acceptedTypes=\"image/*,video/*\"\n                  maxSize={50}\n                  placeholder=\"Upload logos, photos, videos, or other media files\"\n                />\n              </div>\n\n              {/* Additional Notes */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Additional Notes</h3>\n                <Textarea\n                  placeholder=\"Any other image-related requirements, preferences, or special considerations\"\n                  value={imageRequirements.additionalNotes || ''}\n                  onChange={(e) => setImageRequirements(prev => ({ \n                    ...prev, \n                    additionalNotes: e.target.value \n                  }))}\n                  className=\"min-h-[80px]\"\n                  data-testid=\"textarea-additional-notes\"\n                />\n              </div>\n\n            </CardContent>\n          </Card>\n        );\n\n      case 10:\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Design Preferences</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <DesignStyleSelector\n                preferences={designPreferences}\n                onPreferencesUpdate={setDesignPreferences}\n              />\n            </CardContent>\n          </Card>\n        );\n\n      case 11:\n        // Extract colors from individual color selections, design notes, or defaults based on design style\n        const extractColorsFromPreferences = (notes: string, preferences: DesignPreferences): string[] => {\n          // First priority: Individual color selections\n          const individualColors = [\n            preferences.primaryColor,\n            preferences.secondaryColor,\n            preferences.accentColor\n          ].filter((color): color is string => Boolean(color && color.trim() && color !== \"\"));\n          \n          if (individualColors.length > 0) {\n            return individualColors.slice(0, 3); // Return up to 3 colors\n          }\n          const colorKeywords = {\n            'forest green': '#228B22',\n            'green': '#10B981',\n            'blue': '#3B82F6',\n            'red': '#EF4444',\n            'purple': '#8B5CF6',\n            'orange': '#F97316',\n            'yellow': '#EAB308',\n            'pink': '#EC4899',\n            'teal': '#14B8A6',\n            'indigo': '#6366F1',\n            'grey': '#6B7280',\n            'gray': '#6B7280',\n            'black': '#1F2937',\n            'white': '#F9FAFB'\n          };\n          \n          const foundColors: string[] = [];\n          const notesLower = notes.toLowerCase();\n          \n          // Check for color keywords in notes\n          Object.entries(colorKeywords).forEach(([keyword, hex]) => {\n            if (notesLower.includes(keyword)) {\n              foundColors.push(hex);\n            }\n          });\n          \n          // If forest green specifically mentioned, prioritize it\n          if (notesLower.includes('forest green')) {\n            return ['#228B22', '#2F7D32']; // Forest green variations\n          }\n          \n          // If grey/gray specifically mentioned, prioritize it\n          if (notesLower.includes('grey') || notesLower.includes('gray')) {\n            return ['#6B7280', '#4B5563']; // Grey variations\n          }\n          \n          // Return found colors or style-based defaults\n          if (foundColors.length > 0) {\n            return foundColors.slice(0, 2); // Max 2 colors\n          }\n          \n          // Default colors based on design style\n          switch (designPreferences.selectedStyle) {\n            case 'luxury': return ['#1F2937', '#D4AF37'];\n            case 'tech': return ['#3B82F6', '#6366F1'];\n            case 'creative': return ['#EC4899', '#8B5CF6'];\n            case 'corporate': return ['#1F2937', '#3B82F6'];\n            default: return ['#3B82F6', '#10B981'];\n          }\n        };\n\n        const briefData: CreativeBriefData = {\n          fullName,\n          email,\n          contactNumber,\n          businessName,\n          businessDescription,\n          logoFile: logoFile || undefined,\n          logoDecision: logoDecision || undefined,\n          selectedLogo: selectedLogo || undefined,\n          colors: extractColorsFromPreferences(designPreferences.additionalNotes || '', designPreferences),\n          primaryColor: designPreferences.primaryColor,\n          secondaryColor: designPreferences.secondaryColor,\n          accentColor: designPreferences.accentColor,\n          backgroundColor: designPreferences.backgroundColor,\n          textColor: designPreferences.textColor,\n          fonts: designPreferences.preferredFont ? [designPreferences.preferredFont] : [],\n          siteType: selectedSiteType,\n          pages: pages.map(p => ({ name: p.name, path: p.path })),\n          coreWebsiteFeatures,\n          pageContent: {\n            'Home': 'Welcome to ' + businessName + '. ' + businessDescription,\n            'About': 'Learn more about our story and what drives us.',\n            'Contact': 'Get in touch with us today.'\n          },\n          crmIntegration,\n          userAccountsMembership,\n          images: [], // Mock images\n          designStyle: designPreferences.selectedStyle || '',\n          inspirationLinks: designPreferences.inspirationLinks,\n          designNotes: designPreferences.additionalNotes\n        };\n\n        return (\n          <CreativeBriefReview\n            briefData={briefData}\n            onExportPDF={exportPDF}\n            onEditSection={(section) => console.log('Edit section:', section)}\n          />\n        );\n\n      default:\n        return <div>Step not found</div>;\n    }\n  };\n\n  if (isProjectSubmitted) {\n    // Thank you / completion page\n    return (\n      <div className={`max-w-4xl mx-auto ${className}`}>\n        <Card>\n          <CardContent className=\"pt-8 text-center\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-6\" />\n            <h2 className=\"text-3xl font-bold mb-4\">Thank You!</h2>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Your creative brief has been submitted successfully. Our team will review it and reach out to schedule your kickoff call within 24 hours.\n            </p>\n            <div className=\"flex gap-4 justify-center\">\n              <Button onClick={exportPDF} variant=\"outline\" data-testid=\"button-final-export\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download Brief\n              </Button>\n              <Button onClick={() => console.log('View dashboard')} data-testid=\"button-view-dashboard\">\n                View Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`max-w-6xl mx-auto ${className}`}>\n      <div className=\"mb-8\">\n        <ProgressBar currentStep={currentStep} steps={stepData} />\n      </div>\n      \n      <div className=\"mb-8\">\n        {renderStepContent()}\n      </div>\n      \n      <div className=\"flex justify-between items-center\">\n        <Button\n          variant=\"outline\"\n          onClick={prevStep}\n          disabled={currentStep === 1}\n          className=\"gap-2\"\n          data-testid=\"button-previous\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Previous\n        </Button>\n        \n        <div className=\"text-sm text-muted-foreground\">\n          {currentStep === 11 ? (\n            <span>Ready to submit your creative brief</span>\n          ) : (\n            <span>\n              {canProceed ? \"Ready to continue\" : \"Please complete this step to continue\"}\n            </span>\n          )}\n        </div>\n        \n        {currentStep === 11 ? (\n          <Button\n            onClick={submitProject}\n            disabled={!canProceed}\n            className=\"gap-2\"\n            data-testid=\"button-submit-project\"\n          >\n            Submit Project\n            <ArrowRight className=\"w-4 h-4\" />\n          </Button>\n        ) : (\n          <Button\n            onClick={() => nextStep()}\n            disabled={!canProceed || isSavingProgress}\n            className=\"gap-2\"\n            data-testid=\"button-next\"\n          >\n            Next\n            <ArrowRight className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":163408},"client/src/components/ProgressBar.tsx":{"content":"import { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle } from \"lucide-react\";\n\nexport interface Step {\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\ninterface ProgressBarProps {\n  currentStep: number;\n  steps: Step[];\n  className?: string;\n}\n\nexport default function ProgressBar({ currentStep, steps, className = \"\" }: ProgressBarProps) {\n  const progressPercentage = ((currentStep - 1) / (steps.length - 1)) * 100;\n  const completedSteps = steps.filter(step => step.completed).length;\n  \n  return (\n    <div className={`w-full ${className}`}>\n      <div className=\"flex justify-between items-center mb-4\">\n        <div className=\"text-sm text-muted-foreground\">\n          Step {currentStep} of {steps.length}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          {completedSteps}/{steps.length} completed\n        </div>\n      </div>\n      \n      <div className=\"relative mb-8\">\n        <Progress value={progressPercentage} className=\"h-2\" />\n        \n        <div className=\"flex justify-between mt-4\">\n          {steps.map((step) => (\n            <div key={step.id} className=\"flex flex-col items-center relative\">\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium border-2 transition-all ${\n                  step.completed\n                    ? \"bg-primary text-primary-foreground border-primary\"\n                    : step.id === currentStep\n                    ? \"bg-background text-foreground border-primary\"\n                    : \"bg-muted text-muted-foreground border-border\"\n                }`}\n              >\n                {step.completed ? (\n                  <CheckCircle className=\"w-4 h-4\" />\n                ) : (\n                  step.id\n                )}\n              </div>\n              <span className=\"mt-2 text-xs text-center text-muted-foreground max-w-20 leading-tight\">\n                {step.title}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2058},"client/src/components/SiteTypeSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Store, \n  FileText, \n  Wrench, \n  BookOpen, \n  Calendar, \n  Layers \n} from \"lucide-react\";\n\nexport interface SiteType {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  features: string[];\n}\n\ninterface SiteTypeSelectorProps {\n  selectedType?: string;\n  onTypeSelect: (typeId: string) => void;\n  className?: string;\n}\n\nconst siteTypes: SiteType[] = [\n  {\n    id: \"brochure\",\n    name: \"Brochure Site\",\n    description: \"Professional company website with key information\",\n    icon: FileText,\n    features: [\"About Us\", \"Services\", \"Contact\", \"Team\"]\n  },\n  {\n    id: \"ecommerce\",\n    name: \"Online Store\",\n    description: \"Sell products or services online with payment processing\",\n    icon: Store,\n    features: [\"Product Catalog\", \"Shopping Cart\", \"Payment\", \"Orders\"]\n  },\n  {\n    id: \"service\",\n    name: \"Service Business\",\n    description: \"Showcase services and generate leads\",\n    icon: Wrench,\n    features: [\"Services\", \"Portfolio\", \"Testimonials\", \"Quote Form\"]\n  },\n  {\n    id: \"blog\",\n    name: \"Blog/Content\",\n    description: \"Share articles, news, and educational content\",\n    icon: BookOpen,\n    features: [\"Articles\", \"Categories\", \"Search\", \"Comments\"]\n  },\n  {\n    id: \"booking\",\n    name: \"Booking System\",\n    description: \"Allow clients to book appointments or services\",\n    icon: Calendar,\n    features: [\"Calendar\", \"Appointments\", \"Payments\", \"Reminders\"]\n  },\n  {\n    id: \"custom\",\n    name: \"Custom Solution\",\n    description: \"Unique requirements that need a tailored approach\",\n    icon: Layers,\n    features: [\"Custom Features\", \"Integrations\", \"Workflows\", \"Scalable\"]\n  }\n];\n\nexport default function SiteTypeSelector({ \n  selectedType, \n  onTypeSelect, \n  className = \"\" \n}: SiteTypeSelectorProps) {\n  return (\n    <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 ${className}`}>\n      {siteTypes.map((type) => {\n        const IconComponent = type.icon;\n        const isSelected = selectedType === type.id;\n        \n        return (\n          <Card\n            key={type.id}\n            className={`p-6 cursor-pointer transition-all hover-elevate ${\n              isSelected \n                ? \"ring-2 ring-primary bg-primary/5\" \n                : \"hover:shadow-md\"\n            }`}\n            onClick={() => onTypeSelect(type.id)}\n            data-testid={`card-site-type-${type.id}`}\n          >\n            <div className=\"flex flex-col items-start space-y-4\">\n              <div className={`p-3 rounded-lg ${\n                isSelected ? \"bg-primary/10\" : \"bg-muted\"\n              }`}>\n                <IconComponent className={`w-6 h-6 ${\n                  isSelected ? \"text-primary\" : \"text-muted-foreground\"\n                }`} />\n              </div>\n              \n              <div className=\"space-y-2 w-full\">\n                <h3 className=\"font-semibold text-lg\">{type.name}</h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  {type.description}\n                </p>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {type.features.map((feature) => (\n                  <Badge \n                    key={feature} \n                    variant=\"secondary\" \n                    className=\"text-xs\"\n                  >\n                    {feature}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":3659},"client/src/components/SitemapBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  X, \n  GripVertical, \n  Home, \n  FileText, \n  Users, \n  Mail,\n  ShoppingBag,\n  Briefcase\n} from \"lucide-react\";\n\nexport interface Page {\n  id: string;\n  name: string;\n  path: string;\n  required: boolean;\n  icon?: React.ComponentType<{ className?: string }>;\n}\n\ninterface SitemapBuilderProps {\n  pages: Page[];\n  onPagesUpdate: (pages: Page[]) => void;\n  suggestedPages?: Page[];\n  className?: string;\n}\n\nconst pageIcons: Record<string, React.ComponentType<{ className?: string }>> = {\n  home: Home,\n  about: Users,\n  services: Briefcase,\n  products: ShoppingBag,\n  contact: Mail,\n  blog: FileText\n};\n\nexport default function SitemapBuilder({ \n  pages, \n  onPagesUpdate, \n  suggestedPages = [],\n  className = \"\" \n}: SitemapBuilderProps) {\n  const [newPageName, setNewPageName] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(true);\n\n  const addPage = (page?: Page) => {\n    if (page) {\n      // Add suggested page\n      const newPages = [...pages, page];\n      onPagesUpdate(newPages);\n      console.log('Added suggested page:', page.name);\n    } else if (newPageName.trim()) {\n      // Add custom page\n      const newPage: Page = {\n        id: Date.now().toString(),\n        name: newPageName.trim(),\n        path: `/${newPageName.trim().toLowerCase().replace(/\\s+/g, '-')}`,\n        required: false\n      };\n      const newPages = [...pages, newPage];\n      onPagesUpdate(newPages);\n      setNewPageName(\"\");\n      console.log('Added custom page:', newPage.name);\n    }\n  };\n\n  const removePage = (pageId: string) => {\n    const pageToRemove = pages.find(p => p.id === pageId);\n    if (pageToRemove && !pageToRemove.required) {\n      const newPages = pages.filter(p => p.id !== pageId);\n      onPagesUpdate(newPages);\n      console.log('Removed page:', pageToRemove.name);\n    }\n  };\n\n  const availableSuggestions = suggestedPages.filter(\n    suggestion => !pages.some(page => page.id === suggestion.id)\n  );\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Current Pages */}\n      <div>\n        <h3 className=\"font-semibold text-lg mb-4\">Your Website Pages</h3>\n        <div className=\"space-y-3\">\n          {pages.map((page, index) => {\n            const IconComponent = page.icon || pageIcons[page.name.toLowerCase()] || FileText;\n            \n            return (\n              <Card key={page.id} className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <GripVertical className=\"w-4 h-4 text-muted-foreground cursor-grab\" />\n                    <IconComponent className=\"w-5 h-5 text-primary\" />\n                    <div>\n                      <div className=\"font-medium\">{page.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{page.path}</div>\n                    </div>\n                    {page.required && (\n                      <Badge variant=\"outline\" className=\"ml-2\">Required</Badge>\n                    )}\n                  </div>\n                  \n                  {!page.required && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removePage(page.id)}\n                      data-testid={`button-remove-page-${page.id}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Add Custom Page */}\n      <div>\n        <h4 className=\"font-medium mb-3\">Add Custom Page</h4>\n        <div className=\"flex space-x-2\">\n          <Input\n            placeholder=\"Page name (e.g., Portfolio, FAQ)\"\n            value={newPageName}\n            onChange={(e) => setNewPageName(e.target.value)}\n            onKeyDown={(e) => e.key === 'Enter' && addPage()}\n            data-testid=\"input-new-page\"\n          />\n          <Button\n            onClick={() => addPage()}\n            disabled={!newPageName.trim()}\n            data-testid=\"button-add-page\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add\n          </Button>\n        </div>\n      </div>\n\n      {/* Suggested Pages */}\n      {availableSuggestions.length > 0 && showSuggestions && (\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-medium\">Suggested Pages</h4>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSuggestions(false)}\n              data-testid=\"button-hide-suggestions\"\n            >\n              Hide\n            </Button>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n            {availableSuggestions.map((suggestion) => {\n              const IconComponent = suggestion.icon || pageIcons[suggestion.name.toLowerCase()] || FileText;\n              \n              return (\n                <Button\n                  key={suggestion.id}\n                  variant=\"outline\"\n                  className=\"justify-start hover-elevate\"\n                  onClick={() => addPage(suggestion)}\n                  data-testid={`button-add-suggested-${suggestion.id}`}\n                >\n                  <IconComponent className=\"w-4 h-4 mr-2\" />\n                  {suggestion.name}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5751},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    const initialTheme = savedTheme || systemTheme;\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n    console.log('Theme toggled to:', newTheme);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1190},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3890},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CreativeBriefReview.tsx":{"content":"import { useState } from 'react';\nimport CreativeBriefReview, { type CreativeBriefData } from '../CreativeBriefReview';\n\nexport default function CreativeBriefReviewExample() {\n  const [briefData] = useState<CreativeBriefData>({\n    businessName: 'Acme Design Studio',\n    businessDescription: 'Creative design studio specializing in branding and web design for small businesses.',\n    colors: ['#3B82F6', '#10B981', '#F59E0B'],\n    fonts: ['Inter', 'Playfair Display'],\n    siteType: 'service',\n    pages: [\n      { name: 'Home', path: '/' },\n      { name: 'About', path: '/about' },\n      { name: 'Services', path: '/services' },\n      { name: 'Portfolio', path: '/portfolio' },\n      { name: 'Contact', path: '/contact' }\n    ],\n    pageContent: {\n      'Home': 'Welcome to Acme Design Studio. We create beautiful, functional designs that help your business stand out.',\n      'About': 'Our team of experienced designers is passionate about creating impactful visual solutions.',\n      'Services': 'We offer comprehensive design services including branding, web design, and marketing materials.'\n    },\n    images: [],\n    designStyle: 'modern',\n    inspirationLinks: ['https://www.apple.com', 'https://www.stripe.com'],\n    designNotes: 'Clean, professional design with emphasis on typography and whitespace.'\n  });\n  \n  const handleExportPDF = () => {\n    console.log('Exporting creative brief as PDF...');\n  };\n  \n  const handleEditSection = (section: string) => {\n    console.log('Editing section:', section);\n  };\n  \n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <CreativeBriefReview\n        briefData={briefData}\n        onExportPDF={handleExportPDF}\n        onEditSection={handleEditSection}\n      />\n    </div>\n  );\n}","size_bytes":1742},"client/src/components/examples/Dashboard.tsx":{"content":"import { useState } from 'react';\nimport Dashboard, { type Project } from '../Dashboard';\n\nexport default function DashboardExample() {\n  const [projects] = useState<Project[]>([\n    {\n      id: '1',\n      name: 'Acme Design Studio Website',\n      status: 'in_progress',\n      createdAt: '2024-01-15T10:00:00Z',\n      updatedAt: '2024-01-20T14:30:00Z',\n      type: 'Service Business',\n      progress: 65\n    },\n    {\n      id: '2',\n      name: 'Local Bakery Online Store',\n      status: 'completed',\n      createdAt: '2024-01-10T09:00:00Z',\n      updatedAt: '2024-01-25T16:00:00Z',\n      type: 'E-commerce',\n      progress: 100\n    },\n    {\n      id: '3',\n      name: 'Tech Startup Blog',\n      status: 'in_review',\n      createdAt: '2024-01-20T11:00:00Z',\n      updatedAt: '2024-01-22T10:00:00Z',\n      type: 'Blog/Content',\n      progress: 45\n    }\n  ]);\n  \n  const handleCreateProject = () => {\n    console.log('Creating new project...');\n  };\n  \n  const handleViewProject = (id: string) => {\n    console.log('Viewing project:', id);\n  };\n  \n  const handleEditProject = (id: string) => {\n    console.log('Editing project:', id);\n  };\n  \n  const handleExportProject = (id: string) => {\n    console.log('Exporting project:', id);\n  };\n  \n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      <Dashboard\n        projects={projects}\n        userRole=\"client\"\n        onCreateProject={handleCreateProject}\n        onViewProject={handleViewProject}\n        onEditProject={handleEditProject}\n        onExportProject={handleExportProject}\n      />\n    </div>\n  );\n}","size_bytes":1567},"client/src/components/examples/DesignStyleSelector.tsx":{"content":"import { useState } from 'react';\nimport DesignStyleSelector, { type DesignPreferences } from '../DesignStyleSelector';\n\nexport default function DesignStyleSelectorExample() {\n  const [preferences, setPreferences] = useState<DesignPreferences>({\n    selectedStyle: 'modern',\n    inspirationLinks: [\n      'https://www.apple.com',\n      'https://www.stripe.com'\n    ],\n    additionalNotes: 'We want something clean and professional that builds trust with our clients.'\n  });\n  \n  const handlePreferencesUpdate = (updatedPreferences: DesignPreferences) => {\n    console.log('Design preferences updated:', updatedPreferences);\n    setPreferences(updatedPreferences);\n  };\n  \n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\">Design Preferences</h2>\n        <p className=\"text-muted-foreground\">\n          Help us understand your visual preferences and design requirements.\n        </p>\n      </div>\n      <DesignStyleSelector\n        preferences={preferences}\n        onPreferencesUpdate={handlePreferencesUpdate}\n      />\n    </div>\n  );\n}","size_bytes":1119},"client/src/components/examples/FileUpload.tsx":{"content":"import { useState } from 'react';\nimport FileUpload from '../FileUpload';\n\nexport default function FileUploadExample() {\n  const [file, setFile] = useState<File | null>(null);\n  \n  const handleFileSelect = (selectedFile: File) => {\n    console.log('File selected:', selectedFile.name);\n    setFile(selectedFile);\n  };\n  \n  const handleFileRemove = () => {\n    console.log('File removed');\n    setFile(null);\n  };\n  \n  return (\n    <div className=\"max-w-md mx-auto p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Upload Your Logo</h3>\n      <FileUpload\n        onFileSelect={handleFileSelect}\n        onFileRemove={handleFileRemove}\n        currentFile={file}\n        acceptedTypes=\"image/*\"\n        maxSize={5}\n        placeholder=\"Drop your logo here or click to browse\"\n      />\n    </div>\n  );\n}","size_bytes":805},"client/src/components/examples/LandingPage.tsx":{"content":"import LandingPage from '../LandingPage';\n\nexport default function LandingPageExample() {\n  const handleGetStarted = () => {\n    console.log('Get started clicked - redirect to onboarding');\n  };\n  \n  const handleLogin = () => {\n    console.log('Login clicked - redirect to auth');\n  };\n  \n  return (\n    <LandingPage \n      onGetStarted={handleGetStarted}\n      onLogin={handleLogin}\n    />\n  );\n}","size_bytes":397},"client/src/components/examples/OnboardingWizard.tsx":{"content":"import OnboardingWizard from '../OnboardingWizard';\n\nexport default function OnboardingWizardExample() {\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <OnboardingWizard />\n    </div>\n  );\n}","size_bytes":213},"client/src/components/examples/ProgressBar.tsx":{"content":"import ProgressBar, { type Step } from '../ProgressBar';\n\nexport default function ProgressBarExample() {\n  const steps: Step[] = [\n    { id: 1, title: \"Welcome\", completed: true },\n    { id: 2, title: \"Business\", completed: true },\n    { id: 3, title: \"Branding\", completed: false },\n    { id: 4, title: \"Purpose\", completed: false },\n    { id: 5, title: \"Sitemap\", completed: false },\n    { id: 6, title: \"Copy\", completed: false },\n    { id: 7, title: \"Media\", completed: false },\n    { id: 8, title: \"Design\", completed: false },\n    { id: 9, title: \"Review\", completed: false },\n  ];\n  \n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <ProgressBar currentStep={3} steps={steps} />\n    </div>\n  );\n}","size_bytes":715},"client/src/components/examples/SiteTypeSelector.tsx":{"content":"import { useState } from 'react';\nimport SiteTypeSelector from '../SiteTypeSelector';\n\nexport default function SiteTypeSelectorExample() {\n  const [selectedType, setSelectedType] = useState<string>('brochure');\n  \n  const handleTypeSelect = (typeId: string) => {\n    console.log('Site type selected:', typeId);\n    setSelectedType(typeId);\n  };\n  \n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\">What type of website do you need?</h2>\n        <p className=\"text-muted-foreground\">\n          Select the option that best describes your website requirements.\n        </p>\n      </div>\n      <SiteTypeSelector \n        selectedType={selectedType}\n        onTypeSelect={handleTypeSelect}\n      />\n    </div>\n  );\n}","size_bytes":793},"client/src/components/examples/SitemapBuilder.tsx":{"content":"import { useState } from 'react';\nimport SitemapBuilder, { type Page } from '../SitemapBuilder';\nimport { Home, Users, Briefcase, Mail } from 'lucide-react';\n\nexport default function SitemapBuilderExample() {\n  const [pages, setPages] = useState<Page[]>([\n    { id: '1', name: 'Home', path: '/', required: true, icon: Home },\n    { id: '2', name: 'About', path: '/about', required: false, icon: Users },\n    { id: '3', name: 'Services', path: '/services', required: false, icon: Briefcase },\n    { id: '4', name: 'Contact', path: '/contact', required: true, icon: Mail }\n  ]);\n  \n  const suggestedPages: Page[] = [\n    { id: 'portfolio', name: 'Portfolio', path: '/portfolio', required: false },\n    { id: 'testimonials', name: 'Testimonials', path: '/testimonials', required: false },\n    { id: 'blog', name: 'Blog', path: '/blog', required: false },\n    { id: 'faq', name: 'FAQ', path: '/faq', required: false },\n    { id: 'team', name: 'Team', path: '/team', required: false },\n    { id: 'pricing', name: 'Pricing', path: '/pricing', required: false }\n  ];\n  \n  const handlePagesUpdate = (updatedPages: Page[]) => {\n    console.log('Pages updated:', updatedPages);\n    setPages(updatedPages);\n  };\n  \n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\">Build Your Site Map</h2>\n        <p className=\"text-muted-foreground\">\n          Add, remove, and organize the pages for your website. Required pages cannot be removed.\n        </p>\n      </div>\n      <SitemapBuilder\n        pages={pages}\n        onPagesUpdate={handlePagesUpdate}\n        suggestedPages={suggestedPages}\n      />\n    </div>\n  );\n}","size_bytes":1683},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between max-w-md\">\n        <span>Toggle theme:</span>\n        <ThemeToggle />\n      </div>\n    </div>\n  );\n}","size_bytes":283},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"comprehensive_application_prompt.md":{"content":"# Client Onboarding Portal - Complete Application Prompt\n\nBuild a comprehensive Client Onboarding Portal for a web design & development agency featuring a multi-step wizard that guides new clients through creating a complete creative brief for their website projects.\n\n## Core Features & Architecture\n\n### Tech Stack Requirements\n- **Frontend**: React with TypeScript, Tailwind CSS, shadcn/ui components\n- **Backend**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **File Handling**: File uploads with 10MB payload limits\n- **AI Integration**: OpenAI API for logo generation and content creation\n- **PDF Generation**: jsPDF for creative brief exports\n- **Routing**: Wouter for client-side routing\n- **State Management**: React Query for API state management\n\n### Database Schema (shared/schema.ts)\nCreate comprehensive schemas for:\n\n```typescript\n// Business Information\nbusinessInfo: {\n  businessName: string\n  businessDescription: string\n  industry: string\n  targetAudience: string\n  keyServices: string[]\n  competitorAnalysis: string\n}\n\n// Logo Management\nlogoDecision: 'have-logo' | 'need-logo' | 'generate-logo'\nlogoFile: File (optional)\nselectedLogo: string (optional - for AI generated)\n\n// Website Structure\nsiteType: 'business' | 'ecommerce' | 'portfolio' | 'blog' | 'nonprofit'\npages: Array<{ name: string, path: string, description: string }>\n\n// Design Preferences\ndesignPreferences: {\n  selectedStyle: 'modern' | 'luxury' | 'playful' | 'corporate' | 'minimalist'\n  colorTheme: 'blue-professional' | 'green-nature' | 'purple-creative' | 'orange-energetic' | 'grey-minimal' | 'red-bold'\n  inspirationLinks: string[]\n  additionalNotes: string\n}\n\n// Image Requirements\nimageRequirements: {\n  logoNeeds: 'need-logo' | 'have-logo' | 'generate-logo'\n  stockPhotos: Array<{ category: string, description: string, quantity: number }>\n  customPhotography: boolean\n  existingAssets: File[]\n}\n\n// Generated Content\npageContent: Record<string, { title: string, content: string }>\n```\n\n## Step-by-Step Wizard Implementation\n\n### Step 1: Welcome & Introduction\n- Welcome message explaining the onboarding process\n- Overview of what will be collected\n- Estimated time to complete\n\n### Step 2: Business Information Collection\n- Business name (required)\n- Business description textarea\n- Industry dropdown selection\n- Target audience description\n- Key services/products (dynamic array input)\n- Competitor analysis textarea\n\n### Step 3: Logo Decision & Management\nThree-option radio selection:\n- **\"I have a logo\"** → File upload component\n- **\"I need a logo designed\"** → Note for design team\n- **\"Generate logo with AI\"** → AI logo generation interface\n\n#### AI Logo Generation Features:\n- Text prompt input for logo description\n- Generate 4 logo variations using OpenAI DALL-E\n- Grid display of generated options\n- Click to select preferred logo\n- Download/save selected logo\n\n### Step 4: Website Type Selection\nRadio button selection with descriptions:\n- **Business Website** - Professional corporate presence\n- **E-commerce Store** - Online retail platform\n- **Portfolio Site** - Showcase work/services\n- **Blog/Content Site** - Content-focused platform\n- **Nonprofit Organization** - Charity/cause-driven site\n\n### Step 5: Sitemap Generation & Page Planning\n- Display default pages based on selected website type\n- Dynamic page management:\n  - Add custom pages\n  - Edit page names and descriptions\n  - Remove unnecessary pages\n  - Reorder page hierarchy\n- Each page includes: name, URL path, purpose description\n\n### Step 6: AI-Powered Content Generation\n- Generate content for each defined page using OpenAI\n- Show loading states during generation\n- Display generated content in expandable cards\n- Allow content editing and customization\n- Regenerate individual page content if needed\n\n### Step 7: Image & Media Requirements\nMulti-section form:\n- **Logo status confirmation**\n- **Stock photography needs**:\n  - Category selection (business, lifestyle, technology, etc.)\n  - Quantity requirements per category\n  - Specific description requests\n- **Custom photography requirements**\n- **Existing asset uploads**\n\n### Step 8: Design Preferences & Color Themes\nTwo-part selection:\n\n#### Design Style Selection:\n- Modern & Clean\n- Luxury & Elegant  \n- Playful & Creative\n- Corporate & Professional\n- Minimalist & Simple\n\n#### Color Theme Selection (6 Professional Themes):\nVisual cards showing color swatches for:\n- **Professional Blue** - Primary: #3B82F6, Secondary: #1E40AF, Accent: #60A5FA\n- **Natural Green** - Primary: #10B981, Secondary: #059669, Accent: #34D399\n- **Creative Purple** - Primary: #8B5CF6, Secondary: #7C3AED, Accent: #A78BFA\n- **Energetic Orange** - Primary: #F97316, Secondary: #EA580C, Accent: #FB923C\n- **Minimal Grey** - Primary: #6B7280, Secondary: #4B5563, Accent: #9CA3AF\n- **Bold Red** - Primary: #EF4444, Secondary: #DC2626, Accent: #F87171\n\nEach theme card displays:\n- Theme name and description\n- Visual color palette preview\n- Click to select with visual feedback\n\n### Step 9: Creative Brief Review\nComprehensive review page displaying:\n- **Business Overview** - Name, description, industry\n- **Logo Section** - Display uploaded/generated logo\n- **Website Structure** - Site type and page list\n- **Generated Content** - Expandable sections for each page\n- **Design Direction** - Selected style and color theme with swatches\n- **Image Requirements** - Summary of photography needs\n- **Color Palette** - Visual display of selected theme colors\n\n### Step 10: PDF Export & Submission\n- Generate comprehensive PDF creative brief including:\n  - All collected business information\n  - Embedded logo (if available)\n  - Complete page content\n  - Design preferences and color swatches\n  - Image requirements summary\n- Download PDF functionality\n- Submit project for review\n- Confirmation screen with next steps\n\n## Key Technical Features\n\n### File Upload System\n- Support for image files (PNG, JPG, SVG)\n- 10MB file size limit\n- Progress indicators\n- Error handling and validation\n- Secure file storage\n\n### AI Integration\n- **Logo Generation**: OpenAI DALL-E API integration\n- **Content Creation**: GPT-4 for page content generation\n- Proper API key management\n- Rate limiting and error handling\n- Loading states and user feedback\n\n### Color Intelligence System\n- **Theme Priority**: Selected color themes override text-based extraction\n- **Smart Color Extraction**: Parse color keywords from design notes\n- **Comprehensive Color Support**: Recognize variations (grey/gray, navy/dark blue)\n- **Color Mapping**: Consistent color application throughout the system\n\n### PDF Generation\n- **Complete Creative Brief**: All collected information in professional format\n- **Embedded Assets**: Include logos and color swatches\n- **Proper Formatting**: Clean, readable layout with sections\n- **Async File Handling**: Proper base64 encoding for embedded images\n\n### State Management\n- **Multi-Step Navigation**: Forward/backward navigation with validation\n- **Data Persistence**: Maintain state across steps\n- **Form Validation**: Comprehensive validation for each step\n- **Progress Tracking**: Visual progress indicator\n\n## UI/UX Requirements\n\n### Design System\n- **Component Library**: Use shadcn/ui components consistently\n- **Color Theming**: Support for light/dark mode\n- **Responsive Design**: Mobile-first approach\n- **Interactive Elements**: Hover states, loading indicators, transitions\n- **Visual Feedback**: Toast notifications, success states, error messages\n\n### Navigation\n- **Step Indicator**: Progress bar showing current step\n- **Navigation Controls**: Previous/Next buttons with proper validation\n- **Sidebar Navigation**: Optional quick navigation between completed steps\n\n### Accessibility\n- **Keyboard Navigation**: Full keyboard support\n- **Screen Reader Support**: Proper ARIA labels\n- **Focus Management**: Clear focus indicators\n- **Color Contrast**: WCAG compliant color combinations\n\n## Advanced Features\n\n### Error Handling\n- **Network Errors**: Graceful handling of API failures\n- **Validation Errors**: Clear field-level error messages\n- **File Upload Errors**: Size limits, format validation\n- **AI Generation Failures**: Retry mechanisms and fallbacks\n\n### Performance Optimization\n- **Lazy Loading**: Load steps and content as needed\n- **Image Optimization**: Compress and resize uploaded images\n- **API Efficiency**: Batch requests where possible\n- **Caching**: Cache generated content and user inputs\n\n### Development Environment\n- **Local Development**: Support for both Replit and local environments\n- **Hot Reloading**: Vite setup for rapid development\n- **TypeScript**: Full type safety throughout the application\n- **Code Organization**: Modular component structure\n\n## Success Criteria\n\nThe completed application should:\n1. **Guide users through a complete 10-step onboarding process**\n2. **Collect comprehensive business and project information**\n3. **Generate professional logos using AI when requested**\n4. **Create intelligent sitemaps based on business type**\n5. **Generate relevant content for all pages using AI**\n6. **Provide professional color theme selection with visual previews**\n7. **Export a complete, professional PDF creative brief**\n8. **Handle file uploads securely with proper validation**\n9. **Provide excellent user experience with proper loading states**\n10. **Work seamlessly in both development and production environments**\n\n## Implementation Notes\n\n### Priority Order:\n1. Core wizard structure and navigation\n2. Database schema and API routes\n3. Basic form collection (steps 1-5)\n4. AI integrations (logo and content generation)\n5. Design preferences and color theme selection\n6. PDF export functionality\n7. Polish, error handling, and optimization\n\n### Critical Technical Details:\n- **Payload Limits**: Configure server for 10MB uploads\n- **AI API Integration**: Proper OpenAI API usage with error handling\n- **Color System**: Implement intelligent color extraction and theme prioritization\n- **PDF Generation**: Async file handling for embedded assets\n- **Type Safety**: Comprehensive TypeScript types for all data structures\n\nThis prompt provides a complete specification for recreating the entire client onboarding portal with all its advanced features and functionality.","size_bytes":10286},"client/src/components/FeatureSelection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { websiteFeatures, type WebsiteFeatureCategory, type FeatureSelection } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, Circle, Save, Star, AlertCircle } from \"lucide-react\";\n\ninterface FeatureSelectionProps {\n  userId?: string;\n  projectId?: string;\n  onSaved?: (selection: FeatureSelection) => void;\n}\n\ntype Priority = 'low' | 'medium' | 'high';\n\nconst priorityColors = {\n  low: 'bg-gray-100 text-gray-800',\n  medium: 'bg-yellow-100 text-yellow-800',\n  high: 'bg-red-100 text-red-800'\n};\n\nconst priorityIcons = {\n  low: Circle,\n  medium: AlertCircle,\n  high: Star\n};\n\nexport default function FeatureSelection({ userId, projectId, onSaved }: FeatureSelectionProps) {\n  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);\n  const [priority, setPriority] = useState<{ [key: string]: Priority }>({});\n  const [notes, setNotes] = useState('');\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load existing feature selection if available\n  const { data: existingSelection, isLoading } = useQuery<any>({\n    queryKey: ['/api/feature-selections/user', userId],\n    enabled: !!userId\n  });\n\n  useEffect(() => {\n    if (existingSelection) {\n      setSelectedFeatures(existingSelection.selectedFeatures || []);\n      setPriority(existingSelection.priority || {});\n      setNotes(existingSelection.notes || '');\n    }\n  }, [existingSelection]);\n\n  // Save feature selection mutation\n  const saveFeatureSelection = useMutation({\n    mutationFn: async (selection: FeatureSelection) => {\n      let response: Response;\n      \n      if (existingSelection?.id) {\n        response = await apiRequest('PUT', `/api/feature-selections/${existingSelection.id}`, selection);\n      } else {\n        response = await apiRequest('POST', '/api/feature-selections', {\n          ...selection,\n          userId,\n          projectId\n        });\n      }\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to save feature selection');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/feature-selections/user', userId] });\n      toast({\n        title: \"Feature Selection Saved\",\n        description: \"Your feature preferences have been successfully saved.\"\n      });\n      onSaved?.(data);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Save Failed\",\n        description: error.message || \"There was an error saving your feature selection. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleFeatureToggle = (feature: string, checked: boolean) => {\n    if (checked) {\n      setSelectedFeatures(prev => [...prev, feature]);\n    } else {\n      setSelectedFeatures(prev => prev.filter(f => f !== feature));\n      setPriority(prev => {\n        const newPriority = { ...prev };\n        delete newPriority[feature];\n        return newPriority;\n      });\n    }\n  };\n\n  const handlePriorityChange = (feature: string, newPriority: Priority) => {\n    setPriority(prev => ({\n      ...prev,\n      [feature]: newPriority\n    }));\n  };\n\n  const toggleCategoryExpansion = (category: string) => {\n    setExpandedCategories(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(category)) {\n        newSet.delete(category);\n      } else {\n        newSet.add(category);\n      }\n      return newSet;\n    });\n  };\n\n  const handleSave = () => {\n    saveFeatureSelection.mutate({\n      selectedFeatures,\n      priority,\n      notes: notes.trim() || undefined\n    });\n  };\n\n  const getCategoryStats = (category: WebsiteFeatureCategory) => {\n    const categoryFeatures = websiteFeatures[category];\n    const selectedInCategory = categoryFeatures.filter(feature => selectedFeatures.includes(feature));\n    return {\n      total: categoryFeatures.length,\n      selected: selectedInCategory.length\n    };\n  };\n\n  const isFeatureSelected = (feature: string) => selectedFeatures.includes(feature);\n  const isCategoryExpanded = (category: string) => expandedCategories.has(category);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n              <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"feature-selection-page\">\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"title-feature-selection\">\n          Website Feature Selection\n        </h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Choose the features and functionalities you'd like to include on your website. \n          You can prioritize features and add notes to help us understand your needs better.\n        </p>\n      </div>\n\n      {/* Summary Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-5 h-5\" />\n            <span>Selection Summary</span>\n          </CardTitle>\n          <CardDescription>\n            {selectedFeatures.length} features selected across {Object.keys(websiteFeatures).length} categories\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* Feature Categories */}\n      <div className=\"space-y-4\">\n        {(Object.keys(websiteFeatures) as WebsiteFeatureCategory[]).map((category) => {\n          const stats = getCategoryStats(category);\n          const isExpanded = isCategoryExpanded(category);\n          \n          return (\n            <Card key={category} className=\"overflow-hidden\">\n              <CardHeader \n                className=\"cursor-pointer hover-elevate\"\n                onClick={() => toggleCategoryExpansion(category)}\n                data-testid={`category-header-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <CardTitle className=\"text-lg\">{category}</CardTitle>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {stats.selected}/{stats.total} selected\n                    </Badge>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-toggle-${category.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {isExpanded ? '−' : '+'}\n                  </Button>\n                </div>\n              </CardHeader>\n              \n              {isExpanded && (\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-4\">\n                    {websiteFeatures[category].map((feature) => {\n                      const isSelected = isFeatureSelected(feature);\n                      const featurePriority = priority[feature];\n                      const PriorityIcon = featurePriority ? priorityIcons[featurePriority] : Circle;\n                      \n                      return (\n                        <div key={feature} className=\"space-y-3\">\n                          <div className=\"flex items-start space-x-3\">\n                            <Checkbox\n                              id={`feature-${feature}`}\n                              checked={isSelected}\n                              onCheckedChange={(checked) => handleFeatureToggle(feature, checked as boolean)}\n                              data-testid={`checkbox-${feature.toLowerCase().replace(/\\s+/g, '-').replace(/[()]/g, '')}`}\n                            />\n                            <div className=\"flex-1 min-w-0\">\n                              <Label \n                                htmlFor={`feature-${feature}`}\n                                className=\"text-sm font-medium cursor-pointer\"\n                              >\n                                {feature}\n                              </Label>\n                              {featurePriority && (\n                                <div className=\"flex items-center space-x-2 mt-1\">\n                                  <PriorityIcon className=\"w-3 h-3\" />\n                                  <Badge className={`text-xs ${priorityColors[featurePriority]}`}>\n                                    {featurePriority} priority\n                                  </Badge>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {/* Priority Selection for Selected Features */}\n                          {isSelected && (\n                            <div className=\"ml-6 pl-2 border-l-2 border-muted\">\n                              <Label className=\"text-xs text-muted-foreground\">Priority Level:</Label>\n                              <RadioGroup\n                                value={featurePriority || 'medium'}\n                                onValueChange={(value) => handlePriorityChange(feature, value as Priority)}\n                                className=\"flex space-x-4 mt-1\"\n                                data-testid={`priority-${feature.toLowerCase().replace(/\\s+/g, '-').replace(/[()]/g, '')}`}\n                              >\n                                <div className=\"flex items-center space-x-1\">\n                                  <RadioGroupItem value=\"low\" id={`${feature}-low`} />\n                                  <Label htmlFor={`${feature}-low`} className=\"text-xs\">Low</Label>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <RadioGroupItem value=\"medium\" id={`${feature}-medium`} />\n                                  <Label htmlFor={`${feature}-medium`} className=\"text-xs\">Medium</Label>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <RadioGroupItem value=\"high\" id={`${feature}-high`} />\n                                  <Label htmlFor={`${feature}-high`} className=\"text-xs\">High</Label>\n                                </div>\n                              </RadioGroup>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              )}\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Additional Notes */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Additional Notes</CardTitle>\n          <CardDescription>\n            Share any specific requirements, questions, or additional context about your feature needs.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Textarea\n            placeholder=\"Tell us more about your specific needs or any features not listed above...\"\n            value={notes}\n            onChange={(e) => setNotes(e.target.value)}\n            className=\"min-h-[100px]\"\n            data-testid=\"textarea-notes\"\n          />\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-center\">\n        <Button\n          onClick={handleSave}\n          disabled={saveFeatureSelection.isPending || selectedFeatures.length === 0}\n          className=\"min-w-[200px]\"\n          data-testid=\"button-save-features\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          {saveFeatureSelection.isPending ? 'Saving...' : 'Save Feature Selection'}\n        </Button>\n      </div>\n\n      {selectedFeatures.length === 0 && (\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Select at least one feature to save your preferences.\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12863}},"version":1}